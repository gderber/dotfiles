You can set up your InitFile to work on multiple platforms by checking
the values of different variables to see what platform you're on. Here
are a few tips.

== Operating system: Microsoft Windows, GNU/Linux, Mac OS X, etc. ==

Sample code:

    (cond ((eq system-type 'windows-nt)
           ;; Windows-specific code goes here.
           )
          ((eq system-type 'gnu/linux)
           ;; Linux-specific code goes here. 
           ))

You can use `C-h v system-type' (command `describe-variable') to see the
current value of `system-type'.

== Graphical vs console Emacs ==

Sample code:

    (cond ((display-graphic-p)
           ;; Graphical code goes here.
           )
          (t
           ;; Console-specific code
           ))

`M-x apropos ^display.*-p$' displays other functions you can use to
test the graphical capabilities of your Emacs. You can also check the
value of the ##window-system## variable.

== Emacs vs. XEmacs ==

[[XEmacs]] may offer to migrate your ##.emacs## file to a ##.xemacs##
file. If you do that, however, a lot of code will be duplicated,
unless you load the common stuff from both ##.emacs## and ##.xemacs##
again. Thus it depends on what you find easier to maintain.

If you're working with multiple Emacs versions or differences between
Emacs and XEmacs, compiling your init file may produce incompatible
byte code, so don't do that.

Many people suggest you write a single InitFile carefully instead of
maintaining duplicate configuration. Here is how it might work:

Use ##(featurep 'xemacs)## to conditionally evaluate code when the
''interface'' or the notation has changed. This is rarely needed.

  (cond ((featurep 'xemacs)
         ;; Code for XEmacs
         )
        (t
         ;; Code for Emacs
         ))

You can also use the `window-system' variable, but that was
never intended as a user level variable, so try to avoid it:

    (when (eq window-system 'x)
      (color-theme-robin-hood))

This is better written using `display-color-cells':

    (when (> (display-color-cells) 16)
      (color-theme-robin-hood))

== Feature-specific ==

If all you need is a certain function, it's better to test if that
specific function is available, using `fboundp':

    (when (fboundp 'auto-compression-mode)
      (auto-compression-mode 1))

Here is function to achieve the same thing (based on a
function from AaronL's InitFile):

    (defun call-if-fbound (function &rest args)
      "Call FUNCTION with optional ARGS, only if it is fbound.
    Return t if it is fbound and called without error, and nil otherwise."
      (when (fboundp function)
        (apply function args)
        t))

Since it returns `t' if and only if the function did exist,
you can use it quite nicely like this:

    (or (call-if-fbound 'iswitchb-mode 1)
        (call-if-fbound 'iswitchb-default-keybindings))

Similarly, you can test whether a variable is bound using function `boundp'.

When setting variables that only exist in some version of Emacs,
don't be afraid to always set them: they will just be ignored in the
versions where they don't exist.

You can also use LocateLibrary to check whether a library has been installed.

== Other things you can test ==

; `emacs-major-version', `emacs-minor-version': the version of Emacs (string / numbers).  This is generally to be avoided. (`M-x emacs-version' gives you a quick interactive way to see general information about the current version.)
; `system-name': hostname of the current machine
; `system-type': symbol for the type of operating system you are using
; `system-configuration'; a string giving the OS and other info
; ##(getenv "TERM")##: the terminal used when Emacs was started

== Customize ==

If you use multiple platforms/setups and you are worried about conflicting Customize settings, consider having different values
of option `custom-file', depending on the setup. For example:

 (setq custom-file
       (expand-file-name (concat "~/."
                                 (if (featurep 'xemacs)
                                     "x"
                                   "")
                                 "emacs-custom.el")))
 (load custom-file t)


Another approach is to use shell scripts and environment
variables to distinguish the context.  For example, you could start Emacs
from a script that sets an environment variable, and then have your InitFile test that variable
using Lisp function `getvar'.

Example: On MS Windows, you could have one shortcut called "Cygwinized
Emacs" call a batch file similar to this one:

    @echo off
    rem Set vars for Emacs
    set PLATFORM=cygwin
    set HOME=t:\tlroche

    rem Use bash to start X
    cd /d D:\bin\cygwin\1.3.13-1\bin
    bash --login -c "startx"
    rem emacs gets called by my .xinitrc

    rem unset vars
    set HOME=
    set PLATFORM=

And for non-Cygwinized Emacs, use a batch file similar to this one:

    @echo off
    set PLATFORM=native
    F:\tlroche\emacs-21.1\bin\runemacs.exe
    set PLATFORM=

Then, in your InitFile, do a test like

    (defvar platform (getenv "PLATFORM"))
    (when (string-match "native" platform)
      ; do what you need to do, e.g. setq load-path
    )
    (when (string-match "cygwin" platform)
      ...
    )

== Multiple Init Files ==

JodyKlymak posted this idea he borrowed from somewhere.  He has three subdirectories: ##~/.gemacs##, ##~/.xemacs##, and
##~/emacs-common##.  There is an ##init.el## file in each.  His ##.emacs## looks
like this:

    ;;; XEmacs backwards compatibility file
    (setq thesub (if (string-match "XEmacs" emacs-version)
                     ".xemacs"
                   ".gemacs"))

    (setq user-init-file
          (expand-file-name "init.el"
                            (expand-file-name thesub "~")))
    (setq custom-file
          (expand-file-name "custom.el"
	    		    (expand-file-name thesub "~")))

    (load-file user-init-file)
    (load-file custom-file)
    (my-color-theme)



----
CategoryCustomize
CategoryDotEmacs
ComparativeEmacsology
