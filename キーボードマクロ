[[en:KeyboardMacros]]
== 概要 ==

Keyboard macros are a powerful Emacs feature. キーボードマクロは Emacs の力強い特徴です。'''キーボードマクロ''' は単にキーシーケンスを ''記録する'' だけのものです。'''[[キーシーケンス]]''' とは、打鍵したキーの並びと、Emacs のコマンドに結びついたマウスでの操作、メニューの操作のことです。なので、キーボードマクロは Emacs のコマンドを実行する ''ユーザ操作のシーケンス(並び・連なり)'' ということになります。

''“キーボード”'' マクロがほとんどのユーザ操作を記録できるということが分かっていただけたでしょうか。 --- 単に ''キーボード'' の操作 ''だけではない'' ということが。よろしいですね。

: '''注意：'''キーボードマクロについての説明を Lisp マクロとは混同しないでください。Lisp マクロは Lisp 関数に似ていて(それほどではないですが)、<code>defmacro</code> を用いて定義されます。

これがキーボードマクロを ''定義'' するやり方です：
* '<code>C-x (</code>' --- キーボードマクロの定義開始
* '<code>C-x )</code>' --- キーボードマクロの定義終了

そして定義したキーボードマクロを ''実行する'' やり方は：
* '<code>C-x e</code>' --- キーボードマクロを実行する

これがマクロを 37 回実行する方法です (37 を与えるために 'C-u' を使います)：
* '<code>C-u 37 C-x e</code>'

'''例：'''

ファイルの中の ''すべて'' の行の最後に “<code>--- foobar 参上</code>” とテキストを追加したいとしましょう。
# 1 行目のはじめに [[テキストカーソル]] / TextCursor を移動します。
# '<code>C-x (</code>' で、キーボードマクロの記録を開始します。
# '<code>C-e</code>' (あるいは '<code>M-x end-of-line</code>') で 1 行目の最後にカーソルを移動します。
# “<code>--- foobar 参上</code>”と入力します。
# '<code>C-a</code>' (あるいは '<code>M-x beginning-of-line</code>') で、1 行目の初めにカーソルを移動します。
# '<code>C-n</code>' (あるいは '<code>M-x next-line</code>') で、2 行目の初めにカーソルを移動します。
# '<code>C-x )</code>' で、キーボードマクロの記録を止めます。
# '<code>C-u 0 C-x e</code>' で、ファイルの終わりに達するまで、マクロを無限回数実行します。 (無限回数については、[[無限引数]] / InfiniteArgument を参照のこと)。

ここで重要なのは、''スタートしたのと似た位置まで''、マクロを定義するということです。
--- そうすれば、そのマクロを実行した後、もう一度実行できる場所にいることになります。これはキーボードマクロを定義する際に従うべき一般的なルールです。マクロを連続で ''N'' 回実行できるように作ってみましょう。

この一般的なルールに慣れたほうがいいのですが、実は、リージョンの各々の行に対して、直前のキーボードマクロを適用するショートカットが存在します。

* <code>M-x apply-macro-to-region-lines</code>

あるいはもっと正確を期すなら (コマンドのドキュメントを引用すると)：

  ポイントとマークの間の行について、行の最初に戻って、直前のキーボードマクロを走らせます。

最後に定義したキーボードマクロに名前を付けることができ、そうすれば名前で実行することができます：
* <code>M-x name-last-kbd-macro</code> --- 最後に定義したキーボードマクロに名前を付ける

なぜそうするのでしょう。1 つの理由は、同じ時に 1 つ以上のマクロを定義できるようにするためです。この直前のマクロに <code>my-macro</code> のように名前を付けたなら、また別のことをするマクロを定義します。そのようにすれば、2 番目のマクロを '<code>C-x e</code>' で実行することができ、まるで Emacs コマンドのように <code>my-macro</code> を '<code>M-x my-macro</code>' で実行することができます。もし 2 番目のマクロにも名前を付けたなら、今度は 3 番目を定義することができます…。

キーボードマクロは、''今の Emacs セッション'' にしか定義されません。次以降のセッションで再利用できるようにしたければ、それを自分の初期化ファイル (<code>.emacs</code> か  <code>_emacs</code>) に保存してください。そのファイルを開いたら、次のコマンドで、マクロ定義を挿入するのです。
* <code>M-x insert-kbd-macro</code> --- 初期化ファイルに名前付きマクロを挿入する。

いまや、次以降のセッションでも、名前付きキーボードマクロが、まるで標準の Emacs コマンドのように、 '<code>M-x</code>' で実行できるようになりました。それをキーに割り付けたければ、初期化ファイルに次のようなコードを加えることです。

    (global-set-key (kbd "C-c a") 'my-macro)

これにより、キーの並び '<code>C-c a</code>' がマクロ <code>my-macro</code> に割り付けられます。

'''次の資料も役立ちます：'''
* DotMode --- 同名の Vi コマンドから着想を得た Emacs モード。このモードではコマンドのセットを再実行することができる。
* http://jfm3-repl.blogspot.com/2007/09/emacs-tricks-6-keyboard-macros.html は、Lisperによる TIPS であり、C のdefine文を書くために Emacs マクロをどう使えるかのチュートリアルです。
* http://www.linuxjournal.com/article/3769 Linux Gazette 掲載の　Jesper Pedersen による Emas マクロの記事です。
* KeybindingGuide キー割付けの記事
* キー割付けの更なる情報のために、関数 <code>local-set-key</code> と <code>global-set-key</code>
* TinyMacro, キーにマクロを割り付ける簡単なやり方

== Isearch 問題　==

[[Isearch]] はマクロを記録する際に、重要な要素となります。バッファの中のある場所を検索し、コマンドを実行するといったことを、マクロは正確に繰り返すことができます。不運にも Isearch を使用し、次々にサーチを実行して場所を移動するマクロは、次に検索にヒットした文字列をスキップしてしまうという振舞いをし、そして 'isearch-mode' に留まるのではなしに、モードから出てしまいます。これはバグとして、[http://lists.gnu.org/archive/html/bug-gnu-emacs/2005-10/msg00534.html] に報告されているのですが、不運にもバグではないとのことです[http://lists.gnu.org/archive/html/bug-gnu-emacs/2005-11/msg00021.html]。

訳注：リンク先でのやりとりを要約すると、Emacs21　以上のバージョンで (global-set-key [?\C-.] "\C-s\C-w") を評価した後、'C-s C-w'(現在カーソルのある単語を検索する) の振舞いと 'C-.' の振舞いが違うということが、バグではないかと報告されました。Emacs20ではこの違いは見られなかったというのがその根拠となっています。バグではないという答えの主旨は、マクロの中では isearch が終わったら、isearch を出るような仕様に　Emacs21 では変更された、とのことです。代替案も掲載されていｒます。

== Emacs Lisp からキーボードマクロを呼ぶ ==

<code>name-last-kbd-macro</code> を使うとき、キーボードマクロを定義する文字列は、あなたが与えたそのマクロ名での関数定義となります。
そういったマクロを　Emacs lisp の中では、関数のように名前で呼び出すことはできません。
例えば、キーボードマクロを "foo" と名付けたなら、Lisp のなかでそのマクロを実行するために、ただ <code>(foo)</code> と書くわけには行かないのです。その代わりに、このように <code>execute-kbd-macro</code> を使わなければなりません。

    (execute-kbd-macro (symbol-function 'foo))

(<code>symbol-function</code> 関数はそのシンボル引数の関数定義を返します。この場合、<code>foo</code> キーボードマクロを定義した文字列を返します。)

== キーボードマクロ実行中にユーザに問い合わせること  ==

キーボードマクロ実行中のある時点で Emacs を一時停止し、ユーザに問い合わせをするために、'<code>C-x q</code>' (<code>kbd-macro-query</code> コマンド) があります。

<pre>
C-x q は kbd-macro-query コマンドを実行します。

  それは 'macros.el' の中にあり、自動ロードされる対話型の　Lisp　関数です。
[引数リストは関数定義がロードされるまでは無効です。]

キーボードマクロの実行中にユーザに問い合わせを行ないます。
  前置引数により、再帰的編集に入り、キーボードマクロの中であってもキーボードコマンドを読むことができます。ユーザーはマクロの実行のたびに違うコマンドを与えることもできます。
  前置引数がなければ、マクロの実行を続けるかどうかを尋ねることができます。
オプションは：
Y       今回の繰り返しを通常通り終了し、次の繰り返しへと続ける。
N       今回の繰り返しの残りをスキップし、次の繰り返しを始める。
RET     マクロを完全に今止める。
C-l     画面を再描画し、再度、尋ねる。
C-r     再帰的編集に入り、そこから出たときに再度尋ねる。
</pre>

== キーボードマクロ実行中にプロンプトを表示する ==

マクロ実行のたびに入力プロンプトを [[ミニバッファ]]　/ MiniBuffer に表示するために、次のコードを使用できます。

(次の関数定義を評価した上で、)キーボードマクロ定義の途中で '<code>C-x Q</code>' を押すと、ミニバッファにプロンプトが出ます (再帰的編集を使用しています)。何かテキストを入力して、<code>RET</code> を押すと再帰的編集が終わり、マクロの定義がミニバッファで続けられます。再度、<code>RET</code> を押すと入力したテキストがそのポイントに挿入されます。もしそのテキストをすぐに挿入したくなければ、入力をキルする('<code>C-a C-k RET</code>')ことができます。そしてそれはマクロ定義の後のほうで使うことができます。

    (defun my-macro-query (arg)
      "Prompt for input using minibuffer during kbd macro execution.
    With prefix argument, allows you to select what prompt string to use.
    If the input is non-empty, it is inserted at point."
      (interactive "P")
      (let* ((query (lambda () (kbd-macro-query t)))
             (prompt (if arg (read-from-minibuffer "PROMPT: ") "Input: "))
             (input (unwind-protect
                        (progn
                          (add-hook 'minibuffer-setup-hook query)
                          (read-from-minibuffer prompt))
                      (remove-hook 'minibuffer-setup-hook query))))
        (unless (string= "" input) (insert input))))

    (global-set-key "\C-xQ" 'my-macro-query)

Emacs 22 では、より短い定義ができます：

      (let* ((prompt (if arg (read-from-minibuffer "PROMPT: ") "Input: "))
             (input (minibuffer-with-setup-hook (lambda () (kbd-macro-query t))
                      (read-from-minibuffer prompt))))
        (unless (string= "" input) (insert input)))

== ワンキー・マクロ ==

コードをファンクションキーに割り付けたくなるかも知れません。このように：

    (global-set-key '[(f1)]          'call-last-kbd-macro)
    (global-set-key '[(shift f1)]    'toggle-kbd-macro-recording-on)

元々のキー割付けを使用するより、ずっと速いです。

トグルする関数：

    (defun toggle-kbd-macro-recording-on ()
      "One-key keyboard macros: turn recording on."
      (interactive)
      (define-key
        global-map
        (events-to-keys (this-command-keys) t)
        'toggle-kbd-macro-recording-off)
      (start-kbd-macro nil))


    (defun toggle-kbd-macro-recording-off ()
      "One-key keyboard macros: turn recording off."
      (interactive)
      (define-key
        global-map
        (events-to-keys (this-command-keys) t)
        'toggle-kbd-macro-recording-on)
      (end-kbd-macro))


== GnuEmacs の一部 ==

: ;;; kmacro.el --- 拡張したキーボードマクロ
: ;;; edmacro.el --- キーボードマクロ・エディタ

== 外部パッケージ ==

kmacro パッケージが、使用中の Emacs セッションで定義され、名前付けされたキーボードマクロを扱うために、素晴らしいサポート機能を用意していますが、保存したり、組織化したり、再ロードしたりといった面は少し弱点として残っています。こういった仕事に当たっては、 [http://thbecker.net/free_software_autilities/emacs_lisp/emacros/start_page.html Emacros] パッケージが便利です。

== キーボードマクロ・タイマー ==

[[キーボードマクロ・タイマー]] / KeyboardMacroTimer を参照してください。

----
[[カテゴリ・キー]] [[カテゴリ・用語集]]
