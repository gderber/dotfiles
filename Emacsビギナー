[[en:EmacsNewbie]]
[[fr:NouvelUtilisateurEmacs]]

'''''Emacsはじめの一歩'''''

== 背景 ==

Emacsとは何か知りたいときは、WikiPedia:Emacsを見てください。

[:EmacsTutorial]

== チュートリアル == 

Emacs には標準で「チュートリアル」が含まれています。ひととおりチュートリアルを終えるのにそれほど時間は掛かりませんし、これをこなせばより効率的に Emacs が使えるようになるでしょう。チュートリアルの開始方法は次のとおりです。

* `C-h t'と入力してください。これは、「コントロールキー（Ctrl）を押したまま`h'を押し、次にコントロールキーを離して`t'を押す」と言う意味です。
** 上記の操作を実行しても、チュートリアルが始まらないときは、`F1 t'を試してください。
** それでも動作しないようなら、`M-x help-with-tutorial'を試してください。これは「エスケープキー(Esc)を押して、`x'を押して、そして"help-with-tutorial"と入力して、エンターキーを押す」という意味です。

Emacsは当てにならない、というわけじゃないんです。 -- キーシーケンスは、Xウィンドウや、コンソール、ターミナルエミュレータやssh越しなど多様なので、`C-h'や`F1'の動作は環境によって異なる場合があるんです。

チュートリアルを英語以外の言語で読むには、`help-with-tutorial-spec-language'コマンドを使ってください。これは「メタキー(Alt)を押しながら`x'を押して、'Alt'を放してから`help-with-tutorial-spec-language'と入力する」ということです。
現在、使用できる言語は次のとおりです: bg, cn, cs, de, es, fr, it, ja, ko, nl, pl, ro, ru, sk, sl, sv, th, zh

== 基本的な考え方 ==

この項目ではEmacsの一般的な使い方について取り上げます。Emacsのマニュアルから基本的な考え方と使用上の注意を紹介します。もっとも、マニュアルそれ自身(`C-h i')を読めば、Emacsと関連することがらがすべてわかるのですが。 -- ただし、'''Emacs用語（ジャーゴン）'''だけはマニュアルに含まれていません。

=== 注意書き ===
Emacsドキュメント中の表記の意味:
: '''C-''' コントロールキーを押しっぱなしにして何か別のキーを打つことを意味する。
: '''M-''' メタキーを押しっぱなしにして何か別のキーを打つことを意味する。メタキーはたいていのキーボードでは`Alt'と書いてあるキーのことです。
: '''DEL''' バックスペースキー(`Backspace', `BS')のことです。デリートキー(`Del')ではありません。
: '''RET''' エンターキー(`Enter', `Return')のことです。
: '''SPC''' スペースキーのことです。
: '''ESC''' エスケープキー(`Esc', `Escape')のことです。
: '''TAB''' タブキー(`Tab')のことです。

"C-M-"や"M-C-"のような組み合わせは、コントロールキーとメタキーを一緒に押しっぱなしにするという意味です。

=== Emacs用語（ジャーゴン）===
Emacs用語の対応表（一般的な用語／ジャーゴン）:

||'''一般的な用語'''||'''Emacs語'''||
||選択範囲・選択部分||リージョン||
||切り取り||キル・kill||
||貼り付け||ヤンク・yank||
||ウィンドウ||フレーム||
||ショートカットキー||キーシーケンス||


Emacs用語の意味:

* '''ウィンドウ'''はフレームの中の区画、つまりサブフレームのこと。
* '''モードライン'''は（Emacs語の）ウィンドウの一番下にあるテキストのこと。ステータスバーともいう。
* '''ミニバッファ'''はコマンドを入力する特殊なバッファのこと。これは各フレームのそれぞれ一番下に表示される。
* '''テキストカーソル'''はタイプしたテキストが挿入される位置を表す。標準では四角く表示される。
* '''マウスポインター'''はマウス位置を示している。標準では矢印で表示される。
* カーソル位置はいつでも'''ポイント'''値で示される。たとえば、カーソルがバッファの3つめの文字にある場合、ポイントは3。
* マウスボタンは'''MB1'''、'''MB2'''、'''MB3'''で表す（通常には左から右）。'''mouse-1'''、'''mouse-2'''、'''mouse-3'''と書かれるときもある。
* '''キーバインディング'''はコマンドとキー操作の対応関係のこと。同じコマンドを複数のキーシーケンスに割り当てることができるが、１つのキーシーケンスは数あるコマンドの中でも1つにしか割り当てることができない。

'''注記:''' メニュー項目の選択とマウス操作は'''キーシーケンス'''として扱われることもあります。 キーシーケンスを入力するべきときに、キーボードの代わりにメニュー項目を選択したり、マウスを操作する（「MB1をクリックする」など）
ことがあります。

"ポイント"と"マーク"については、'''リージョン（テキストの選択）'''で詳しく説明します。さらにいろいろなEmacs用語の定義が知りたいときは、CategoryGlossaryを参照してください。

====Emacs用語の使用例====

次の文例の意味がわかるなら、もうEmacs語を理解してるってこと。ここに書かれてるすべての操作について理解したら、どういう風にEmacsを使えばよいかがだいたいわかるはず。 Good luck :D !

# バッファ<code>foobar</code>を保存する時に使う''キーシーケンス''は`C-x C-s'で、コマンド`save-buffer'に割り当てられている。
# `split-window-horizontally' というコマンドを実行したいのだが、"キーバインディング"も完全な名前も忘れてしまったので、キーシーケンスの`M-x' （Alt キーを押しながら<code>x</code> を入力）を使い、その後、 <code>s-p-l-i-t---w-i-n</code> とタイプした。入力内容は"ミニバッファ"に表示された: <code>split-win</code>。
# <code>TAB</code>を入力するとミニバッファの入力が<code>split-window</code>に展開された。これは、"split-window"で始まる名前のコマンドが存在することを意味する
# もう一度<code>TAB</code>を入力するとミニバッファは"<code>[Complete, but not unique]</code>"と返答してきた。これで、"split-window"は完全な名前だけど、他にも"split-window"で始まる名前のコマンドがあることがわかる。
# さらにもう一度<code>TAB</code>と入力する。こうすると、同じの''フレーム''に新しい''ウィンドウ''が開いて、<code>*Completions*</code>バッファが表れ、そこに"split-window"で始まる名前のいくつかのコマンドが表示される。''MB2''を使ってコマンド名<code>split-window-horizontally</code>をクリックする。
# <code>*Completions*</code>バッファ（とそのウィンドウ）は姿を消し、操作中のフレームが二つのウィンドウに分割されて、両方にバッファ<code>foobar</code>が表示される。これはバッファのウィンドウ<code>foobar</code>で<code>split-window-horizontally</code>コマンドが実行された結果だ。
# 次に、左のウィンドウを`split-window-vertically'を使って分割する。今回は、たまたまキーシーケンス`C-x 2'というキーバインディングを覚えていたので、これを使った。この時点で、このフレームは3つのウィンドウを持ち、それぞれに<code>foobar</code>が入った状態となった。それぞれのウィンドウの''mode-line''に"foobar"という名前が表示されているのが確認できる。
# 左上のウィンドウをクリックすると、そこに''カーソル''が移動する（そしてフォーカスも）。そこで、キーシーケンス`C-x C-f'を使って、<code>toto</code>ファイルを開いた(このキーシーケンスは、`find-file'コマンドに結びつけられている）。ウィンドウのモードライン部分が変わったので、そのバッファが<code>toto</code>に変わったことが確認できた。僕はフレームでバッファ<code>toto</code>ウィンドウサイズを変えるために、''MB1''を使ってモードラインをドラッグした。

# <code>toto</code> バッファ内では、テキストの一部分を ''MB1'' を押しながらドラッグし、新たに ''リージョン'' を指定した。それから、''キーシーケンス'' `C-w' を使って、 そのリージョンのテキストを ''キル'' した。

# <code>foobar</code> 内で ''MB1'' をクリックした。これによってカーソルが''ポインター''の位置に移動した。 それから、<code>toto</code> バッファでキルしたテキストを<code>foobar</code> バッファの''ポイント''の位置に''ヤンク''した。


'''練習問題:''' 上記の例を、（Emacs用語ではなく）一般的な用語を使って言い替えてください。


=== アボートする (キャンセルする) ===

`C-g' を使えば、実行途中のアクションを中止（アボート）することができます。ただし、アクションの種類によっては、`C-g' を何度か繰り返し入力する必要があります (`C-g' を使っても完全にキャンセルされない場合は、`C-]' または `top-level' コマンドを使ってください。 これでなんとかなるはずです)。

'''例 1:''' `M-x some-command' というコマンドを入力しました。<code>RET</code> を使ってコマンドを確定する前に `C-g' を入力すると、先ほど開始したコマンド入力がキャンセルされます。

'''例 2:''' `M-x some-command' を入力したところ、実行が開始されました。しかし、どうやら実行には時間がかかるようであり、また、どのような内容が実行されるのかについて自信がありません。このような場合も、`C-g' を使うと、コマンドの実行をキャンセルできます。

=== ヘルプ ===

''すべて''のEmacs helpを利用するには、`C-h C-h' (`help-for-help') を使ってみてください。`Help' メニューを利用することもできます。 EmacsManual を利用するには、 `Help' > `Info' > `Emacs' を選択します。

次に、便利なヘルプ コマンドを紹介しておきます (ヘルプコマンドについては、`C-h C-h' 経由で調べることもできます):
* '''C-h k''' (`describe-key') - キーボード操作、メニュー、マウス操作によって実行されるコマンドについて、説明を表示する。キーシーケンスを入力すると、それに関連づけられた動作内容が表示される。
* '''C-h w''' (`where-is') - 指定したコマンドと関連づけられた、キーボード操作、メニュー項目、マウス操作を一覧表示する。 `C-h k' の逆。
* '''C-h f''' (`describe-function') - コマンドやその他の機能についての説明を表示する。
* '''C-h a''' (`apropos') - 指定された文字列を含むすべてのコマンドを一覧表示する。 例: `C-h a file' を実行すると、名前に"file" という文字列を含むコマンドがすべて表示される。
* '''C-h m''' (`describe-mode') - カレント バッファのモードを表示する。ここには、このバッファで利用できるキーバインディングやコマンドのうち特に重要なものや、 その他のバッファ固有情報が含まれます。
* '''C-h i''' (`info') - ドキュメントブラウザであるInfoが表示されます。ここから、EmacsManual (さらに、その他のドキュメント) を利用することができます。 


=== コマンドとキーシーケンス ===

Emacs にはいくつもの '''コマンド''' があり、コマンドの中には '''キーシーケンス''' に関連づけられているものがあります。たとえば、「カーソルを1文字分前に進める」という意味の`forward-char' コマンドは、`C-f' というキーシーケンスに結びつけられています。

キーシーケンスは、`C-x C-c' のように複数の「キーの組合せ」で構成されていることがあります。また、キーシーケンスの構成要素は、キーボードのキーに限られているわけではありません。マウス操作やメニュー項目の選択なども、キーシーケンスとみなされます。

; '''例''':
`indent-code-rigidly' コマンドは、（デフォルトでは）どのキーシーケンスにも対応づけられていません。 `grep' コマンドは、（デフォルトでは）どのキーボードによるキーシーケンスにも対応づけられていませんが、メニューバーによるキーシーケンス　「`Tools' > `Search Files'」 (= [menu-bar tools grep])に対応づけられています。.

対応するキーシーケンスが存在するか否かにかかわらず、すべてのコマンドは `M-x' 経由で実行することができます。たとえば、`M-x grep' によって `grep' コマンドが実行されます。

`M-x' を入力した後、`M-p' ('''p'''revious) を入力すると、以前実行したコマンドを呼び出されるので、これを編集したり再実行することができます。コマンドの履歴を先に進むには、`M-n' ('''n'''ext) を使います。より高度なコマンド編集方法については、`C-x ESC ESC' を参照してください。

ユーザーは、好きなコマンドを好きなキーシーケンスに割り当てることができます。先ほど、「`indent-code-rigidly' コマンドは、（デフォルトでは）どのキーシーケンスにも結びつけられていません」と述べたのはそのためです。
また、すべてのキー割り当ては、ユーザーが自由に解除できます。

=== 入力 ===

コマンドの動作によっては、コマンドの入力欄であるミニバッファにユーザーがテキストを入力しなければいけないことがあります。このとき、最初から入力欄にデフォルトのテキスト（たいていの場合は、カーソル位置の前後にあるテキスト）が与えられている場合があります。このテキストは自由に変更して利用することもできますが、`M-C-DEL' または `C-x DEL' を使うと、このテキストを即座に消去することができます。`RET' で確定したのち、好きなテキストを入力してください。 

たとえば、`grep' （メニューから `Tools' Files' を選択、または、`M-x grep' を実行）を実行すると、バッファに検索するテキストと検索対象とするファイル名のパターンを入力するよう求められます。デフォルトでは、このコマンドは、カーソルの前後にあるテキストを検索対象テキストとして表示します。このテキストがあなたの検索したい文字列ではなかった場合は、`M-C-DEL' (または、`DEL'を何度も) 押し続けて、ミニバッファからテキストを消去した後、検索するテキスト、検索対象ファイル名のパターンを入力して、`RET' を押してください。


=== バッファモード ===

すべてのバッファには、固有の編集モード （バッファ固有のコマンドとキーバインディング）が存在します。
バッファの現在のモードに関する情報は、`Help'メニューの`Describe Mode'（または`C-h m')を使って調べることができます。  

'''注意:''' Lisp:menu-bar+.el ライブラリ（ DrewAdams 作）を使っている場合は、バッファ固有メニューは全体メニューと分離した状態で表示されます。具体的には、バッファ固有メニューはセパレータ"||"の左に、その他のすべてのモードに共通するメニュー（`Buffers'、`Files'、`Tools'、`Edit'、`Search'、`Frames'、`Help'）はセパレータ"||"の右に配置されます。そして、セパレータをクリックすると、"<-- Current mode menus to left.   ||   Common menus to right -->"（訳注：「現在のモードに対するメニューは左||共通メニューは右」）と表示されます。

[[image:DrewsEmacsMenuBarBar]]

（Lisp:doremi-frm.el または Lisp:doremi-cmd.el をロードしている場合は、'''Frames'''メニューと'''Help'''メニューの間に、'''Do Re Mi'''メニューが表示されます。

=== アンドゥ（操作の取り消し） ===

すべての操作は`Edit'メニューの`Undo'項目（もしくは、`C-/'または`C-_'）で、取り消すことができます。 この操作の取り消しは、''何回分でも''繰り返すことが可能です。 

なにかしら他の操作を実行すると、アンドゥが中止されます。 

アンドゥの中止後、再度アンドゥ操作を実行すると、''リドゥ''（やり直し）操作となります（直前のアンドゥ動作自体をアンドゥすることになるからです）。 

前回ファイルをセーブしてから行った変更をすべて取り消した場合は、モードラインの左下部に`**'ではなく`--'と表示されるため、ここを見ればセーブされた状態までアンドゥを実行したことがわかります。`M-x revert-buffer'を実行すれば、簡単に、前回セーブした後の変更をすべて取り消して、バッファの中身をファイルがセーブされたときの状態に戻すことができます。

=== マウス ===

Emacsでは、通常どおりマウスを使うことができます。MB1（マウスの左ボタン）を押してドラッグすれば範囲の選択、MB2（マウスの中央ボタン）を押せば貼り付け（ペースト）が可能です。
MB3（マウスの右ボタン）をクリックすると、選択範囲の拡張（2回クリックすると、さらにその選択範囲をキルする）または、現在のバッファに応じたコンテキストメニューことができますのポップアップ表示が実行できます。
マウスの動作についてさらに詳しく知りたい場合は、EmacsManual を参照してください。
特に、マウスのドラッグ操作中にMetaキーを押し続けると、矩形選択が可能です。たとえば、`M-'キーを押しつつ、マウスをドラッグして矩形選択を行い、 次に、MB2ボタンをクリックすれば選択した範囲の文書をペーストできます。
2つにわかれた選択範囲をペーストしたい場合などに、この方法は''とっても''便利です。


=== 検索と置換 ===

`Search'メニューを使えば、検索と置換を実行できます。しかし、通常は、インクリメンタル検索を使ったほうが便利（手軽かつ強力）です。
インクリメンタル検索には`C-s'と`C-r'を使います。
そのほかにも、正規表現（ワイルドカード）、複数ファイルの検索（`M-x grep'）、置換（`Q' in Dired）などの検索オプションが利用できます。


=== リージョン（領域：選択範囲） ===

'''リージョン'''の一方の端となる'''ポイント'''の位置は、テキストカーソル（マウスポインタではないことに注意）の位置となります。
もう一方の端は、'''マーク'''位置といいます。マークは画面に表示されませんが、ポインタ位置はカーソルを見ればわかります。 

ポイントを設定するには、MB1をクリックするか、矢印キーを使います。
マークを設定するには、次の3つの方法があります。

* `C-SPC' （ポイントの位置は変更されない）
* MB1ボタンを使って、ポイントをドラッグする（これまでポイントだった場所がマークとなる）
* MB3ボタンをクリックする（この位置がポイントとなり、これまでポイントだった位置はマークとなる）

マウスを使わずリージョンを設定する場合は､リージョンが視覚的に確認できないことがあります。このようなときは､ポイントとマークを入れ換える`C-x C-x'を使うとよいでしょう。

[:RepeatingPreviousCommands]
=== 直前のコマンドを繰り返す（または少しだけ変更して再実行する）: `C-x ESC ESC' ===

''さっき実行したコマンドをもう1度簡単に実行するには、どうすればよいでしょうか？ ちょっとだけ変更して、もう1度実行したいのですが、どうすればよいでしょうか？?''

`C-x ESC ESC' を使ってください（Ctl-Xを押してから、エスケーブ、エスケーブと2回押す）。
これで、ミニバッファに最後に実行したコマンドのEmacs Lisp（またはキーシーケンス）が入ります。前回とまったく同じコマンドを実行したいときは、`Enter' （`Return'）キーを押すだけでOKです。

''実行例:''

* `describe-function'コマンドに対応する`C-h f'を入力したところ、ミニバッファに次のように表示されました:  <code>Describe function: (? for help)</code>. 
* そこで関数名として、次のようにプロンプトに"undo"を入力しました。 <code>Describe function: (? for help) undo</code>。 すると、`undo'関数についてのヘルプが表示されました。
* 次に、`C-x ESC ESC'を入力したところ、ミニバッファに次のように表示されました。

        Redo: (describe-function (quote undo))

* これは、先ほど実行したコマンドに対応する Emacs Lisp コードです。もう一度同じコマンドを実行する場合は、`Enter'（`Return'）キーを押すだけでOKです。違う関数（たとえば`forward-sexp'）の説明が見たい場合は、"undo"の部分を"forward-sexp"に置き換えから、`Enter'キーを入力します。

        Redo: (describe-function (quote forward-sexp))

この例だとそれほど便利な機能に見えませんが、複数の異なるウィンドウ（異なるバッファ）で、"bush"のところを"kerry"に置換するために、引数まで同じ`query-replace' コマンドを何度か実行したい、というような場合を考えてみてください。まず、最初に1回実行します。それから、 別のウィンドウをクリックして、再実行のために`C-x ESC ESC'と入力します。

        Redo: (query-replace "bush" "kerry" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end)))

The "<code>(query-replace "bush" "kerry"</code>"部分の意味はすぐにわかるでしょうが、そのほかの部分は厳しいかも知れませんね。心配無用です。`Enter'キーを打つだけでよいのですから。 

だけど、どうしても引数の意味が知りたいときは、どうやって調べたらよいでしょうか。
''正解はこちら:'' `describe-function query-replace'（`C-h f' query-replace）です。ヘルプを見れば、`query-replace'は実際には5つの引数を取ることがわかります。

* <code>FROM-STRING</code> - 自分で入力した"bush"に該当
* <code>TO-STRING</code>   - 自分で入力した"kerry"に該当
* <code>DELIMITED</code>   - デフォルトでは、nil
* <code>START</code>       - デフォルトでは、"<code>(if (and transient-mark-mode mark-active) (region-beginning))</code>"
* <code>END</code>         - デフォルトでは、"<code>(if (and transient-mark-mode mark-active) (region-end))</code>"

それぞれの引数については、ヘルプを読めばわかります。大まかに説明すると、最後の2つの引数は、"<code>query-replace</code>"検索に対する制限を指定するものです。アクティブなリージョンがある場合（つまり、テキストが選択された状態）に、検索対象がリージョン内に限られるようにしています。アクティブなリージョンがない場合は、バッファ全体のうち、カーソルより下にある部分がすべて検索対象となります。

[この項目の裏テーマがおわかりでしょうか？ ''Emacs Lisp が少し理解できると、Emacs をより効率的に利用できるようになる''ということです。 学べば学ぶほど、効率的な作業が可能になるでしょう。]

さて、先ほどの例のように別のウィンドウをクリックして別のバッファにカーソルを移動し、<code>query-replace</code>コマンド以外を再実行するだけではなく、そのほかの操作も実行しなければならないときはどうすればよいでしょうか。直前のコマンドは、実行したいコマンド"<code>query-replace</code>"ではなくなっているかも知れません。たとえば "<code>switch-to-buffer another-buffer</code>"コマンドかもしれません（<code>switch-to-buffer</code>コマンドは、`C-x b'に割り当てられています）。 

''直前のコマンドではなく、それ以前に実行したコマンドを再実行するにはどうすればよいでしょうか?''

まず `C-x ESC ESC'を入力した後、`M-p' を入力すると、最後に実行したコマンドの1個前に実行したコマンドを取得できます。さらに、その前に実行したコマンドならば`M-p M-p'です。以下、同様にたどっていくことができます。`M-p' は以前に実行したコマンドを後方向にたどっていきますが、これに対し、`M-n' を入力すると、以前に実行したコマンドを前方向にたどっていきます。

=== キーボードマクロ −− 何度も何度も同じことを実行するには ===

覚えておくととっても便利なものとして、キーシーケンスを"キーボードマクロ"として記録し、（たいていの場合は、何度も）そのマクロを繰り返し再生する方法が挙げられます。 具体的な方法は、[[キーボードマクロ]] / KeyboardMacros を参照してください。


: '''注意:''' Emacsでできることのうち、大抵のことは"キーボードマクロ"として記録できますが、キーボードへの入力だけを単体で記録することはできません。ここでいうキーボードへの入力には、マウス操作、メニュー選択も含まれます。

キーボードマクロの有効な活用法としては、Emacs Lisp コードを保存して、通常のコマンドとして使用するために変更するというものもあります。


== 学習のヒント ==

=== 練習問題 ===

Emacsチュートリアルを実行してみましょう（既述の [[#EmacsTutorial]]の項目を参照）。

たいていの人は、コマンド一覧を眺めて記憶しようとがんばるよりも、実際に実行してみたほうがよく覚えられるものです。
実際に、大きなテキストファイルを手に入れて、いろいろと操作してみてください。データを壊してしまうのが心配なら、バックアップコピーをとっておけば安心です。 -- でも、心配無用。Emacs を使っていれば、めったに作業内容が失われることはありません。 undo コマンド（`C-/' または `C-_'）が用意されています（練習用ファイルの入手先としては、「Project Gutenberg」（[[http://www.promo.net/pg]]）などがあります。【訳注：日本語ならば、「青空文庫」（[[http://www.aozora.gr.jp/]]）などがよいのではないでしょうか】）

=== Emacs に訊いてみよう ===

Emacs についてわからないことがあれば、Emacs 自身に訊いてみましょう。メニュー項目、ドキュメント内の用語、コマンド名……など。Emacs でそれらを調べるためのヘルプコマンドとしては次のようなものがあります。
# キー シーケンスを指定して、意味を調べる: `C-h k' （`describe-key'コマンド）
# ヘルプコマンド`C-h f', `C-h v', `C-h w', `C-h m', `C-h b'などの意味が知りたいときも、`C-h k'を入力してから調べたいキーシーケンスをタイプすればOK。'''`C-h' で始まるキーシーケンスは、すべてEmacs ヘルプを表示するものです'''
# `C-h f'、`C-h v'などを使って、Emacs使いになるために必要なすべてを調べることができます。

そのほかにも、少々遠回りな方法になりますが、''すべてのEmacs ヘルプ'' は、`C-h C-h'（`help-for-help'コマンド）を通して利用できます。

ちょっと Emacs を触った経験がある方なら、Emacs ライブラリのロード方法をご存じでしょう（LoadingLispFiles と CategoryDotEmacs を参照）。そんな方には Lisp:help+.el（ DrewAdams 作）に含まれる`help-on-click/key' コマンド（`C-h RET'に対応）をお薦めします。 このコマンドでバッファ内の''名前''、Emacsウィンドウの ''一部''をクリックしたり、''キーシーケンス''を入力したり、''メニュー項目''を選択すると、そのオブジェクトに関する詳細な情報が表示されます。詳しくは HelpPlus を参照してください。

Drewの Lisp:menu-bar+.el ライブラリを使うと、現在使用できるすべてのEmacsヘルプが、メニューバーからもっと簡単に参照できるようになります。詳しくは、HelpMenuBarPlus と MenuBar を参照してください。

=== Emacs Lisp入門 ===

そうなんです。Emacs Lisp は、''初心者'' にも十分役立ちます。実際、ほんの少し Emacs Lisp を学ぶだけで、ずっと Emacs を効率的に使いこなせるようになるのです。その理由は次のとおり。

* 関数や変数についてのドキュメントやヘルプの内容、より理解できるようになる
* 関数や変数についてもっとよく知りたいときに、Lispソースコードを参照できるようになる
* 一般的なキーシーケンスを、はじめのうちはキーボードマクロに、慣れてきたらLispで定義した独自コマンドに改造できるようになる。詳しくは [[キーボードマクロ]] / KeyboardMacros を参照
* 標準で含まれるソースコードやWebから拾ってきたソースコードを改造して、独自のEmacsコマンドを作れるようになる
* Emacsを、必要に応じて好きなようにカスタマイズできるようになる

では、Emacs Lisp について学ぶにはどうすればよいでしょうか。

* `C-x ESC ESC'を使って、RETキーを押す前に、前回実行したコマンドに対応するLispコードを見てみる。詳しくは [[#RepeatingPreviousCommands]]を参照
* `C-h f'（<code>describe-function</code>）と`C-h v'（<code>describe-variable</code>）を使って、自分の使っているコマンドや変数について理解する。ヘルプ内で、関数名や変数名のリンクをクリックして、それらを定義しているソースコードを表示して、それらをよく読んで理解するようがんばってみる。
* `C-h k'を使って、キーシーケンスを入力したときに、どのコマンドが実行されているのかを確認する。後は、先ほどと同じ。コマンド名のリンクをクリックして、ソースコードを見てみよう
* ''Emacs Lisp Introduction'' を見てみよう。`C-h i'を実行後、`Emacs Lisp Intro'を選択する。http://www.gnu.org/software/emacs/emacs-lisp-intro/では、Web上で Intro を読むこともできる。詳しくは EmacsLispIntro を参照
* ''Emacs Lisp Reference''自体を読む。このリファレンスはとってもよく書けているから。`C-h i'を実行後、`Elisp' （Emacs Lisp は"Elisp"が呼ばれることがある）を選択する。EmacsLispReference はWebでも参照できる（http://www.gnu.org/software/emacs/elisp-manual/）。詳しくは、 EmacsLispReference を参照

== はじめての人のためのリファレンス ==
* ファイルを開く: C-x C-f -- その後、ファイル名を入力
* 新しい文書を作成する: C-x C-f -- その後、既存のファイル名と重ならない名前を入力。TAB補完を利用すれば、入力したファイル名が既に存在していないかどうかを確認できる
* ファイルの保存: C-x C-s
* Emacsの終了: C-x C-c
* バッファをキルする （ファイルを閉じる）: C-x k
* ウィンドウを分割する（2つのファイルの中身を同時に見れるようになる）: C-x 2
* ウィンドウを結合する（ウィンドウを最大化する）: C-x 1
* 作業ウィンドウを切り替える（ウィンドウを分割している場合）: C-x o
* バッファの内容を切り替える（複数のファイルを同時に編集している場合）: C-x b
* バッファメニュー（バッファの一覧）を表示する: C-x C-b
* キーバインディングを忘れてしまったコマンドを呼び出す: M-x -- その後、コマンド名を入力。TABによる補完が可能
* ヘルプを参照する: C-hを入力後、次のいずれかのキーを入力。
** k - キーバインディングに対応する動作を調べる
** f - 関数の動作を調べる
** m - 現在のモードで定義されているキーバインディングを調べる
** w - 関数に対応づけられているキーシーケンスを調べる
** a - ある文字列が含まれるコマンドを調べる

Noorulが、Emacsで本当によく使われる関数とキーの対応の一覧表を作ってくれています。次のリンクを参照してください（http://noorul.mybesthost.com/Emacs.php#2）。

それから、Windows ユーザーは一度 ScrollLock を覗いておいた方がよいかもしれません。

== Emacs で文書を書くために ==
Randall Wood が、Emacsで（コードではなく）文書を書くための簡単なガイドを書いてくれました。この項目では、Emacsをワープロとして使うための機能について、だいたい網羅されています。きっと初心者にとってもこの項目が役に立つことでしょう（Randall Wood著： http://www.therandymon.com/papers/emacs-for-writers.pdf）

== 書籍案内 ==

モニタをじっと見るのは辛いので、紙の書籍が欲しいという人もいることでしょう。
EmacsLispIntro、EmacsLispReference、EmacsManual は GnuPress が出版しています。
これらの書籍はよくできていますし、購入によって FreeSoftwareFoundation を応援することができます。

GnuFreeDocumentationLicense は "Free"ではないと考える人もいます。詳しくは、EmacsManualLicense でのディスカッションを参照してください。
当Wikiでは、[[2003-11-16]]から始まる議論にともなって GnuFreeDocumentationLicense から現在のライセンスに移行されました（このページのフッターを見てみてください）。

=== O'Reilly社の『Learning GNU Emacs 2nd Edition』（邦訳『入門 GNU Emacs 第2版』）のレビュー ===
訳注：本項目は個人的なレビューとして書かれていますが、レビューの著者はよくわかりませんでした。
----------
わたしは、はじめてEmacsを触りはじめたとき、<i>Learning GNU Emacs</i>（Cameron, Rosenblatt & RaymondDebra Cameron, Bill Rosenblatt, Eric Raymond共著 日本版は、福崎俊博訳）を入手した（出版社は、技術者なら大半の人が聞いたことがあるだろう O'reilly press（日本版はオライリー・ジャパン））。 まず、構成がすばらしい。この本に書かれたことで、オンラインドキュメントに載っていないことは何もないのだが、それでもこの本は役に立つ。

最初の5章分（150ページ分）は、Emacsを使う上での基本が詳細に述べられている。
その後は、多種多様な人々に向けた、いろいろな話題に特化した章がいくつも続く。
ちなみに、著者による前書きには、さまざまな仕事の人に向けて、どの部分が役に立つかというガイドが含まれている。
扱われている内容は次のとおり。

* 基本的な編集操作
* 高度な編集操作
* EmailとUsenet
* Telnet、Ange-ftp、W3（Emacs内部からネットにつなぐ方法）
* 基本的なマクロとLisp -- より高度なトピックス
* IDE（統合開発環境）としてEmacsを使う方法
* Emacsのカスタマイズ

個人的に、この本は気に入っている。本書には、スクリーンショットやダイアグラムが数多く掲載されているので、コンピュータの前にいなくても、何について書かれているのかが理解できる。
さらに、本書は技術者以外の人も対象にしている。
1つだけ気に入らないのは、こちらのマシン上のMetaキーがESC[0]であるものと想定していることだ。これは見逃すことのできない問題だ。ほとんどのコンピュータ書籍には、自分とは<i>合わない</i>部分があるものだが。しかしながら、本書は貴重なリファレンスに違いない -- もちろん、紙による書籍という意味で

本書を購入しようかなと思った人は、お好きな本屋にいって自分に役立ちそうかどうかを確認してほしい。ネット上の古本屋も利用できるだろう。最安値ならば送料込で7ドル程度だ。幸運を祈る。

[0] Emacsでは、多くの操作をキーバインディングによって実行する。"M-x"はMetaキーと文字xをいっしょに押すという意味だ。同様に、C-x、A-xは、それぞれ[Ctrl]キー＋[x]キー、 [Alt]キー＋[x]キーという意味だ。
Emacsにおいて、どのキーをMetaキーとするかはコンパイル時に決定される。
それによっては、MetaキーがAltキーの場合（これが望ましい）もあるし、ESCキーの場合もあるし、Windowsキーやまったく違うその他のキーの場合だってある。
MetaキーをAltに変えるのは可能であり、もしMetaキーとしてESCキーを使っているのなら、できるだけはやく変更するべきだ。

-----
CategoryHelp
CategoryDotEmacs
-----
