==What is elisp-depend.el ?==
ElispDepend is mode that parses an elisp file and generates
appropriate dependency information, as comments or as elisp
require and autoload statements.

==Install==
* Load file:
: Make file Lisp:elisp-depend.el (Download:elisp-depend.el) in your load-path, and put
{{{
        (require 'elisp-depend)
}}}
: in ~/.emacs.
* Setup directory:
: If you install emacs at path "/usr/share/emacs/", please ignore below step. 
: Otherwise you need setup your emacs directory with option `elisp-depend-directory-list', like below:
{{{
        (setq elisp-depend-directory-list '("YourEmacsDirectory"))
}}}
: And simplest way to setup is by:
:: M-x customize-group RET elisp-depend RET

==Usage==
* elisp-depend-insert-require:
: Insert appropriate depend libraries code at cursor.

* elisp-depend-insert-comment:
: Insert appropriate depend libraries comment at cursor.

==Describe==
By default, this package will use function `symbol-file' to get depend file with current symbol. 
And then use `featurep' to test this file whether write `provide' sentences for feature reference.
If `featurep' return t, generate depend information as "(require 'foo)" format.
If `featurep' return nil, generate depends as "(autoload 'foo "file")" format.

This packages will always return depend information as `autoload'
format if a feature not write `provide' information in source code.

==Implementation==

The newest version of ElispDepend uses `read' to get a sexp containing
all the elisp code in the buffer.  It then explores the sexp, treating
functors such as `defun' specially.  Each such special symbol has its
own explorer function.

Finally it considers each symbol it found, determining where it's from
and whether to include it.

==Bug==
* This still have bug when some local-variable symbol have same name with exist function, then it will generate unnecessary depend information.

==News==

As of 8 may, 2010, the maintainer is [TomBreton Tom Breton (Tehom)], at Andy Stewart's suggestion. 

==Comment==
[new:DrewAdams:2009-01-11 17:45 UTC]
''Very nice.'' You might also want to relate it to Lisp:lib-requires.el. IIUC, this is generally complementary, but there is also some overlap. One important difference seems to be the method of determining dependencies: ##elisp-depend.el## does not rely on `load-history'; instead, it parses the buffer code. -- DrewAdams

[new]
: Yep, before i write Lisp:elisp-depend.el, i try to use Lisp:lib-requires.el, and i found it use `load-history' to get depend information, and i found sometimes those information is not correct when i modified source code.
: So i write those code to parse valid symbol at current buffer, and return correct depend information file *real* need. -- AndyStewart

[new:DrewAdams:2009-01-12 05:38 UTC]
:: Actually, I see now that I was mistaken. Like ##lib-requires.el##,  ##elisp-depend.el## relies on `load-history' -- that is how `symbol-file' is defined. The difference is that `symbol-file' (hence ##elisp-depend.el##) considers `autoloaded' definitions too (not just loaded libraries) as dependencies. -- DrewAdams


[new:DrewAdams:2009-01-12 05:38 UTC]
Consider mentioning in the doc string of `elisp-depend-insert-require' how to use it: If you want a `require', make sure the library is loaded; otherwise you get an `autoload'. And perhaps mention `elisp-depend-directory-list' there also. That variable is nice, because code can bind it to affect the behavior of `elisp-depend-insert-require' and `elisp-depend-insert-comment'.  -- DrewAdams

[new]
: Thanks, i have write those information at this page and source code. -- AndyStewart

[new:DrewAdams:2009-01-12 05:38 UTC]
I added something about ##elisp-depend.el## at LibraryDependencies and AutomaticFileHeaders. Feel free to correct or embellish it. -- DrewAdams

: Thank you very much. :) -- AndyStewart

[new]
The latest version is available, Lisp:elisp-depend.el.  It uses `read'
to understand the buffer so it should be less error-prone than before.

----
CategoryCode
