This page is about an extension to standard EmacsLisp function `split-string', which lets you split strings in additional ways.  This extension is available in library '''<tt>[[subr+.el]]</tt>'''.

Standard function `split-string' has this signature:

    (split-string STRING &optional SEPARATORS OMIT-NULLS TRIM)

See the Emacs doc for details, but what is of note here is that the second argument, ##SEPARATORS##, is a [[regexp]].  The ##STRING## arg is parsed by matching it successively with regexp ##SEPARATORS##, and the list of substrings that do not match, i.e., that are between the separating text, is returned.

The version of `split-string' in library <tt>[[subr+.el]]</tt> has identical behavior for this signature, in particular for a string ##SEPARATORS## argument.

However the version of `split-string' in ##subr+.el## has two main enhancements:

* An additional optional argument ##FLIP##, which if non-`nil' swaps which pieces are considered separators, so that what would normally be the separator matches are the matches that are returned.  Obviously, you would not pass a typical regexp used for separation (e.g. matching whitespace or commas) in this case; you would instead use ##SEPARATORS## (a misnomer in this case) to match the substrings you ''want''.

* Instead of a ##SEPARATORS## regexp, the second argument (now called ##HOW##) is more general.  Besides a regexp, it can be a character '''predicate''' or a doubleton '''[[plist]]''', ##(PROPERTY VALUE)##, where ##PROPERTY## is a [[text property]] property and ##VALUE## is one of its possible values.



The enhanced `split-string' in ##subr+.el## has the following signature, which accepts two additional arguments:

    (split-string STRING &optional HOW OMIT-NULLS TRIM FLIP TEST)

If the second arg (##HOW##) is a ''predicate'' then it must accept a ''character'' as its (first) argument.  Substrings whose characters all satisfy the predicate are thus distinguished from substrings whose characters do not.  By default, the former are used as separators, so the returned result is a list of substrings whose characters do ''not'' satisfy the predicate.  Non-`nil' arg ##FLIP## flips this behavior, so the result is the substrings whose characters ''satisfy'' the predicate.

If the second arg is a ''[[plist]]'' ##(PROPERTY VALUE)##, it is used to distinguish substrings whose characters have property ##PROPERTY## with value ##VALUE##.  Again, with non-`nil' arg ##FLIP## the result is the substrings whose characters do ''not'' have property ##PROPERTY## with value ##VALUE##.

Optional arg ##TEST## is used only when the second arg is a plist ##(PROPERTY VALUE)##, in which case it defines how the actual value of ##PROPERTY## must match ##VALUE##.  If ##TEST## is absent or `nil' and ##VALUE## is `nil' then ##PROPERTY## is simply tested for ''presence'' (a non-`nil' value).  If ##TEST## is absent and ##VALUE## is non-`nil' then `eq' is used for ##TEST##; that is, the actual value must be `eq' to ##VALUE##.

Library <tt>[[subr+.el]]</tt> also defines a specialization of `split-string' for each of its possible ##HOW## arguments:

* `split-string-by-regexp' -- Split with a separator [[regexp]] (like vanilla `split-string').
* '''`split-string-by-property'''' -- Split according to a [[text property]] value.
* `split-string-by-predicate' -- Split by a predicate.

See the doc string of `split-string-by-property' for more information about using 
##TEST##, in particular for testing membership of the actual value in a list ##VALUE## and testing membership of ##VALUE## in an actual-value list.

In addition to these string-splitting functions, the following buffer-substring functions are defined in <tt>[[subr+.el]]</tt>:

* `buffer-substring-of-propertied' -- Return the [[region]] parts that have a
  given ##PROPERTY##.

* `buffer-substring-of-unpropertied' -- Return the region parts that do not
  have a given ##PROPERTY##.

* `buffer-substring-of-visible' -- Return the visible region parts.

* `buffer-substring-of-invisible' -- Return the invisible region parts.

* `buffer-substring-of-faced' -- Return the region parts that have property
  `face'.

* `buffer-substring-of-unfaced' -- Return the region parts that do not have
  property `face'.


----

CategoryRegexp
CategoryCode

DrewsElispLibraries mentioned here: Lisp:subr+.el
