CompilationMode is the mode that supports the output of compilers or any other utility that gives the line numbers (and sometimes column number) of a file that had errors when processed.  It is the mode that results from running a CompileCommand.

Here are other pages relating to this mode,

* CompileCommand -- controlling what <code>M-x compile</code> actually runs
* CreatingYourOwnCompileErrorRegexp -- more compile message matching
* ModeCompile -- an extended compile with defaults for makefiles and C etc compiling
* DwimCompile â€“ major-mode aware compilation, support for build tools such as maven, sbt, or gradle
* [http://user42.tuxfamily.org/compilation-always-kill/index.html compilation-always-kill.el] -- stop M-x compile asking yes or no to kill a running compilation. Unnecessary since 24.3; instead, set the variable compilation-always-kill to t.
* [http://user42.tuxfamily.org/compilation-emacs21-batch/index.html compilation-emacs21-batch.el] -- regexps for older Emacs byte compiling
* [http://user42.tuxfamily.org/compilation-perl/index.html compilation-perl.el] -- regexps for <code>podchecker</code>, <code>Test</code> and <code>xsubpp</code> errors
* [http://user42.tuxfamily.org/compilation-ledger/index.html compilation-ledger.el] -- regexps for the <code>ledger</code> program (if you run it separate from LedgerMode)
* [http://user42.tuxfamily.org/compilation-onewin/index.html compilation-onewin.el] -- whole-frame window for compile
* [http://user42.tuxfamily.org/compilation-recenter-end/index.html compilation-recenter-end.el] -- recentre buffer to show maximum text when compile finishes
* [http://user42.tuxfamily.org/compilation-weblint/index.html compilation-weblint.el] -- regexps for <code>weblint</code> errors
* [http://user42.tuxfamily.org/compile-command-default/index.html compile-command-default.el] -- establish a default compile command
* CheckBufferCompiled -- Checking whether current buffer's modification time is newer than the time of the last compile.
* [http://user42.tuxfamily.org/renice/index.html renice.el] -- lower sub-process priority

== Control the scrolling of the compilation buffer ==

If you want the compilation buffer to stop scrolling so that the first error is visible, set <code>compilation-scroll-output</code> to <code>'first-error</code>. See the documentation for <code>compilation-scroll-output</code> for more options.

== Browse compilation errors using regexp search ==

See [[Icicles - Other Search Commands]], command `icicle-compilation-search', for a way to navigate among compilation errors or `grep' search hits using one or multiple regexps.


==Small compile window with highlighted errors==

I use the following in order to get a nice behaving small compile window.  F5 closes any old compile windows and opens a new one that is then resized.
C-n and C-p step through errors highlighting the line that they are on.

  (defun my-recompile ()
    "Run compile and resize the compile window closing the old one if necessary"
    (interactive)
    (progn
      (if (get-buffer "*compilation*") ; If old compile window exists
  	(progn
  	  (delete-windows-on (get-buffer "*compilation*")) ; Delete the compilation windows
  	  (kill-buffer "*compilation*") ; and kill the buffers
  	  )
        )
      (call-interactively 'compile)
      (enlarge-window 20)
      )
  )
  (defun my-next-error () 
    "Move point to next error and highlight it"
    (interactive)
    (progn
      (next-error)
      (end-of-line-nomark)
      (beginning-of-line-mark)
      )
  )
  
  (defun my-previous-error () 
    "Move point to previous error and highlight it"
    (interactive)
    (progn
      (previous-error)
      (end-of-line-nomark)
      (beginning-of-line-mark)
      )
  )
  (global-set-key (kbd "C-n") 'my-next-error)
  (global-set-key (kbd "C-p") 'my-previous-error)
  
  (global-set-key [f5] 'my-recompile)

==Another small compiler window==

Here we keep the compiler window 10 lines height, and also make sure that its always does a vertical split (prevents using other window), 
also this version does not close the compilation window. (default binding to F9)

  (defun my-compile ()
      "Run compile and resize the compile window"
      (interactive)
      (progn
        (call-interactively 'compile)
        (setq cur (selected-window))
        (setq w (get-buffer-window "*compilation*"))
        (select-window w)
        (setq h (window-height w))
        (shrink-window (- h 10))
        (select-window cur)
        )
    )

  (defun my-compilation-hook () 
    "Make sure that the compile window is splitting vertically"
    (progn
      (if (not (get-buffer-window "*compilation*"))
         (progn
	    (split-window-vertically)
	    )
	  )
      )
  )

  (add-hook 'compilation-mode-hook 'my-compilation-hook)
  (global-set-key [f9] 'my-compile)

==Compiling with ant==

http://ant.apache.org/faq.html#emacs-mode has some hints on the use of ant and emacs, so that errors get registered correctly, and the regexps adviced there appearently allready should be in place in the newest emacsen, but it doesn't work at my place, instead using the other advice, compiling with the -emacs command-line-argument turns off the [java] stuff, so everything  works nicely.

== compile-.el, compile+.el: Extensions to compile.el ==

Together, <tt>[[compile-.el]]</tt> and <tt>[[compile+.el]]</tt> provide some minor enhancements to standard library ##compile.el##.  Some additional key bindings are made, mouseover highlighting is modified, and a single-window compilation results frame is shrink-wrapped to fit the buffer.



[new:DaveAbrahams:2011-08-28 00:09 UTC]
To ensure correct load order (compile- must load before compile), I put this file in my load-path and call it ##compile.el##

  (require 'compile-)

  (catch 'found
    (dolist (d (mapcar 'file-name-as-directory load-path))
      (let* ((f (expand-file-name (concat d "compile")))
             (regexp (concat (mapconcat 'regexp-quote (get-load-suffixes) "\\|") "$"))
             (seek (car (split-string load-file-name regexp))))
        (and (not (string= f seek))
             (require 'compile f 'noerror)
             (throw 'found nil)))))
[new]






== Colours ==

Here is some code to make the background on all lines on which emacs found errors after a compilation pink. I think it looks pretty cool, YMMV.


    ;; Some code that will make it so the background color of the lines
    ;; that gcc found errors on, should be in another color.
  
    (require 'custom)
  
    (defvar all-overlays ())
  
    (defun delete-this-overlay(overlay is-after begin end &optional len)
      (delete-overlay overlay)
      )
  
    (defun highlight-current-line()
      (interactive)
      (setq current-point (point))
      (beginning-of-line)
      (setq beg (point))
      (forward-line 1)
      (setq end (point))
      ;; Create and place the overlay
      (setq error-line-overlay (make-overlay 1 1))
  
      ;; Append to list of all overlays
      (setq all-overlays (cons error-line-overlay all-overlays))
  
      (overlay-put error-line-overlay
	           'face '(background-color . "pink"))
      (overlay-put error-line-overlay
    	       'modification-hooks (list 'delete-this-overlay))
      (move-overlay error-line-overlay beg end)
      (goto-char current-point)
      )
  
    (defun delete-all-overlays()
      (while all-overlays
        (delete-overlay (car all-overlays))
        (setq all-overlays (cdr all-overlays))
        )
      )
  
    (defun highlight-error-lines(compilation-buffer, process-result)
      (interactive)
      (delete-all-overlays)
      (condition-case nil
          (while t
	    (next-error)
        	(highlight-current-line)
        	)
        (error nil))
      )
  
    (setq compilation-finish-function 'highlight-error-lines)

  -- This just makes the lines in the compilation buffer pink though, right? Not the lines in the actual source code (mike hearn)

If you want the lines inside the buffer to also be pink, simply change the definition of highlight-error-lines to:

    (defun highlight-error-lines(compilation-buffer process-result)
      (interactive)
      (delete-all-overlays)
      (condition-case nil
          (while t
            (next-error)
            (highlight-current-line)
            (save-excursion
              (compilation-next-error-function 0)
              (highlight-current-line))
            )
        (error nil))
      )

== Java stack traces ==

Here's a snippet that adds Java stack trace support to `compilation-mode' and `next-error'. More details here: https://snarfed.org/java-stack-traces-in-emacs-compilation-mode

    (defvar java-stack-trace-dir "src/")
    (defun java-stack-trace-regexp-to-filename ()
      "Generates a relative filename from java-stack-trace regexp match data."
      (concat java-stack-trace-dir
              (replace-regexp-in-string "\\." "/" (match-string 1))
              (match-string 2)))
    
    (add-to-list 'compilation-error-regexp-alist 'java-stack-trace)
    (add-to-list 'compilation-error-regexp-alist-alist
      '(java-stack-trace .
        ("^[[:space:]]*at \\(\\(?:[[:lower:]]+\\.\\)+\\)[^(]+(\\([[:alnum:]]+\\.java\\):\\([[:digit:]]+\\))"
         java-stack-trace-regexp-to-filename 3)))

== Question: Suppress COLUMNS environment variable? ==

I have just built emacs 21.3 on HP-UX.  When I try to do a compile from various frames, I find that the compilation mode has set the environment variable COLUMNS, which the compiler then uses to format it's output.  The COLUMNS is set from the frame that I issue the compile-command.  However, I have *compilation* set in my special-display-buffer-names variable, so the column-width is completely irrelevant for any other frame.  The upshot is that this interferes with the interpretation of compile errors.  Is there a way to suppress COLUMNS from being set?

== Jump to the right column when code is TAB indented ==

By default Emacs assumes that the error message contains the column number as opposed to the character number to jump to the right column. This doesn't work well for TAB indented code. To fix that merely set <tt>compilation-error-screen-columns</tt> to <tt>nil</tt> in the <tt>*compile*</tt> buffer, or to permanently fix it, add the following compilation hook in config file

   (defun my-compilation-mode-hook ()
     ;; Jump at the right column even for tab indentation
     (setq compilation-error-screen-columns nil)
   )
   (add-hook 'compilation-mode-hook 'my-compilation-mode-hook)

----
'''See Also''': GrepMode

----
CategoryProgrammerUtils CategoryModes CategoryNavigation
