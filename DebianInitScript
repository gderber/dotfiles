<pre>
#! /bin/sh
### BEGIN INIT INFO
# Provides:          emacs
# Default-Start:     2 3 4 5
# Default-Stop:      S 0 1 6
# Description:       This file should be placed in /etc/init.d.
### END INIT INFO

#change this
#USERNAME=YourUserName
USERNAME=`id 1000 -un`
eval USERHOME=~$USERNAME
DESC="Run the emacs daemon."
NAME=emacs
#change this
#DAEMON=/opt/emacs23/bin/$NAME
DAEMON=`which emacs`
DAEMON_ARGS="--daemon"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
#change this
#EMACSCLIENT=/opt/emacs23/bin/emacsclient
EMACSCLIENT=`which emacsclient`

EVALEXIT="(progn (kill-emacs))"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon -c $USERNAME -d $USERHOME --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon -c $USERNAME -d $USERHOME --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
        $EMACSCLIENT --eval "$EVALEXIT" 
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac

:
</pre>

I use also this start script placed in /usr/bin/emacs
<pre>
#!/bin/bash
USERID=`id -u`
if [ ! -e /tmp/emacs$USERID/server ]
then
	echo "Starting server."
	/etc/init.d/emacs start
        while [ ! -e "/tmp/emacs$USERID/server" ] ; do sleep 1 ; done
fi

emacsclient -c "$@"
</pre>



Since start-stop-daemon needs root should they be sudo calls? Otherwise surely on root can run emacs in this way!
* This init script requires you to change the USERNAME variable - not ideal :/
* How do you think deal with the choose of a user? One server per user? I think its a bad idea. The server is not useful for all users.
** How about starting  a server for every user in group 'emacs' or 'emacs-daemon'?

You should rather change the variables in /etc/default/emacs, this is how other init scripts work. You could extend the script to start daemons for several users, e.g. by looking for a .start-emacs-daemon file in their home directories. But then, the init script wouldn't make much sense on a system with multiple users, anyway: such a computer should never get powered off, so the init script will not run, anyway. A better solution would be to start the daemon lazily: just create a wrapper around emacsclient, starting the daemon if it isn't already running. -- AnselmHelbig

several *bugs*
* no <code>user</code> command on my debian machine, better replace <code>USERID=`user -u $USER`</code> with <code>USERID=`id -u`</code> and remove the previous line.
* <code>start-stop-daemon</code> is in /sbin which is not in default <code>$PATH</code>, better add <code>PATH=/usr/sbin:/usr/bin:/sbin:/bin</code> below the line <code>. /lib/lsb/init-functions</code>
* still got <code>start-stop-daemon: Unable to chdir() to ~username (No such file or directory)</code>
       emacsclient "$@"
       return $?

After fixing all these, I still can't stop the daemon, <code>sudo /etc/init.d/emacs stop</code> gives
<pre>
        /usr/bin/emacsclient: can't find socket; have you started the server?
        To start the server in Emacs, type "M-x server-start".                         
        /usr/bin/emacsclient: No socket or alternate editor.  Please use:

             --socket-name
             --server-file      (or environment variable EMACS_SERVER_FILE)
             --alternate-editor (or environment variable ALTERNATE_EDITOR)
</pre>

*Fixed:* I was able to use <code>sudo /etc/init.d/emacs stop</code> to stop the daemon with the above init script after replacing
<pre>
$EMACSCLIENT --eval "$EVALEXIT"
</pre>
in the <code>do_stop()</code> function with
<pre>
su -c "$EMACSCLIENT --eval \"$EVALEXIT\"" $USERNAME
</pre>
The problem was that root didn't have an emacs server running.  It worked fine when running
<code>/etc/init.d/emacs stop</code> as <code>$USERNAME</code>, but it would have failed during shutdown. --JasonBlevins

Several more *bugs*

* I needed to alter all uses of "~" in my .emacs (and related) files to the absolute path to my home directory.
* <code>(user-login-name)</code> returns "root". I have a working hack, but it's probably not very advisable: I've changed the <code>DAEMON</code> and <code>DAEMON_ARGS</code> variables to run <code>emacs</code> using <code>su</code> allowing me to specify the <code>-l</code> switch to <code>su</code>:

<pre>
DAEMON=/bin/su
DAEMON_ARGS="${USERNAME} -l -c emacs -- -daemon -u ${USERNAME}"
</pre>

And <code>start-stop-daemon</code> should be executed *without* the <code>-c $USERNAME</code> switch.

--RichardLewis
