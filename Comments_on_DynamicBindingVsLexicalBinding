Damn, this page is  nightmare.

I'm going to rework it at some point:

* pointer to explanatory scope page
* emacs24 lexical scope
* dynamic scope
* how the 2 interract, especially let binding things

-- [http://nic.ferrier.me.uk NicFerrier] 2013-03-03 10:38 UTC


----

----

: Each use of `let' creates a fresh location, even if you use the same name:

      (let ((a 1))
        (let ((a 2))
           (let ((a 3))
             (print a))
           (print a))
        (print a))
        ==> 3
            2
            1

[new:HongxuChen:2013-05-08 13:29 UTC]
    
Know little about elisp. But the result of this expression is as follows on my Emacs(24.3).  So am I missing something?

    3
    
    2
    
    1
    1


[new:DrewAdams:2013-05-08 14:42 UTC]
(Moved HongxuChen's comment here from main page.)

I think your question is "Why do I see an extra `1' at the end?"  If so, the answer is that when you evaluated the `let' form you probably used something like `##M-:##', that is, some command that, itself, prints the result of the evaluation.  The `3 2 1' is printed by the `let' form, and the final `1' is printed by whatever command you used to evaluate the `let' form.

----

-- DrewAdams 2013-05-08 14:45 UTC


----

Again, macros can be useful.
{{{
(defmacro lambda-evaluator (lambda-form)
  `(funcall ,lambda-form))

(defun my-f (param)
  (lambda-evaluator #'(lambda () (+ 1 param))))

(my-f 1)
==> 2

(my-f 2)
==> 3
}}}
-- hajovonta 2016-03-23 21:15 UTC


----

This page still seems like a nightmare. It should be discussing scope and extent but fails to mention extent explicity. A variable's extent is what is affected by dynamic vs. lexical binding.

See https://www.emacswiki.org/emacs/DynamicBindingVsLexicalBinding

-- Anonymous 2016-12-19 19:41 UTC

