'''<nowiki>ErbotPisg</nowiki>''': Pisg is a software that helps you create fun channel statistics from channel logs.  To create channel statistics from erbot's logs, see:  http://www.math.tu-berlin.de/~freundt/ErbotPage.html
----
== Natural Language Translation ==
You need to have libtranslate-bin installed. Ubuntu Dapper provides it here: http://packages.ubuntu.com/dapper/libs/libtranslate-bin, debian does not yet provide it. From then on, simply enable your bot's erbot-translate-p and disable erbot-paranoid-p. See also more technical notes at the bottom of ErbotEmacs. Here are some examples: 
                                                
<deego> borg: t8 en es I love Spanish
<borg> Amo espanol




== Local Copy ==
How to interact with your local erbot without connecting to the internet?

No way currently, except for these hacks: 

* You can always su to erbot and M-x bbdb to view/edit its database.

* Install a local irc server and then join the irc server 127.0.0.1.



== Startup == 
What's a handy way to start up erbot?

       screen -d -m emacs -nw -f erbot-join-servers

This should start up erbot and have it join the channel you want.  You won't realize this, of course, because screen will have detached the process.  To get at that emacs process, reattach screen:

        screen -r

or 


       screen -DR <name>

== Erbot Tip of the day ==

=== Functions for internal variables ===

<pre>
<deego> [FTOTD]: Many internal variables can be examined by calling a corresponding *function*. Eg: ,,(fs-features),,                                                                                         
        which also gets invoked if you type ,features.
<fsbot> (cc-mode cc-fonts cc-guess cc-menus cc-cmds cc-styles cc-align cc-engine cc-vars cc-defs etags dired-aux                                                                                              
        add-log lpr parse-time vc-cvs dired help-fns yow cookie1 mail-utils url-cache url-http mail-parse rfc2231                                                                                             
        rfc2047 rfc2045  ..[Type ,more]
</pre>

=== ,df foo behavior ===
<pre>
<deego> [FTOTD] [re: jlf.. and ..  dwim] When you ,df foo, it  looks for both 'foo and 'fs-foo, in that                                                                                                       
        order. (Exception: ,df fs-foo does not look for fs-fs-foo, of course!). Most English commands have such                                                                                               
        adaptive, dwim behavior. Lispy invocations, otoh, tend to do-what-you-wrote.
</pre>

=== ,dkb ===

<pre>
<deego> [FTOTD]: Use ,dkb (describe-key-briefly) instead of ,dk to avoid spamming the channel. ,,dkb C-x h      [14:00]
<fsbot> mark-whole-buffer  ..(symbol)
</pre>

=== , // ===
<pre>
<deego> oh, this reminds me [FTOTD]: ,,(// 4 3),, - tries to do be dwimmy, unlike /.
</pre>


=== ,directonly ===
<pre>
<deego> [FTOTD]: do a ,r/^/directonly / in TERM 0 to remove snarky autoreplies. Use directonly liberally when defining                                                                                        
        entries for things like "really" or "what", for obvious reasons.
</pre>

=== Forgoing dashes ===
<pre>
<deego> [FTOTD]: If a term exists for most-solved-problems, then simply typing ,most used problems (no need for -'s) will almost always find that term.                                 [14:42]
</pre>

=== Re-Using existing term-definitions ===

Background: ,foo is lisp (long expression involving lispargs) usually results in an invocation ,foo bar being parsed by ,foo.    However, if a another foo-bar exists, then ,foo bar may describe that term instead. That's how fuzzy matching works, and is supposed to work for infobot functionality. The "is lisp" method is, thus, not a foolproof way of doing lispy stuff. Instead, you should ,(defun foo (long expression)).  When a function exists, then ,foo bar baz /always/ gets parsed by the function, and this is what was desired by the writer of ,foo. However, converting looong expressions into ,(defun)s can be a lot of work. Therefore, 

<pre>
<deego> [FTOTD] Instead of converting an elaborate ",foo is lisp (loooong ..)" into a ",(defun foo ... (loooong))" manually, you can simply add tack on a ,(defun foo (&rest args) (describe "foo")). That way, ",foo bar baz" will be guaranteed to bypass fuzzy matching and call a function, yet re-use the existing ".. is lisp" definition.


</pre>

 

-----
ErBot
