== replace-regexp-in-string ==

Emacs21 already has what you need:

<pre>
(replace-regexp-in-string "fo+" "baz" "da foo is foobared")

 => "da baz is bazbared"
</pre>

== Dired ==

dired.el already has what you need:

<pre>
(require 'dired)
(dired-replace-in-string "fo+" "baz" "da foo is foobared")

 => "da baz is bazbared"
</pre>

== Splitting and Joining Strings ==

You can use the regexp you want to replace as a separator while splitting a string into a list, and join the strings back using your replacement as the new separator.

<pre>
(mapconcat 'identity (split-string "da foo is foobared" "fo+") "baz" )

 => "da baz is bazbared"
</pre>

=== WARNING ===
Beware that a occurence at the beginning of a string is ERASED.

<pre>
(mapconcat 'identity (split-string "fooo da foo is foobared" "fo+") "baz" )

 => " da baz is bazbared"
</pre>
[new]
The version for Emacs 22 has changed incompatibly.

== Discussion ==

I think replace-regexp-in-string must be written in C for speed.
Replacing a string is frequently used in text processing. --Anonymous

[new]
That premise is wrong in Emacs, where things mostly happen
in buffers, and it's probably an uneducated guess that
it would be significantly faster as a primitive.  It was
actually written on the basis of measurement and most
likely usage.

[new]
I did a benchmark test. --Anonymous

<pre>
(defun benchmark0 (body)
  (let ((s (current-time)) e)
     (unwind-protect
         (eval body)
       (setq e (current-time)))
     (require 'timeclock)
     (- (timeclock-time-to-seconds e)
        (timeclock-time-to-seconds s))))
(defmacro benchmark (&rest body)
  "Measure a benchmark."
  `(benchmark0 '(progn ,@body)))

(progn (setq str (with-current-buffer "testbuf" (buffer-string))) (length str))
 => 1610056

(let ((gc-cons-threshold  (* 50 1024 1024)))
  (garbage-collect)
  (benchmark
   (replace-regexp-in-string
    "defun" "DEFUN"
    (replace-regexp-in-string
     "defmacro" "HOGE"
     (replace-regexp-in-string
      "regexp" "RE" str)))
   ))
 => 0.6
</pre>

The string is about 2MB.
It takes about 0.6 secs to do replace-regexp-in-string 3 times!!

<pre>
require 'benchmark'
str = ARGF.read
puts Benchmark::measure {
  str.gsub(/defun/, 'DEFUN').gsub(/defmacro/, 'HOGE').gsub(/regexp/,'RE')
}
=> 0.02
</pre>

While the same procedure in Ruby, which is a SLOW script language, takes about 0.02 secs.
Needless to say, String#gsub is written in C for speed (and therefore the slowness of Ruby is irrelevant).
It is 30 TIMES FASTER than EmacsLisp version.

[new]
Timing Ruby says nothing relevant to Emacs implementation.
The comments in the Emacs implementation are relevant.
The way to prove that a different implementation would be
faster is to measure that different implementation.

[new]
How do you think the slowness?
This benchmark says that some string manipulation in emacs-lisp is UNBEARABLY slow(I think).
I think your dynamic loading patch should be in Emacs CVS.
It will enable each developer to write the bottleneck in C and increase processing speed dramatically.

[new]
Are you not just comparing apples and oranges here?
Ruby is not an interactive editor. -- LennartBorgman

[new:DrewAdams:2010-03-14 00:03 UTC]
: Not to be confused with comparing ApplesAndOranges. :-D -- DrewAdams

----
CategoryCode
