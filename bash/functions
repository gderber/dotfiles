#!/bin/bash

# https://github.com/xvoland/Extract/blob/master/extract.sh

# Handy Extract Program
function extract() {
    if [ -z "$1" ]; then
	# display usage
	echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    else
	if [ -f $1 ] ; then 
	    case $1 in 
		*.tar.bz2|*.tbz2) tar xvjf "$1" ;; 
		*.tar.gz|*.tgz) tar xvzf "$1" ;; 
		*.tar.xz) tar xvJf "$1" ;;
		*.lzma) unlzma ./"$1" ;;
		*.bz2) bunzip2 -k "$1" ;; 
		*.rar) unrar x "$1" ;; 
		*.gz) gunzip -k "$1" ;; 
		*.tar) tar xvf "$1" ;; 
		*.zip) unzip "$1" ;; 
		*.Z) uncompress "$1" ;; 
		*.7z) 7z x "$1" ;; 
		*.xz) unxz ./"$1" ;;
		*.exe) cabextract ./"$1" ;;
		*) echo "'$1' cannot be extracted via >extract<" ;; 
	    esac 
	else 
	    echo "'$1' is not a valid file!" 
	fi 
    fi
}

function decToBin { echo "ibase=10; obase=2; $1" | bc; }
decTohex() { bc <<< "obase=16; $1"; }

beep () {
    echo -e -n \\a
}

hexscroll() { pv -qL 90 /dev/urandom | xxd -c $(( ($COLUMNS-10)*2/7 )); }

fuck () {
    if [ "$1" == "off" ]; then
	sudo poweroff
    else
	echo "\"fuck\" is not a recognised command"
    fi
}

up() {
     local d=""
     limit=$1
     for ((i=1 ; i <= limit ; i++))
     do
	 d=$d/..
     done
     d=$(echo $d | sed 's/^\///')
     if [ -z "$d" ]; then
	 d=..
     fi
     cd $d
}

# Inspiration: http://serverfault.com/a/5551 (but basically rewritten)
fawk() {
    USAGE="\
usage:  fawk [<awk_args>] <field_no>
        Ex: getent passwd | grep andy | fawk -F: 5
"
    if [ $# -eq 0 ]; then
	echo -e "$USAGE" >&2
	return
	#exit 1 # whoops! that would quit the shell!
    fi
    
    # bail if the *last* argument isn't a number (source:
    # http://stackoverflow.com/a/808740)
    last=${@:(-1)}
    if ! [ $last -eq $last ] &>/dev/null; then
	echo "FAWK! Last argument (awk field) must be numeric." >&2
	echo -e "$USAGE" >&2;
	return
    fi
    
    if [ $# -gt 1 ]; then
	# Source:
	# http://www.cyberciti.biz/faq/linux-unix-bsd-apple-osx-bash-get-last-argument/5F
	rest=${@:1:$(( $# - 1 ))}
    else
	rest='' # just to be sure
    fi
    awk $rest "{ print  \$$last }"
} # fawk


swap() { 
# Swap 2 filenames around, if they exist (from Uzi's bashrc). 
    local TMPFILE=tmp.$$ 
    [ $# -ne 2 ] && 
    echo "swap: 2 arguments needed" && 
    return 1 
    [ ! -e $1 ] && 
    echo "swap: $1 does not exist" && 
    return 1 

    [ ! -e $2 ] && 
    echo "swap: $2 does not exist" && 
    return 1 
    
    mv "$1" $TMPFILE 
    mv "$2" "$1" 
    mv $TMPFILE "$2" 
}

function killps() { # kill by process name
    local pid pname sig="-TERM" # default signal 
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then 
	echo "Usage: killps [-SIGNAL] pattern" 
	return; 
    fi 

    if [ $# = 2 ]; then 
	sig=$1 ; 
    fi 

    for pid in $(my_ps| awk '!/awk/ && $0~pat { print $1 }' pat=${!#} ) 
    do 
	pname=$(my_ps | awk '$1~var { print $5 }' var=$pid ) 
	if ask "Kill process $pid <$pname> with signal $sig?" 
	then 
	    kill $sig $pid 
	fi 
    done 
} 


function mydf() { # Pretty-print of 'df' output. { 
    # Inspired by 'dfc' utility. 
    for fs ; do 
	if [ ! -d $fs ] 
	then 
	    echo -e $fs" :No such file or directory" ; continue 
	fi 


	local info=( $(command df -P $fs | awk 'END{ print $2,$3,$5 }') ) 
	local free=( $(command df -Pkh $fs | awk 'END{ print $4 }') ) 
	local nbstars=$(( 20 * ${info[1]} / ${info[0]} )) 
	local out="[" 

	for ((j=0;j<20;j++)); do 
	    if [ ${j} -lt ${nbstars} ]; then 
		out=$out"*" 
	    else out=$out"-" 
	    fi 
	done 

	out=${info[2]}" "$out"] ("$free" free on "$fs")" 
	echo -e $out 
    done 
}


function ii() { # Get current host related info. { 
    echo -e "\nYou are logged on ${BRED}$HOST" 
    echo -e "\n${BRED}Additionnal information:$DC " ; uname -a 
    echo -e "\n${BRED}Users logged on:$DC " ; w -hs | cut -d " " -f1 | sort | uniq 
    echo -e "\n${BRED}Current date :$DC " ; date 
    echo -e "\n${BRED}Machine stats :$DC " ; uptime 
    echo -e "\n${BRED}Memory stats :$DC " ; free 
    echo -e "\n${BRED}Diskspace :$DC " ; mydf / $HOME 
    echo -e "\n${BRED}Local IP Address :$DC" ; myip 
    echo -e "\n${BRED}Open connections :$DC "; netstat -pan --inet; 
    echo 
}

function ask() { # See 'killps' for example of use. { 
    echo -n "$@" '[y/n] ' ; read ans 
    case "$ans" in 
	y*|Y*) return 0 ;; 
	*) return 1 ;; 
    esac
}

function commoncommands () {
    history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
}
