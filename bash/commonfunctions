#!/bin/bash

LOWUSE=50
MEDUSE=75
HIGHUSE=90
ALERTUSE=95

#LOWTEMP=
#MEDTEMP=
#HIGHTEMP=
#ALERTTEMP=

function loadave () {
    echo $(cat /proc/loadavg | awk '{print $1}')
}

function loadper () {
    local LOAD=$(loadave)
    local CORES=$(grep 'model name' /proc/cpuinfo | wc -l)
    local LOADPER=$(echo ${LOAD} ${CORES} | awk '{print $1 / $2 * 100}' | cut -d. -f1)
    echo -ne "${LOADPER}"
}

function loadcolor () {
    local LOADCOLOR=""
    local LOADPER=$(loadper)
    if [ ${LOADPER} -gt ${HIGHUSE} ]; then 
	LOADCOLOR="${ALERT}"
    elif [ ${LOADPER} -gt ${MEDUSE} ]; then 
	LOADCOLOR="${RED}"
    elif [ ${LOADPER} -gt ${LOWUSE} ]; then 
	LOADCOLOR="${BRED}"
    else 
	LOADCOLOR="${BLUE}"
    fi
    echo -ne "$LOADCOLOR"
}

function loadinfo () {
    local LOAD=$(loadave)
    local LOADPER=$(loadper)
    local LC=$(loadcolor)
    echo -ne "${LC} ${LOAD} ${LOADPER}"
}

function distroinfo () {
    [ -r /etc/lsb-release ] && . /etc/lsb-release

    if [ -z "$DISTRIB_DESCRIPTION" ] && [ -x /usr/bin/lsb_release ]; then
        # Fall back to using the very slow lsb_release utility
        local DISTRIB_DESCRIPTION=$(lsb_release -s -d)
    fi
    echo -ne "${DISTRIB_DESCRIPTION}"
}

function osinfo () {
    local KERNEL=$(uname -r)
    local OPERATING_SYSTEM=$(uname -o)
    echo -ne "${KERNEL} ${OPERATING_SYSTEM}"
}

function uptimeinfo () {
    local UPTIMEHOURS=$(uptime |cut -d, -f-2|cut -d\  -f4-)
#    local UPTIMEDAYS=$
#    local UPTIME=$(awk '{print int($1/86400)" day(s) "int($1%86400/3600)":"int(($1%3600)/60)":$(
    echo -ne "${UPTIMEHOURS}"
}

function uprecordinfo () {
    local UPRECORDS=$(uprecords| grep -e "   1"|cut -d\| -f1|cut -d\  -f9-|head -n 1)
    echo -ne "${UPRECORDS}"
}

function meminfo () {
if [ -z ${BOXNAME} ]; then
local SI="--si"
fi
    MEMORY=$(free -gh ${SI} | head -n 2 | tail -n 1 | awk {'print $2'})
    MEMUSED=$(free -gh ${SI} | head -n 2 | tail -n 1 | awk {'print $3'})
    MEMFREE=$(free -gh ${SI} | head -n 2 | tail -n 1 | awk {'print $4'})
    MEMPER=$(free -m | awk '/Mem/ { printf("%3.1f", $3/$2*100) }')
    MEMPER2=$(echo ${MEMPER} | cut -d. -f1)

    if [ ${MEMPER2} -lt ${MEDUSE} ]; then
        MC=${GREEN}
    elif [ ${MEMPER2} -ge ${MEDUSE} ] && [ ${MEMPER2} -lt ${HIGHUSE} ]; then
        MC=${YELLOW}
    else MC=${RED}
    fi

    echo -ne "${MC}${MEMORY} ${MEMUSED}/${MEMFREE} ${MEMPER}"
}

function swapinfo() {
if [ -z ${BOXNAME} ]; then
local SI="--si"
fi
    SWAP=$(free -gh ${SI} | tail -n 1 |awk {'print  $2'})
    SWAPUSED=$(free -gh ${SI} | tail -n 1 | awk {'print $3'})
    SWAPFREE=$(free -gh ${SI} | tail -n 1 | awk {'print $4'})
    SWAPPER=$(free -m | awk '/Swap/ { printf("%3.1f", $3/$2*100) }')
    SWAPPER2=$(echo ${SWAPPER} | cut -d. -f1)

    if [ ${SWAPPER2} -lt ${MEDUSE} ]; then
        SC=${GREEN}
    elif [ ${SWAPPER2} -ge ${MEDUSE} ] && [ ${SWAPPER2} -lt ${HIGHUSE} ]; then
        SC=${YELLOW}
    else SC=${RED}
    fi

    echo -ne "${SC}${SWAP} ${SWAPUSED}/${SWAPFREE} ${SWAPPER}"
}

function diskinfo() {
    DISK=$(df -h / | awk '{ a = $2 } END { print a }')
    DISKUSED=$(df -h / | awk '{ a = $3 } END { print a }')
    DISKFREE=$(df -h / | awk '{ a = $4 } END { print a }')
    DISKPER=$(df -h / | awk '/\// {print $(NF-1)}')
#    DISKPER=$(awk '{printf("%3.1f", $1/$2*100) $DISKUSED $DISK }')
    DISKPER2=$(echo ${DISKPER} | cut -d% -f1)


    if [ ${DISKPER2} -lt ${MEDUSE} ]; then
        HC=${GREEN}
    elif [ ${DISKPER2} -ge ${MEDUSE} ] && [ ${DISKPER2} -lt ${HIGHUSE} ]; then
        HC=${YELLOW}
    else HC=${RED}
    fi

    echo -ne "${HC}${DISK} ${DISKUSED}/${DISKFREE} ${DISKPER}"
}

function lastlogininfo () {
    local USERNAME=$(whoami)
    LASTDAY=$(lastlog -u ${USERNAME} | tail -n 1| awk '{ printf("%s", $4) }')
    LASTDATE=$(lastlog -u ${USERNAME} | tail -n 1| awk '{ printf("%s", $6) }')
    LASTMONTH=$(lastlog -u ${USERNAME} | tail -n 1| awk '{ printf("%s", $5) }')
    LASTTIME=$(lastlog -u ${USERNAME} | tail -n 1| awk '{ printf("%s", $7) }')
    LASTYEAR=$(lastlog -u ${USERNAME} | tail -n 1| awk '{ printf("%s", $9) }')
    LASTFROM=$(lastlog -u ${USERNAME} | tail -n 1| awk '{ printf("%s", $3) }')
    LASTLOG="${LASTDAY} ${LASTYEAR} ${LASTMONTH} ${LASTDATE} ${LASTTIME} ${LASTFROM}"
    echo -ne "$LASTLOG"
}

function usersinfo () {
    LOGGEDINUSERS=$(w -hs | cut -d " " -f1 | sort | uniq)
    echo -ne "$LOGGEDINUSERS"
}



function cpuinfo () {
    local CPU=$(cat /proc/cpuinfo | grep 'model name' | head -1 | cut -d':' -f2)
    echo -ne "${CPU}"
}

function bat_color () {
    batteryvariables
    if [ "$BAT_PERCENTAGE" -lt 100 ]; then
	echo -ne "${BC}${BAT_PERCENTAGE}% ${BAT_STATE} ${BAT_FULL}${BAT_EMPTY}${SDC} "
    else
	echo -ne ""
    fi
}

function ipinfo () {
    local IPADDR=$(ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}')
    echo -ne "$IPADDR"
}

function ispinfo () {
    local EXTIPADDR=$(myip)
    local ISP=$(geoiplookup ${EXTIPADDR} |grep ASN |cut -d: -f2)
    echo -ne "$ISP"
}

function location_zip() {
    local EXTIPADDR=$(myip)
    local ZIP=$(geoiplookup ${EXTIPADDR}|grep City| awk '{ printf "%s", $10 }'|cut -d, -f1)
    echo -ne "${ZIP}"
}

function locationinfo () {
    local EXTIPADDR=$(myip)
    local ZIP=$(location_zip)
    local CITY=$(geoiplookup ${EXTIPADDR}|grep City| awk '{ printf "%s", $9 }'|cut -d, -f1)
    local STATE=$(geoiplookup ${EXTIPADDR}|grep City| awk '{ printf "%s", $8 }'|cut -d, -f1)

    echo -ne "${CITY} ${STATE} ${ZIP}"

}

function weathertempinfo () {
    ZIP=$(location_zip)
    TEMP=$(weather ${ZIP} | grep Temp| awk '{ printf("%s", $2)}')
    DEGF='°F'
    TEMPC=$(weather ${ZIP} | grep Temp | awk '{ printf("%s", $4)}')
    DEGC='°C'
    TEMPCOLOR=$(weather ${ZIP}|grep Temp|cut -d: -f2|cut -c 2-3)


    SUPFREEZE="${BCYAN}"
    FREEZE="${BBLUE}"
    COLD="${BLUE}"
    CHILI="${BGREEN}"
    MILD="${GREEN}"
    NORMAL="${YELLOW}"
    WARM="${BYELLOW}"
    HOT="${BRED}"
    VHOT="${RED}"
    DANGER="${ALERT}"

    # Colour progression is important ... 
    # bold gray -> bold green -> bold yellow -> bold red -> 
    # black on red -> bold white on red 
    # 
    # Then we have to choose the values at which the colours switch, with 
    # anything past yellow being pretty important. 

    if [ ${TEMPCOLOR} -lt 0 ]; then 
	TC=$SUPFREEZE
    elif [ ${TEMPCOLOR} -ge 0 ] && [ ${TEMPCOLOR} -lt 33 ]; then 
        TC=${FREEZE}
    elif [ ${TEMPCOLOR} -ge 33 ] && [ ${TEMPCOLOR} -lt 50 ]; then 
	TC=${COLD}
    elif [ ${TEMPCOLOR} -ge 50 ] && [ ${TEMPCOLOR} -lt 60 ]; then 
	TC=${CHILI}
    elif [ ${TEMPCOLOR} -ge 60 ] && [ ${TEMPCOLOR} -lt 67 ]; then                     TC=${MILD}
    elif [ ${TEMPCOLOR} -ge 67 ] && [ ${TEMPCOLOR} -lt 76 ]; then 
	TC=${NORMAL}
    elif [ ${TEMPCOLOR} -ge 76 ] && [ ${TEMPCOLOR} -lt 85 ]; then
	TC=${WARM}
    elif [ ${TEMPCOLOR} -ge 85 ] && [ ${TEMPCOLOR} -lt 92 ]; then
        TC=${HOT}
    elif [ ${TEMPCOLOR} -ge 92 ] && [ ${TEMPCOLOR} -lt 100 ]; then
	TC=${VHOT}
    else TC=${ALERT}
    fi
 
    echo -ne "${TC}${TEMP}${DEGF} ${TEMPC}${DEGC} ${DC}"
}


function weatherskyinfo () {
    ZIP=$(location_zip)
    SKY=$(weather ${ZIP}|grep Sky|cut -d: -f2)

    SUPFREEZE="${BCYAN}"
    FREEZE="${BBLUE}"
    COLD="${BLUE}"
    CHILI="${BGREEN}"
    MILD="${GREEN}"
    NORMAL="${YELLOW}"
    WARM="${BYELLOW}"
    HOT="${BRED}"
    VHOT="${RED}"
    DANGER="${ALERT}"

    # Colour progression is important ... 
    # bold gray -> bold green -> bold yellow -> bold red -> 
    # black on red -> bold white on red 
    # 
    # Then we have to choose the values at which the colours switch, with 
    # anything past yellow being pretty important. 

    if [ "${SKY}" == "clear" ]; then 
	TC=${SUPFREEZE}
    elif [ "${SKY}" == "cloudy" ]; then 
        TC=${FREEZE}
    elif [ "${SKY}" == "mostly cloudy" ]; then 
	TC=${COLD}
#    elif [ "${SKY}" == "" ]; then 
#	TC=${CHILI}
#    elif [ ${TEMPCOLOR} -ge 60 ] && [ ${TEMPCOLOR} -lt 67 ]; then
#	TC=${MILD}
#    elif [ ${TEMPCOLOR} -ge 67 ] && [ ${TEMPCOLOR} -lt 76 ]; then 
#	TC=${NORMAL}
#    elif [ ${TEMPCOLOR} -ge 76 ] && [ ${TEMPCOLOR} -lt 85 ]; then
#	TC=${WARM}
#    elif [ ${TEMPCOLOR} -ge 85 ] && [ ${TEMPCOLOR} -lt 92 ]; then
#        TC=${HOT}
#    elif [ ${TEMPCOLOR} -ge 92 ] && [ ${TEMPCOLOR} -lt 100 ]; then
#	TC=${VHOT}
    else TC=${ALERT}
    fi
 
    echo -ne "${TC} ${SKY} ${DC}"
}

function weatherhumidityinfo () {
    local ZIP=$(location_zip)
    HUMIDITY=$(weather ${ZIP}|grep Rel| awk '{ printf "%s", $3 }' | cut -c-2)

    SUPFREEZE="${BCYAN}"
    FREEZE="${BBLUE}"
    COLD="${BLUE}"
    CHILI="${BGREEN}"
    MILD="${GREEN}"
    NORMAL="${YELLOW}"
    WARM="${BYELLOW}"
    HOT="${BRED}"
    VHOT="${RED}"
    DANGER="${ALERT}"

    # Colour progression is important ... 
    # bold gray -> bold green -> bold yellow -> bold red -> 
    # black on red -> bold white on red 
    # 
    # Then we have to choose the values at which the colours switch, with 
    # anything past yellow being pretty important. 

#    if [ ${HUMIDITY} -lt 0 ]; then 
#	TC=$SUPFREEZE
#    elif [ ${HUMIDITY} -ge 0 ] && [ ${HUMIDITY} -lt 33 ]; then 
#        TC=${FREEZE}
#    elif [ ${HUMIDITY} -ge 33 ] && [ ${HUMIDITY} -lt 50 ]; then 
#	TC=${COLD}
#    elif [ ${HUMIDITY} -ge 50 ] && [ ${HUMIDITY} -lt 60 ]; then 
#	TC=${CHILI}
#    elif [ ${HUMIDITY} -ge 60 ] && [ ${HUMIDITY} -lt 67 ]; then
#    TC=${MILD}
#    elif [ ${HUMIDITY} -ge 67 ] && [ ${HUMIDITY} -lt 76 ]; then 
#	TC=${NORMAL}
#    elif [ ${HUMIDITY} -ge 76 ] && [ ${HUMIDITY} -lt 85 ]; then
#	TC=${WARM}
#    elif [ ${HUMIDITY} -ge 85 ] && [ ${HUMIDITY} -lt 92 ]; then
#        TC=${HOT}
#    elif [ ${HUMIDITY} -ge 92 ] && [ ${HUMIDITY} -lt 100 ]; then
#	TC=${VHOT}
#    else TC=${ALERT}
#    fi
 
    echo -ne "${HUMIDITY}%"
}

function weatherwindinfo () {
# Weather wind formats
#
# 1. "from the NW (310 degrees) at 6 MPH (5 KT)"
# 2. "Variable at 6 MPH (5 KT)
# 3. "Calm"
#
#
#
    local ZIP=$(location_zip)
    local WIND=$(weather ${ZIP}|grep Wind|cut -d: -f2)
    local WINDFORMAT=$(echo $WIND | awk '{ printf "%s", $1 }')
    if [[ "${WINDFORMAT}" == "from" ]]; then
	local WINDSPEED=$(echo $WIND | awk '{ printf "%s", $7 }')
	WINDSPEED="${WINDSPEED} MPH"
	local WINDTYPE=$(echo $WIND | awk '{ printf "%s %s", $1 $2 }')
	local WINDDIR=$(echo $WIND | awk '{ printf "%s", $3 }')
	local WINDDEG=$(echo $WIND | awk '{ printf "%s %s", $4 $5}')
	local WINDSPEEDKT=$(echo $WIND | awk '{ printf "%s %s", $9 $10 }')
    elif [[ "${WINDFORMAT}" == "Variable" ]]; then
	local WINDSPEED=$(echo $WIND | awk '{ printf "%s", $3 }')
	WINDSPEED="${WINDSPEED} MPH"
	local WINDTYPE=$(echo $WIND | awk '{ printf "%s", $1 }')
	local WINDSPEEDKT=$(echo $WIND | awk '{ printf "%s %s", $5 $6}')
    else
	local WINDSPEED=$(echo $WIND | awk '{ printf "%s", $3 }')
	local WINDTYPE=$(echo $WIND | awk '{ printf "%s", $1 }')
	local WINDSPEEDKT=$(echo $WIND | awk '{ printf "%s", $5 }')
    fi
    SUPFREEZE="${BCYAN}"
    FREEZE="${BBLUE}"
    COLD="${BLUE}"
    CHILI="${BGREEN}"
    MILD="${GREEN}"
    NORMAL="${YELLOW}"
    WARM="${BYELLOW}"
    HOT="${BRED}"
    VHOT="${RED}"
    DANGER="${ALERT}"

    # Colour progression is important ... 
    # bold gray -> bold green -> bold yellow -> bold red -> 
    # black on red -> bold white on red 
    # 
    # Then we have to choose the values at which the colours switch, with 
    # anything past yellow being pretty important. 

#    if [ ${WINDSPEED} -lt 0 ]; then 
#	TC=$SUPFREEZE
#   elif [ ${WINDSPEED} -ge 0 ] && [ ${WINDSPEED} -lt 33 ]; then 
#        TC=${FREEZE}
#    elif [ ${WINDSPEED} -ge 33 ] && [ ${WINDSPEED} -lt 50 ]; then 
#	TC=${COLD}
#    elif [ ${WINDSPEED} -ge 50 ] && [ ${WINDSPEED} -lt 60 ]; then 
#	TC=${CHILI}
#    elif [ ${WINDSPEED} -ge 60 ] && [ ${WINDSPEED} -lt 67 ]; then
#          TC=${MILD}
#    elif [ ${WINDSPEED} -ge 67 ] && [ ${WINDSPEED} -lt 76 ]; then 
#	TC=${NORMAL}
#    elif [ ${WINDSPEED} -ge 76 ] && [ ${WINDSPEED} -lt 85 ]; then
#	TC=${WARM}
#    elif [ ${WINDSPEED} -ge 85 ] && [ ${WINDSPEED} -lt 92 ]; then
#        TC=${HOT}
#    elif [ ${WINDSPEED} -ge 92 ] && [ ${WINDSPEED} -lt 100 ]; then
#	TC=${VHOT}
#    else TC=${ALERT}
#    fi
 
    echo -ne "${WINDTYPE} ${WINDDIR} ${WINDDEG} at ${WINDSPEED} ${WINDSPEEDKT}"
}

function disktempinfo () {
    local SDATEMP=$(/usr/sbin/hddtemp -uf /dev/sda|cut -c 36-)
    local SDBTEMP=$(/usr/sbin/hddtemp -uf /dev/sdb|cut -c 36-)

    echo -ne "$SDATEMP $SDBTEMP"
}

function cputempinfo () {
    local CPUTEMPC=$(sensors | grep "Core 0" | cut -d: -f2 | cut -d\( -f1)
    local CPUTEMP=$(sensors -f | grep "Core 0" | cut -d: -f2 | cut -d\( -f1)
    echo -ne "${CPUTEMP} ${CPUTEMPC}"
}
