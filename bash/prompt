#!/bin/sh

#########
#
# Build the Command Prompt
#
#########

export PROMPT_COMMAND=__prompt_command # Func to gen PS1 after CMDs



__prompt_command() {
    local EXITSTATUS="$?"    # This Needs to be first
    PS1=""


  if [ -z "$@" ]; then
	MODE="main"
    else
	MODE="$1"
    fi

    # set variable identifying the chroot you work in 
    # (used in the prompt below)
    if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
	debian_chroot=$(cat /etc/debian_chroot)
    fi

    # set a fancy prompt (non-color, unless we know we "want" color)
    case "$TERM" in
	xterm-color) color_prompt=yes;;
    esac

    # uncomment for a colored prompt, if the terminal 
    # has the capability; turned
    # off by default to not distract the user: 
    # the focus in a terminal window
    # should be on the output of commands, not on the prompt
    force_color_prompt=yes

    if [ -n "$force_color_prompt" ]; then
	if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	    # We have color support; assume it's compliant with Ecma-48
	    # (ISO/IEC-6429). (Lack of such support 
	    # is extremely rare, and such
	    # a case would tend to support setf rather than setaf.)
	    color_prompt=yes
	else
	    color_prompt=
	fi
    fi
    
    
    
    if [ "$color_prompt" = yes ]; then
	# Define Normal Colors
	BLACK='\[\e[0;30m\]'
	RED='\[\e[0;31m\]'
	GREEN='\[\e[0;32m\]'
	YELLOW='\[\e[0;33m\]'
	BLUE='\[\e[0;34m\]'
	MAGENTA='\[\e[0;35m\]'
	CYAN='\[\e[0;36m\]'
	WHITE='\[\e[0;37m\]'

	# Define Bold Colors
	BBLACK='\[\e[1;30m\]'
	BRED='\[\e[1;31m\]'
	BGREEN='\[\e[1;32m\]'
	BYELLOW="\[\e[1;33m\]"
	BBLUE='\[\e[1;34m\]'
	BMAGENTA='\[\e[1;35m\]'
	BCYAN='\[\e[1;36m\]'
	BWHITE='\[\e[1;37m\]'

	# Background Colors
	On_Black='\e[40m' # Black 
	On_Red='\e[41m' # Red 
	On_Green='\e[42m' # Green 
	On_Yellow='\e[43m' # Yellow 
	On_Blue='\e[44m' # Blue 
	On_Purple='\e[45m' # Purple 
	On_Cyan='\e[46m' # Cyan 
	On_White='\e[47m' # White

	# Other
	NO_COLOR='\[\e[0m\]'
	ALERT=${BWHITE}${On_Red} # Bold White on red background


	# Set Default Colors
	# User Color
	UC="${GREEN}"
	#hostname color 
	HC="${YELLOW}" 
	#regular color 
	RC="${WHITE}" 
	#default color 
	DC="${NO_COLOR}"

	LC=$(load_color)
	LOAD=$(load_symbol)


	JC=$(job_color)
	
	# Root different color
	if [ $UID -eq 0 ]; then 
	    #root user color 
	    UC="${RED}"
	elif [[ ${USER} != $(logname) ]]; then 
	    UC=${BYELLOW} # User is not login user.
	else
	    UC=${GREEN}
	fi

	BATTERY=$(bat_color)

	FC=$(disk_color)
    fi


     SMILE=$(last_command)
     HOSTTEXT=$(host_color)


    # Repositories
    # git
    BRANCH=$(__git_prompt)
    # subversion
    # currently disabled as I have nothing to check it with
    # SVNBRANCH=$(__svn_branch)
    
    SCREEN=$(__screen)


    if [ "$color_prompt" = yes ]; then
	case "$MODE" in 
	    none) export PS1="" ;; 
	    off) 
		PS1="${PS1}${JC}\\$ ${DC}" ;;
	    date) PS1="${DC}[ "
		PS1="${PS1}${debian_chroot:+($debian_chroot)}"
		PS1="${PS1}${LC}\t "
		PS1="${PS1}${DC} ]"
		PS1="${PS1}${JC}\\$ ${DC}" ;;
	    basic) PS1="${DC}[ "
		PS1="${PS1}${debian_chroot:+($debian_chroot)}"
		PS1="${PS1}${UC}\u${DC}"
		PS1="${PS1}${HOSTTEXT}:"
		PS1="${PS1}${FC}\w "
		PS1="${PS1}${DC} ]"
		PS1="${PS1}${JC}\\$ ${DC}" ;;
	    main) PS1="${DC}[ "
		PS1="${PS1}${debian_chroot:+($debian_chroot)}"
		PS1="${PS1}${LC} ${LOAD} "
		PS1="${PS1}${UC}\u${DC}"
		PS1="${PS1}${HOSTTEXT}:"
		PS1="${PS1}${FC}\w "
		PS1="${PS1}${SCREEN}"
		PS1="${PS1}${BRANCH}"
		PS1="${PS1}${BATTERY}"
		PS1="${PS1}${SMILE} "
		PS1="${PS1}${DC} ]"
		PS1="${PS1}${JC}\\$ ${DC}" ;;
	    full) PS1="${DC}[ "
		PS1="${PS1}${debian_chroot:+($debian_chroot)}"
		PS1="${PS1}${LC}\t ${LOAD} "
		PS1="${PS1}${UC}\u${DC}"
		PS1="${PS1}${HOSTTEXT}:"
		PS1="${PS1}${FC}\w "
		PS1="${PS1}${SCREEN}"
		PS1="${PS1}${BRANCH}"
		PS1="${PS1}${BATTERY}"
		PS1="${PS1}${SMILE} \! "
		PS1="${PS1}${DC}]"
		PS1="${PS1}${JC}\\$ ${DC}" ;;
	esac
    else
	case "$MODE" in 
	    none) export PS1="" ;; 
	    off) export PS1="$ " ;; 
	    date) export PS1="[\t]\$ " ;; 
	    basic) export PS1="\u:\w$ " ;; 
	    main)  PS1='[ ${debian_chroot:+($debian_chroot)}\u@\h:\w\ ]\$ ' ;;
	    full) export PS1="[\t]\u:\w$ " ;; 
	esac
    fi
    unset color_prompt force_color_prompt


    # Options for xterm
    
    # If this is an xterm set the title to user@host:dir
    case "$TERM" in
	xterm*|rxvt*)
	    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
	    ;;
	*)
	    ;;
    esac
    
}

# Returns a color indicating system load. 
function load_color() { 

    local LOAD=`cat /proc/loadavg | awk '{print $1}'`
    local CORES=`grep 'model name' /proc/cpuinfo | wc -l`
    local LOADPER=`echo ${LOAD} ${CORES} | awk '{print $1 / $2 * 100}' | cut -d. -f1`
    if [ ${LOADPER} -gt 90 ]; then 
	echo -en ${ALERT} 
    elif [ ${LOADPER} -gt 75 ]; then 
	echo -en ${RED} 
    elif [ ${LOADPER} -gt 50 ]; then 
	echo -en ${BRED} 
    else 
	echo -en ${BLUE} 
    fi 
}

function load_symbol() {

    local LOAD=`cat /proc/loadavg | awk '{print $1}'`
    local CORES=`grep 'model name' /proc/cpuinfo | wc -l`
    local SYSLOAD=`echo ${LOAD} ${CORES} | awk '{print $1 / $2 * 100}' | cut -d. -f1`
    if [ ${SYSLOAD} -gt 90 ]; then
	SYMBOL=$'\u2622'
    elif [ ${SYSLOAD} -gt 75 ]; then
	SYMBOL=$'\u26a0'
    elif [ ${SYSLOAD} -gt 50 ]; then
	SYMBOL=$'\u2699'
    else
	SYMBOL=$'\u2603'
    fi
    echo -ne ${SYMBOL}
} 

# Returns a color according to running/suspended jobs. 
function job_color() { 
    if [ $(jobs -s | wc -l) -gt "0" ]; then 
	echo -en ${BRED} 
    elif [ $(jobs -r | wc -l) -gt "0" ] ; then 
	echo -en ${BCYAN} 
    else
	echo -en ${UC}
    fi 
}


#Returns a color according to free disk space in $PWD. 
function disk_color() { 
    if [ ! -w "${PWD}" ] ; then 
	echo -en ${RED} # No 'write' privilege in the current directory. 
    elif [ -s "${PWD}" ] ; then 
	local used=$(command df -P "$PWD" | awk 'END {print $5} {sub(/%/,"")}') 
	if [ ${used} -gt 95 ]; then 
	    echo -en ${ALERT} # Disk almost full (>95%). 
	elif [ ${used} -gt 90 ]; then 
	    echo -en ${BRED} # Free disk space almost gone. 
	else echo -en ${GREEN} # Free disk space is ok. 
	fi 
    else 
	echo -en ${CYAN} # Current directory is size '0' (like /proc, /sys etc). 
    fi 
}


# Display the branch name of git repository 
# Green -> clean 
# purple -> untracked files 
# red -> files to commit 
function __git_prompt() {   
    local git_status="`git status -unormal 2>&1`"   
    if ! [[ "$git_status" =~ Not\ a\ git\ repo ]]; then 
	if [[ "$git_status" =~ nothing\ to\ commit ]]; then 
	    local Color_On=$GREEN
	elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then 
	    local Color_On=$MAGENTA
	else 
	    local Color_On=$RED
	fi   
	if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then 
	    branch=${BASH_REMATCH[1]} 
	else # Detached HEAD. (branch=HEAD is a faster alternative.) 
	    branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null || echo HEAD`)" 
	fi
	echo -ne "$Color_On[$branch]$Color_Off " 
fi 
}


last_command () {

    #   # Last Command Success
    if [ ${EXITSTATUS} = 0 ]; then
	#smiley
	FACE=$'\u263a'
	if [ "$color_prompt" = yes ]; then
            SMILE="${GREEN}${FACE}"
	else
         SMILE=":)"
	fi
    else 
	#frowney
	FACE=$'\u2639'
	if [ "$color_prompt" = yes ]; then
         SMILE="${BRED}${FACE} ${EXITSTATUS}" 
	else
        SMILE=":("
	fi
    fi
    echo -en $SMILE
}



host_color () {

    # Only Display Host info if remote login
    if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
	if [ "$color_prompt" = yes ]; then
            HOSTTEXT="@${HC}\h${DC}"
	else
            HOSTTEXT="@\h"
	fi
    fi
    echo -en $HOSTTEXT
}

bat_color () {
    # Batter Power for Laptop
    BAT_PERCENTAGE=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0| grep -E percentage| awk {'print $2'}|cut -d% -f1)


    if [ "$BAT_PERCENTAGE" -lt 100 ]; then
	BAT_STATE=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0| grep -E state | awk {'print $2'})
	BAT_FULL=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep -E to\ full| awk {'print $4 $5'})
	BAT_EMPTY=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep -E to\ empty| awk {'print $4 $5'})
	if [ ${BAT_PERCENTAGE} -lt 5 ]; then 
	    BC=${ALERT} # Battery almost dead (<5%). 
	elif [ ${BAT_PERCENTAGE} -lt 20 ]; then 
	    BC=${YELLOW} # Battery almost gone
	else 
	    BC=${GREEN} # Battery is ok. 
	fi
	echo -ne "${BC}${BAT_PERCENTAGE}% ${BAT_STATE} ${BAT_FULL}${BAT_EMPTY} "
    else
	echo -ne ""
    fi
}


function __svn_prompt () {
echo -en "SVN"
#REV=$(svn info 2>/dev/null | grep Revision | sed -e 's/Revision: //')
    #[ "$REV" ] || return
    #[ "$(svn st)" ] && DIRTY=' *'
    
    #subversion2
    #parse_svn_branch() { 
    #parse_svn_url | sed -e ’s#^’“$(parse_svn_repository_root)”‘##g’ | awk ‘{print “ (svn::”$1")“ }’ 
    #}
    #parse_svn_url() { 
    #svn info 2>/dev/null | sed -ne ’s#^URL: ##p' 
    #}
    #parse_svn_repository_root() { 
    #svn info 2>/dev/null | sed -ne ’s#^Repository Root: ##p' 
    #
}

__screen () {
# SRCEEN
    if [[ $TERM =~ screen ]] ; then
	SCREEN="${BCYAN}(SCREEN)${DC} "
    else
	SCREEN=""
    fi
    echo -ne ${SCREEN}
}
