Use `M-x list-colors-display' to list some of the colors Emacs can
display.  You can use these colors while CustomizingFaces, for
example.

You can, however, use many more colors!  You can use all of the colors in your
rgb.txt file if you are using X Window System, for example.  The file should
be somewhere around /usr/X11/lib/X11/rgb.txt.  You need to convert
these colors into HexNotation, however.  In fact, you can use any RGB
value, if you use HexNotation.  Therefore, you can use "black" or
"#000000" -- the two should be equivalent.

See HexNotation and SetColor.

[new:DrewAdams:2005-01-04 16:05 UTC]
Better than simply listing the colors that happen to be named is viewing all available colors, in a color palette -- See '''ColorPalette'''.  With the color palette you can examine color properties or choose colors. You can input colors using color names, RGB components (red, green, blue), or HSV components (hue, saturation, value).

The easiest way to access colors is to use the '''Text Properties''' popup menu available via `C-mouse-2' -- provided you use library Lisp:facemenu+.el, that is. See '''FaceMenuPlus'''. If you want the colors of a particular [[Face]] or [[Frame]] that you see in Emacs, just point the mouse at it and use `C-mouse-2'. The enhanced '''Text Properties''' menu also lets you:

* Modify face colors in various ways, including incrementally using the arrow keys or mouse wheel.
* Copy a foreground or background color from anywhere in Emacs -- an '''''eye dropper'''''.
 
See also '''DoReMi''' and libraries Lisp:hexrgb.el and Lisp:doremi-frm.el. 

-- DrewAdams

== Use with Anything ==
'''[[Anything]]''' is a candidate selection framework.

Start with M-x anything-colors, narrow the list by typing some patterns(multiple patterns are space-delimited string),
select with up/down/pgup/pgdown/C-p/C-n/C-v/M-v, choose with enter,
With TAB actions can be selected if the selected color has more than one possible action.

== Dynamic Foreground Color depends on Background Color ==

Sometimes, in the buffer "*Colors*" generated by `M-x list-colors-display', you may find hard to read the name of the color due to the
brightness difference of the foreground color and the background color.  Here is the patch that changes the foreground color of the first column,
based on [http://www.w3.org/WAI/ER/WD-AERT/#color-contrast Techniques For Accessibility Evaluation And Repair Tools].

{{{
(defun color-brightness (color)
  "Return the brightness (in YIQ color space) of COLOR, range [0, 256].

COLOR should be a list of three integers, returned from `color-values'."
  ;; http://www.w3.org/WAI/ER/WD-AERT/#color-contrast
  (let* ((maxval (car (color-values "#ffffff")))
         (cvs (mapcar (lambda (x) (/ (* x 255) (float maxval))) color))
         (red (car cvs))
         (green (cadr cvs))
         (blue (caddr cvs)))
    (round (/ (+ (* red 299) (* green 587) (* blue 114)) 1000.0))))
  (and (stringp color)
       (setq color (color-values color)))

;; I modified `list-colors-print' so that it will use black/white foreground
;; depending on the brightness of the background color.  The origin was from
;; Emacs 24.4.1, facemenu.el
(defun list-colors-print (list &optional callback)
  (let ((callback-fn
         (if callback
             `(lambda (button)
                (funcall ,callback (button-get button 'color-name))))))
    (dolist (color list)
      (if (consp color)
          (if (cdr color)
              (setq color (sort color (lambda (a b)
                                        (string< (downcase a)
                                                 (downcase b))))))
        (setq color (list color)))
      (let* ((opoint (point))
             (color-values (color-values (car color)))
             (light-p (> (color-brightness color-values) 125))
             ;; (light-p (>= (apply 'max color-values)
             ;;           (* (car (color-values "white")) .5)))
             )


        (insert (car color))
        (indent-to 22)
        (put-text-property opoint (point) 'face `(:background ,(car color)
                                                  :foreground ,(if light-p "black" "white")))
        (put-text-property
         (prog1 (point)
           (insert " ")
           ;; Insert all color names.
           (insert (mapconcat 'identity color ",")))
         (point)
         'face (list :foreground (car color)))
        (insert (propertize " " 'display '(space :align-to (- right 9))))
        (insert " ")
        (insert (propertize
                 (apply 'format "#%02x%02x%02x"
                        (mapcar (lambda (c) (lsh c -8))
                                color-values))
                 'mouse-face 'highlight
                 'help-echo
                 (let ((hsv (apply 'color-rgb-to-hsv
                                   (color-name-to-rgb (car color)))))
                   (format "H:%.2f S:%.2f V:%.2f"
                           (nth 0 hsv) (nth 1 hsv) (nth 2 hsv)))))
        (when callback
          (make-text-button
           opoint (point)
           'follow-link t
           'mouse-face (list :background (car color)
                             :foreground (if light-p "black" "white"))
           'color-name (car color)
           'action callback-fn)))
      (insert "\n"))
    (goto-char (point-min))))
}}}


----
CategoryFaces CategoryFrames
