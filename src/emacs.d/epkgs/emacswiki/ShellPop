shell-pop.el helps you to use shell easily on Emacs. Only one key action to work.

You can get the latest shell-pop with the manual from my github page below. This page is no longer updated.
https://github.com/kyagi/shell-pop-el

== Download ==
----
You can download shell-pop.el from the following link.

Lisp:shell-pop.el


== How to use ==
----
1. Place this file in a directory in your load-path.

2. Load the shell-pop elisp using "require" (See below configuration in detail)

3. M-x shell-pop. The shell buffer window appears at the bottom of the selected window.

4. You can enjoy shell.

5. M-x shell-pop. The shell buffer window destroyed if you call shell-pop again. The buffer is not buried. 

== Configuration for your .emacs ==
----
You can choose your favorite internal mode from `shell', `terminal', `ansi-term', and 'eshell'.
Also you can use any shell such as `/bin/bash', `/bin/tcsh', `/bin/zsh' as you like.

You are recommend to assign one hot key to shell-pop for its toggled action. :-)

<pre>
(require 'shell-pop)
(shell-pop-set-internal-mode "ansi-term")
(shell-pop-set-internal-mode-shell "/bin/zsh")
(shell-pop-set-window-height 60) ;the number for the percentage of the selected window. if 100, shell-pop use the whole of selected window, not spliting.
(shell-pop-set-window-position "bottom") ;shell-pop-up position. You can choose "top" or "bottom". 
(global-set-key [f8] 'shell-pop)
</pre>

== Screenshot ==
----
[[image:MyScreenShotPage]]

== Update Info ==
----
<pre>
revision 1.10	locked by: kyagi;
date: 2010/02/21 14:19:26;  author: kyagi;  state: Exp;  lines: +8 -4
bug fix

revision 1.9	locked by: kyagi;
date: 2010/02/21 14:03:43;  author: kyagi;  state: Exp;  lines: +9 -5
bug fix

revision 1.8	locked by: kyagi;
date: 2010/02/21 12:55:28;  author: kyagi;  state: Exp;  lines: +14 -8
bug fix

revision 1.7	locked by: kyagi;
date: 2010/02/21 11:29:56;  author: kyagi;  state: Exp;  lines: +9 -15
add a function shell-pop-set-window-position
</pre>

== Conversation ==
----
[new]
I have made some modifications to make it easier to have shell-pop run a different function (because I wanted to run ansi-term instead of shell...)

What's the best way to get those changes back to you to look at? 

: -- JohnAnderson

Thank you for your requirement and it was already done. Now you can use ansi-term and your favorite shell with shell-pop!

: -- KazuoYAGI

