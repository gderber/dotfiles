The term "'''[::completion]'''" can mean different things in Emacs:

'''1. Input completion --''' Completion of your input in the [[minibuffer]].  (See also [[Manual:Minibuffer Completion]] (lisp) in the manual.)

* Input completion is built in. Use it with `M-x', `C-x b', `C-x C-f', and with many other commands that prompt for input. There are various kinds of input completion, including these:

** [[prefix completion]] -- Completes your input as a prefix. This is the default method of completion.

** '''[::partial completion]''' -- Completes each part of a name separately. See `partial-completion-mode' (standard library ##complete.el##). For example, command-name input `p-b' can complete to `print-buffer'.

** substring completion -- Completes your input as a substring. Available in some libraries such as [[Ido]] and [[Icicles]].

** regexp completion -- Completes your input as a [[regexp]]. Available in some libraries such as [[Icicles]].


'''2. Text completion --''' Completion of words or abbreviations in a buffer other than the minibuffer. Example commands:

* `dabbrev' -- standard library `<code>dabbrev.el</code>': Completes to words in current buffer and possibly other buffers. See DynamicAbbreviations.


* `hippie-expand' -- standard library `<code>hippie-exp.el</code>': Try to expand text before point, using multiple methods. Repeated application of `hippie-expand' inserts successively possible expansions.

* `complete' -- standard library `<code>completion.el</code>': Completes to words you have typed previously, or uses `dabbrev' completions if no other completions are found. Saves completions between sessions (persistent).

* `complete-tag' -- standard library `<code>etags.el</code>': Completes to a defined tag (e.g. a function or variable name). See EmacsTags

* `pcomplete' -- standard library `<code>pcomplete.el</code>': Completes function arguments. See ProgrammableCompletion.

* [[CompanyMode|Company]] -- a framework for completion while programming

* [[AutoComplete|Auto Completion]] -- a framework for completion while programming

Also note that the question [http://stackoverflow.com/questions/4704748/emacs-completion-autocomplete-or-company Emacs completion: autocomplete or company?] doesn't have an obvious answer.
Some people claim that Auto Complete uses the Popup library which has a bug you might run into when aborting a completion. [https://github.com/auto-complete/popup-el/issues]

'''3. Help about completions --''' The possible completions in the sense of '''1''' or '''2''' are displayed; this help is also sometimes referred to as "completion".  

* `icomplete' -- standard library `<code>icomplete.el</code>': Shows the possible completions for the current text in the minibuffer.

See also CategoryCompletion.

----
CategoryCompletion
CategoryGlossary
