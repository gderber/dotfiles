* Compact buffers after GC. (Perhaps using [http://permalink.gmane.org/gmane.emacs.diffs/115317])
* Undo list truncation
* Shrink regexp cache after GC
* GC messages
* Automatic deletion of undo list elements updating freed markers
* QUIT at each SCM_TICK
* Installation instructions
* Debugging instructions
* Request use of GNU bug tracker
* Eliminate forwarded variables (either use normal variables or implement symbol macros)
* Find beta testers for non-GNU platforms
* Update .gdbinit
* Use libguile hash tables
* remove unexec support code
* Fix coccinelle parsing of loop macros with single-statement body
* Add syntax for Scheme false and Scheme null
* Maybe add Elisp reader support for false and null?
* Make hygienic macros work in Elisp, no matter from what language they're defined
* Unify Elisp and Scheme strings
* Fix -nw (crashes due to too-early bidi initialization)
* Reduce excessive indirection for variable storage
* Publish benchmarks
* Fixed nested backquotes in Guile-Elisp (though not yet used in Emacs)

== User-visible issues ==

These are reported from commit 38530ba of bipt's Guile repo's "wip" branch (with some trivial patches to make it compile), and commit 86d723c of bipt's Emacs repo's "wip" branch. This is shortly after bipt replaced the actual Elisp engine with libguile, and it's overall not ready for actual usage. Nevertheless, it compiles and starts up if you struggle a little, running most Elisp libraries, so here's a list of the most obvious problems from an alpha-tester(?) perspective:
# Running 'emacs -nw' aborts instantly. Frameworks other than GTK might not compile at all. Use GTK Emacs.
# Start-up takes very long because .el files aren't compiled. Compiling .el files in place doesn't seem to be supported very well yet (although any Elisp that's loaded is compiled in that instant, and e.g. `lambda` and `defun` generate Guile procedures).
# There is a big performance regression, apparently due to how Guile currently implements some aspects of Elisp (notably dynamic scoping).
# A lot of memory is consumed. After booting 'emacs -Q' it uses 200MB of residual memory, which grows to 300-400 after loading some extensions (language modes, dired, rcirc, Help, Info, etc.) In contrast, my normal Emacs with all my fancy extensions loaded, and an uptime of 20 days, currently uses 130MB of residual memory.
# On OS X, if I open a file buffer (existing or nonexisting file), it segfaults. Best just test on GNU/Linux for now.

----
CategoryGuileEmacs
