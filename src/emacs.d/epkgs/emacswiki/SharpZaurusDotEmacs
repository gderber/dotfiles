;;; This is Emacs initialization file
;;; It's designed for Sharp Zaurus SL-C860 PDA

;(server-start)                         ; Might be useful for PDA

;; Some usefull packages
(require 'emacs-wiki)
(require 'emacs-wiki-table)
(require 'table)
(require 'planner)
(autoload 'remember "remember" nil t)
(autoload 'remember-region "remember" nil t)

(require 'remember-planner)
(setq remember-handler-functions '(remember-planner-append))
(setq remember-annotation-functions planner-annotation-functions)
     
(define-key global-map "\e\e[23~" 'remember)         ; M-C-Menu
(define-key global-map "\e\e[21~" 'plan) ; M-C-Address

(setq default-major-mode 'text-mode)

(setq Info-default-directory-list       ; Info files located here
      (append '("/usr/local/share/emacs/info")
              Info-default-directory-list))

;;;; Redefining usefull key bindings...

; BS on my Zaurus generates C-D and Fn-BS (marked as Del) generates DEL, 
; but I prefer use BS as DEL and Fn-BS as C-D
(global-set-key [delete] 'delete-char)
; Fn-Up/Down/Left/Right are used as PgUp/PgDn/Home/End
(global-set-key [prior] 'scroll-down)
(global-set-key [next] 'scroll-up)
(global-set-key "\e[H" 'beginning-of-line)
(global-set-key "\e[F" 'end-of-line)
; ESC-Left/Right and ESC-Home/End
(global-set-key "\e\e[H" 'beginning-of-buffer)
(global-set-key "\e\e[F" 'end-of-buffer)
(global-set-key "\e\e[D" 'beginning-of-buffer)
(global-set-key "\e\e[C" 'end-of-buffer)

(global-set-key "\C-z" 'undo)           ; I want use C-z as Undo key

; C-x % as query-replace and ESC-% as query-replace-regexp
(global-set-key [?\C-x ?%] 'query-replace)
(global-set-key "\e%" 'query-replace-regexp)

; search commands
(global-set-key [?\M-o] 'occur)
(global-set-key [?\M-s] 'search-forward-regexp)
(global-set-key [?\M-r] 'search-backward-regexp)

;;; <f11> = Ctrl+Menu -- I use it to call Emacs menu instead of <f10>
(global-set-key [f11] 'tmm-menubar)

;;; --- <f10> = Ctrl+Address
;;; we already have menu key, so we can use <f10> 
;;; for something else, e.g. instead of Insert key
(global-set-key [f10] 'overwrite-mode)

;;; I often use these characters in texts
;;; not very nice but it works!
(defun insert-laquote ()
  "Insert character «"
  (interactive)
  (insert 2219))
(defun insert-raquote ()
  "Insert character »"
  (interactive)
  (insert 2235))
(global-set-key [?\C-x ?[] 'insert-laquote)
(global-set-key [?\C-x ?]] 'insert-raquote)

;; always bound to open wiki documents
(global-set-key [?\C-c ?\C-f] 'emacs-wiki-find-file)
                 
;; always end a file with a newline
(setq require-final-newline t)

;; stop at the end of the file, not just add lines
(setq next-line-add-newlines nil)

(setq fill-column 66)

;;;; Zaurus Qkonsole works in Unikode
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

(global-font-lock-mode 1)               ; use font lock always
(menu-bar-mode nil)                     ; save one line of screen
(column-number-mode t)                  ; I like to know exactly where is the point
;(xterm-mouse-mode t)                    ; turn mouse on
;(mouse-sel-mode t)

(delete-selection-mode t)               ; <del> deletes selection

;;; Rebind `C-x C-b' for `buffer-menu'
(global-set-key "\C-x\C-b" 'buffer-menu)
;;; Rebind `M-g' for `goto-line'
(global-set-key (kbd "\eg") 'goto-line)

;;; The best language I know ;-)
;; (autoload 'python-mode "python-mode" "Python mode" t)
;; (setq auto-mode-alist
;;      (cons '("\\.py$" . python-mode) auto-mode-alist))
(autoload 'python-mode "python-21" "Python mode" t)
(autoload 'pair-mode "pair-mode" "Pair Mode" t)
(setq auto-mode-alist
     (cons '("\\.py$" . python-mode) auto-mode-alist))
(add-hook 'python-mode-hook
          '(lambda () (pair-mode 1)) t)
(add-hook 'python-mode-hook
          '(lambda () (eldoc-mode 1)) t)

;;; Emacs Customization
(custom-set-variables
  ;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(Info-additional-directory-list (quote ("/mnt/card/devel/info")))
 '(blink-cursor nil)
 '(c-basic-offset 4)
 '(c-syntactic-indentation nil)
 '(calendar-week-start-day 1)
 '(case-fold-search t)
 '(emacs-wiki-create-backlinks t)
 '(emacs-wiki-default-page "dir")
 '(emacs-wiki-default-project "Dir")
 '(emacs-wiki-directories (quote ("/home/zaurus/Wiki" "/home/zaurus/Plans")) nil (emacs-wiki))
 '(emacs-wiki-home-page "dir")
 '(emacs-wiki-home-project "Dir")
 '(emacs-wiki-index-page "index")
 '(emacs-wiki-markup-nonexistent-link nil)
 '(emacs-wiki-mode-hook (quote (emacs-wiki-use-font-lock footnote-mode table-recognize)))
 '(emacs-wiki-recurse-directories nil)
 '(emacs-wiki-show-project-name-p t)
 '(emacs-wiki-table-attributes "class=\"ewiki-table\" border=\"1\" cellpadding=\"5\"")
 '(fill-column 59)
 '(forms-forms-jump t)
 '(forms-forms-scroll t)
 '(indent-tabs-mode nil)
 '(mark-diary-entries-in-calendar t)
 '(mode-line-inverse-video t)
 '(planner-day-page-template "* Tasks


* Notes


")
 '(planner-project "Planner")
 '(planner-renumber-notes-automatically t)
 '(planner-renumber-tasks-automatically t)
 '(planner-reverse-chronological-notes nil)
 '(planner-use-day-pages nil)
 '(planner-use-plan-pages t)
 '(py-imenu-show-method-args-p t)
 '(recentf-mode t nil (recentf))
 '(save-place nil)
 '(scroll-bar-mode (quote right))
 '(scroll-step 1)
 '(sentence-end (purecopy "[.?!][]\"')}]*\\($\\|	\\| \\)[ 	
]*"))
 '(sentence-end-double-space nil)
 '(show-paren-mode t nil (paren))
 '(table-html-delegate-spacing-to-user-agent nil)
 '(table-time-before-reformat 0)
 '(table-time-before-update 0)
 '(text-mode-hook (quote (turn-on-auto-fill text-mode-hook-identify)))
 '(time-stamp-format "%:y-%02m-%02d %02H:%02M")
 '(transient-mark-mode t)
 '(unibyte-display-via-language-environment nil)
 '(user-full-name "Your Name")
 '(user-mail-address "your@mail.here")
 '(wiki-directories (quote ("/home/zaurus/Wiki/" "/home/zaurus/Wiki/Lib/" "/home/zaurus/Wiki/Esperanto/" "/home/zaurus/Wiki/Aquarium/"))))

(custom-set-faces
  ;; custom-set-faces was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(bold ((t (:foreground "yellow" :weight bold))))
 '(bold-italic ((t (:foreground "yellow" :underline t :slant italic :weight bold))))
 '(emacs-wiki-header-1 ((t (:inherit variable-pitch :foreground "yellow" :weight bold :height 1.3))))
 '(emacs-wiki-header-2 ((t (:inherit variable-pitch :foreground "cyan" :weight bold :height 1.2))))
 '(emacs-wiki-header-3 ((t (:inherit variable-pitch :foreground "magenta" :weight bold :height 1.1))))
 '(emacs-wiki-header-4 ((t (:inherit variable-pitch :foreground "blue" :weight bold :height 1.0))))
 '(emacs-wiki-header-5 ((t (:inherit variable-pitch :weight bold :height 0.9))))
 '(emacs-wiki-header-6 ((t (:inherit variable-pitch :weight bold :height 0.8))))
 '(emacs-wiki-verbatim-face ((t (:foreground "magenta"))))
 '(fixed-pitch ((t (:foreground "magenta" :family "courier"))))
 '(font-lock-type-face ((((type tty) (class color)) (:foreground "yellow"))))
 '(italic ((t (:foreground "green" :slant italic))))
 '(mouse ((t (:foreground "red")))))

;; end of .emacs
