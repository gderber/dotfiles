= Securing Customize with EPA =

If you use customize you find that you're storing all sorts of stuff in it, window size and positions but also passwords and other secure stuff.

A nice way of dealing with this problem is to just secure your config with GPG and EPA.

The first thing you have to do is [[http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto-3.html#ss3.1|make a GPG key]]:

{{{
gpg --gen
}}}

In your {{{init.el}}} you can set the variable {{{custom-file}}} to a gpg file which you can then load. Here's what I have:

{{{
(load-file
 (setq custom-file
       (concat
        (file-name-directory
         (or
          (buffer-file-name)
          load-file-name))
        "nic-custom.el.gpg")))
}}}

You need to evaluate that to set the {{{custom-file}}} variable and unless the file exists it might error.

To ensure that EPA uses your GPG key you have to open the GPG'd file and add the following comment:

{{{
;;   -*- epa-file-encrypt-to: ("your.key.id@whatever") -*-
}}}

You might have to save that file and then open it again to make it select the correct key.

Before you restart Emacs you should:

{{{
M-: (custom-save-all)
}}}

which will force your customizations to be saved in the new file.

Now, when you start Emacs it will ask you for your GPG key password and then load the customizations from your custom file.

=== Updating keys ===

If you can no longer save documents with epa it might be because your gpg key has expired. 

You have to update the expiry on your key.

* edit the key in question

{{{
$ gpg --edit me@example.com
gpg (GnuPG) 1.4.16; Copyright (C) 2013 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Secret key is available.

pub  4096R/XXXXXXX  created: 2014-02-07  expires: 2016-02-18  usage: SC  
                     trust: ultimate      validity: ultimate
sub  4096R/XXXXXXY  created: 2014-02-07  expires: 2016-02-18  usage: E   
[ultimate] (1). Blah <me@example.com>
}}}

Use the `expire` command:

{{{
gpg> expire
Changing expiration time for the primary key.
Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 
}}}

for example to change to expire in 1 year just enter: {{{1y}}}

But then you also need to update the "editing" key, that is the second key in the list with the {{{usage: E}}}.

To do that, select the next key:

{{{
gpg> key 1
pub  4096R/XXXXXXX  created: 2014-02-07  expires: 2016-02-18  usage: SC  
                     trust: ultimate      validity: ultimate
sub* 4096R/XXXXXXY  created: 2014-02-07  expires: 2016-02-18  usage: E   
[ultimate] (1). Blah <me@example.com>
}}}

Note the * after the "sub" on the 2nd key, that indicates that you are operating on the second key.

Now you can use the {{{expire}}} command again. Presumably for the same length of time.

Now, in Emacs, everything should work again.
