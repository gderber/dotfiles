[[en:Org Modo]]
[[es:ModoOrg]]
[[es:ModoOrg]]
[[zh:Org-Mode (中文)]]

[:overview]
== 概要 ==

オルグモードはノート取り、プロジェクトプランニング、TODOリスト、そしてオーサリングのためのEmacsモードです.
Emacs22.1以降はデフォルトでそれは含まれています.

オルグモードの [http://orgmode.org/manual/index.html マニュアル], [http://orgmode.org/guide/ 簡易ガイド], (チュートリアル, アイディア, コードスニペット, などを含む)コミュニティが維持している[http://orgmode.org/worg Worg] そして [http://orgmode.org そのホームページ]にアクセスすることができます.
[http://www.network-theory.co.uk/org/manual/ Paperback manual]も同様に利用可能です.

[:features]
=== 機能 ===

* アウトライン: ヘッドライン, TODO アイテム, チェックリスト, 番号付きリスト, 検索, フィルタリング
* ファイリング: アウトライン, タギング, 整頓, アーカイブ, ソーティング, Gtting Things Done"ワークフローを構築するには十分な柔軟性
* タイムスタンプ: デッドライン, 勤怠管理, スケジュールされたアイテム, 繰り返すアイテム, オプションでEmacs カレンダーとダイアリに統合
* マークアップ: 太字, 斜体, リスト, リンク, イメージ, math (via LaTeX), コード・ハイライティング
* URL, ファイル, gnus, rmail, vm, news, wanderlust, bbdb, irc, シェルコマンド, ブックマーク, イメージ, 添付ファイルへのリンク
* テーブル: 編集, スプレッドシート, 計算式
* エクスポート: HTML, LaTeX, マークダウン, iCalendar, OpenDocument, Beamer slides, PDF, そして拡張可能なエクスポートシステムを介してもっと
* Babel: 文芸的プログラミング, 再現性の研究
* アジェンダ: ファイル間のTODOアイテムとスケジュールの概要

[:install]
== ダウンロードとインストール ==

開発版は:

    git clone git://orgmode.org/org-mode.git

Ubuntuリポジトリに最新のnon-cvs Emacsがあります.
次のあなたの<code>/etc/apt/sources.list</code>へ追加して:

    deb http://ppa.launchpad.net/hexmode/ubuntu gutsy main
    deb-src http://ppa.launchpad.net/hexmode/ubuntu gutsy main

[:using]
== オルグモードを使うにあたってのテキスト ==

David O'Toole はスクリーンショットつきの[http://orgmode.org/worg/org-tutorials/orgtutorial_dto.html 一般チュートリアル]を書きました.
それは
[http://hokmen.chan.googlepages.com/OrgTutorial.en-cn.html 中国語],
[http://web.archive.org/web/20080225214358/http://lumiere.ens.fr/~guerry/orgtutorialfr.html フランス語],
[http://users.itk.ppke.hu/~mpasztor/orgtutorial/notebook/orgtutorial-hu.html ハンガリー語],
[http://hpcgi1.nifty.com/spen/index.cgi?OrgMode/OrgTutorial 日本語]
そして[http://jmjeong.com/index.php?display=Emacs/OrgMode 韓国語]へ翻訳されています.

[http://orgmode.org/worg/ Worg]特定の機能について多くのチュートリアルを持っています.
Charles Caveは日付を用いたものを[http://members.optusnet.com.au/~charles57/GTD/org_dates/index.html 書いて]いました.

Bernt Hansenは彼の使っているオルグモードのカスタマイズについてOrgの基本的な知識を前提として,70ページ(!)にも渡る長い[http://doc.norang.ca/org-mode.html ドキュメント]で説明しています.

タスクの構成に関する2006/2007年のメジャーな影響の一つは[http://en.wikipedia.org/wiki/Getting_Things_Done Getting Things Done(GTD)]という本になっている.
GTDのためにオルグモードを使うことについてCharles Caveによって[http://members.optusnet.com.au/~charles57/GTD/orgmode.html 説明されている]そして控えめなコンフィグレーションが[http://www.brool.com/index.php/using-org-mode-with-gtd ここに]与えられています.

Eric Neilsen [http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html オルグコンフィグレーションスニペットの料理本]を持っています.
Bernt Hansenは[http://doc.norang.ca/org-mode.html オルグであなたができるたくさんのこと]について書きました.
SachaChuaは[http://sachachua.com/blog/2014/01/tips-learning-org-mode-emacs/ オルグを学ぶためのグラフィカルマップ]持っています.

Somewhat dated (2007): [http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/ John Wiegley]と[http://sachachua.com/wp/2007/12/29/how-to-use-emacs-org-as-a-basic-day-planner/ Sacha Chua]の両者はday plannerの使い方を説明しています.
SachaChuaによるAnother pieceは[http://sachachua.com/wp/2007/12/22/a-day-in-a-life-with-org/ "A day in the life with Org"]です.

[:publish]
== 出版 ==

あなたは`C-c C-e h'を使ってHTMLへ出版できる, もしくはあなたはLaTeXもしくはHTML出力のためのBhlModeを使うことができる.
エクスポートするまえにモードを切り替えるだけ(`M-x bhl-mode').
BhlModeはセクションとサブセクションをマーキングする際にアスタリスクを自動的に認識するはず.
他の選択肢のためにEmacsOutlineToHtmlを参照されたし.

DavidOtooleによる[http://dto.mamalala.org/e/org-publish.el org-publish.el] (これはオルグモードの最新版で提供)はウェブサイト内の全てのファイルをプロジェクト内(もし望むならばオルグモードファイル, イメージ, そしてソースコード)で作成するための出版管理システムです.

=== 新しいエクスポーター/印刷フレームワーク ===
* [http://orgmode.org/worg/exporters/ox-overview.html 新しいオルグモードエクスポーターフレームワーク] - ''リリース 8.0のように, Nicolas Goaziouによって主に(完全に？)執筆された, オルグモードは新しいエクスポートフレームワークに移行しました…''
* 前のオルグモードエクスポーターからどうアップグレードするかの手順については, [http://orgmode.org/worg/org-8.0.html アップグレードガイド]を参照されたし.


[:conflicts]
== 衝突 ==

もしあなたがWindMove, CuaMode もしくは (デフォルトのキーバインディングで)MTorusを使っているならば, あなたはShift+矢印キーのためにオルグモードのキーバインディングを無効にしたいだろう:

    (setq org-replace-disputed-keys t)

(これはorg.elが読み込まれる, もしくは反映させるためにEmacsのリスタートの要求の前に完了している必要がある.)
これは次のように入れ替わります:

*  S-RET   -> C-S-RET
*  S-up    -> M-p
*  S-down  -> M-n
*  S-left  -> M--
*  S-right -> M-+

もしEmacs 21からのAllOutがorg.elの前にロードされるならば, あなたは ##Wrong type argument ((keymapp nil))## errorを得るでしょう.
これはEmacs 22で修正されています.

もしあなたがEmacs 21を使うことを強いられているのならば, allout.elの新しいバージョンをインストールするか, allout.elの前にorg.elがロードされているか確認するかのどちらか.

例えば, alloutを要求する前に##(require 'org)##を使う.

もしあなたがsession.el (EmacsSession)を使っているなら, あなたは円形データ構造を保存から免除する必要がある:

    (add-to-list 'session-globals-exclude 'org-mark-ring)

もしあなたがEmacs 23とOrg 7.5を使っているなら, then you can also have some pseudo-compatability while maintaining CUA support with Lisp:org-cua-dwim.el

[:datasources]
== 外部データソース ==

もしあなたが外部ソースをオルグモードアジェンダファイルへ印刷するならば, あなたは変更が発生する前にこれらのファイルをリフレッシュする必要がある.
これらのファイルをリロードするためにこのスニペットを試してください.

    (defun org-reload ()
      (interactive)
      (switch-to-buffer "mail.org")
      (revert-buffer nil 1)
      (org-agenda nil "a")
      (delete-other-windows))

[:addons]]
== アドオンと他のファイル ==

* Lisp:org-mairix.el は[http://www.rpcurnow.force9.co.uk/mairix/ mairix]電子メール検索とオルグモードを統合します.
* CarstenDominik作[http://www.astro.uva.nl/~dominik/Tools/outline-magic.el outline-magic.el]は異なる種類のファイルで(例えば, ソースコード)アウトラインモードもしくはアウトラインマイナーモードをあなたが使うときオルグモードアウトラインナビゲーションのフィールを得ることができる.
* [http://repo.or.cz/w/org-mode.git?a=blob_plain;f=lisp/org-w3m.el;hb=HEAD GIT:org-w3m.el] -- w3mバッファから[[オルグモード]]へコピペ.
* [http://www.emacswiki.org/emacs/OrgMode-OSD Gnome上のOSDを使ってアポイントメントを表示する]
* [[プランナーモード]]フォーマットからオルグモードフォーマットへデータを変換する[http://gitorious.org/bkuhn-small-hacks/org-mode/blobs/master/planner2org.plx 小さなPerlスクリプト].
* Lisp:org-assoc-tags.el はアイテムに自動的に割り当てられる, 関連タグのリストをユーザが持つことを許します.
* [NxhtmlMode nXhtml](バージョン1.88以上)のinlimg.elはオルグファイルの行中でイメージを表示できます.
* FreeMindはオルグモードとfreemindファイル形式の間でインポート/エクスポートできます.
* [[mobileorg]] ([http://mobileorg.ncogni.to/ ホームページ])はオルグモードファイルを保存, 検索, 閲覧そして編集するためのiPhoneおよびiPod Touchアプリケーションです.
* OrgOutlookはMicrosoft Outlookと統合できます.
* OutlookFlagToOrgTask はOutlookでフラグがついているEmailをオルグファイルへエクスポートする.
* Lisp:org-table-comment.el provides orgtbl-mode (via orgtbl-comment-mode) support for modes that don't support block comments. 

* Lisp:org-occur-goto.el allows you to jump quickly anywhere in your open org buffers using a dynamic version of the multi-occur interface

* Lisp:org-search-goto.el a variant of the above package which supports matching multiple substrings given in any order

* Lisp:org-search-goto-ml.el a variant of the above package which supports matches across line boundaries in the whole entry


[:elisp]
== 関連するElispコード ==

=== URLのドラッキング ===

This function uses org-mode support for plain list to facilitate dragging URLs from a webbrowser (or other apps) to an org-mode buffer:

<pre>
(defadvice dnd-insert-text (around org-mouse-dnd-insert-text activate)
  (if (eq major-mode 'org-mode)
      (progn
	(cond
	 ;; if this is the end of the line then just insert text here
	 ((eolp)
	  (skip-chars-backward " \t")
	  (kill-region (point) (point-at-eol))
	  (unless (looking-back ":") (insert ":"))
	  (insert " "))

	 ;; if this is the beginning of the line then insert before
	 ((and (looking-at " \\|\t")
	       (save-excursion
		 (skip-chars-backward " \t") (bolp)))
	  (beginning-of-line)
	  (looking-at "[ \t]*")
	  (open-line 1)
	  (indent-to (- (match-end 0) (match-beginning 0)))
	  (insert "+ "))

	 ;; if this is a middle of the line, then insert after
	 (t
	  (end-of-line)
	  (newline t)
	  (indent-relative)
	  (insert "+ ")))
	(insert text)
	(beginning-of-line))
    ad-do-it))
</pre>

=== ディレクトリからアジェンダへ全てのオルグファイルをインクルードする===

<pre>
(setq org-agenda-files (file-expand-wildcards "~/org/*.org"))
</pre>

=== Turn header lines into apparent visible separators ===
To make header lines more apparently visible in the buffer, set them a background color and change this part of `org-set-font-lock-defaults', so that the header line is drawn across the screen:

<pre>
	   ;; Headlines
	   '("^\\(\\**\\)\\(\\* \\)\\(.*\xa\\)" (1 (org-get-level-face 1))
	     (2 (org-get-level-face 2)) (3 (org-get-level-face 3)))
</pre>

The only change is the `\xa' character is added before the last closing paren. This feature has been added to org-mode; see `org-fontify-whole-heading-line'.

=== リンクを追う ===
To follow links with RET, rather than a 2 key combo:

    (setq org-return-follows-link t)

You can also make TAB follow links in a similar way.

=== 指定したページでPDFを開く ===
To open links of type [~/test.pdf::3] i.e. open file at page 3:
<pre>
    (delete '("\\.pdf\\'" . default) org-file-apps)
    (add-to-list 'org-file-apps '("\\.pdf::\\([0-9]+\\)\\'" . "evince \"%s\" -p %1"))
</pre>

=== PDFを代わりのアプリケーションで開く ===
To open a link with a program other than the default(e.g. modify a pdf rather than read it):
<pre>
(defun my-org-open-at-point()
  (interactive)
  (let ((org-file-apps '(("\\.pdf\\'" . "xournal %s"))))
    (org-open-at-point)
    ))
</pre>

=== Orgテーブルのカラムをソートする ===
Org-Mode provide org-table-sort-lines ##C-c ^## to sort all  the table lines based on a column. But sometime one need to sort just one column :
<pre>

(defun org-table-sort-column ()
  "Sort table column at point."

  (interactive)
  (let* ((thisline (org-current-line))
	 (thiscol (org-table-current-column))
	 (otc org-table-overlay-coordinates)
	 beg end bcol ecol tend tbeg column lns pos)
    (when (equal thiscol 0)
      (if (org-called-interactively-p 'any)
	  (setq thiscol
		(string-to-number
		 (read-string "Use column N for sorting: ")))
	(setq thiscol 1))
      (org-table-goto-column thiscol))
    (org-table-check-inside-data-field)
    (if (org-region-active-p)
	(progn
	  (setq beg (region-beginning) end (region-end))
	  (goto-char beg)
	  (setq column (org-table-current-column)
		beg (point-at-bol))
	  (goto-char end)
	  (setq end (point-at-bol 2)))
      (setq column (org-table-current-column)
	    pos (point)
	    tbeg (org-table-begin)
	    tend (org-table-end))
      (if (re-search-backward org-table-hline-regexp tbeg t)
	  (setq beg (point-at-bol 2))
	(goto-char tbeg)
	(setq beg (point-at-bol 1)))
      (goto-char pos)
      (if (re-search-forward org-table-hline-regexp tend t)
	  (setq end (point-at-bol 1))
	(goto-char tend)
	(setq end (point-at-bol))))
    (setq beg (move-marker (make-marker) beg)
	  end (move-marker (make-marker) end))
    (untabify beg end)
    (goto-char beg)
    (org-table-goto-column column)
    (skip-chars-backward "^|")
    (setq bcol (point))
    (goto-char end)
    (previous-line)
    (org-table-goto-column column)
    (skip-chars-forward "^|")
    (setq ecol (point))
    (org-table-copy-region bcol ecol nil)
    (setq lns (mapcar (lambda (x) (cons 
				   (org-sort-remove-invisible 
				    (substring-no-properties x) )
				   x))
		      ( mapcar 'car org-table-clip)))    
    (setq lns (org-do-sort lns "Column" ))

    (setq org-table-clip (mapcar 'list (mapcar 'cdr lns)))
    (goto-char beg)
    (org-table-goto-column column)
    (org-table-paste-rectangle)
    (org-goto-line thisline)
    (org-table-goto-column thiscol)
    (when otc (org-table-toggle-coordinate-overlays))
    (message "%d element sorted in column %d" (length lns) column)))

</pre>
=== Wikipediaを編集する ===
オルグモードはモードフックでoutline-regexpを変更することによってWikipadiaの記事編集を楽にするための設定を簡単にできるようになります:
<pre>
(add-hook 'org-mode-hook '(lambda () (setq outline-regexp "=+")))
</pre>

もしあなたがWThreeMを使っているなら, 次を代わりに追加して:
<pre>
(setq w3m-form-textarea-edit-mode 'org-mode)
(add-hook 'w3m-form-input-textarea-mode-hook
          '(lambda nil
                   (setq outline-regexp "=+")))
</pre>

=== UTF-8 チェックボックスをエクスポートする ===
このスニペットは<code>- [X]</code>を☑へ<code>- [ ]</code>を☐へ返す.

<pre>
(defun sacha/org-html-checkbox (checkbox)
  "Format CHECKBOX into HTML."
  (case checkbox (on "<span class=\"check\">&#x2611;</span>") ; checkbox (checked)
	(off "<span class=\"checkbox\">&#x2610;</span>")
	(trans "<code>[-]</code>")
	(t "")))
(defadvice org-html-checkbox (around sacha activate)
  (setq ad-return-value (sacha/org-html-checkbox (ad-get-arg 0))))
</pre>

=== 開かれているオルグモードバッファを整頓する ===
次のコードは開かれているオルグモードバッファをファイルへ整頓することを可能にします.
(たくさんオルグファイルが開かれているときにたくさんターゲットを整理するのを防ぐために,現在はレベル1に設定されています).
<pre>
(defun ixp/org-buffer-files ()
  "Return list of opened orgmode buffer files"
  (mapcar (function buffer-file-name)
	  (org-buffer-list 'files)))

(setq org-refile-targets
      (quote ((nil :maxlevel . 3)
	      (ixp/org-buffer-files :maxlevel . 1)
	      (org-agenda-files :maxlevel . 3))))
</pre>

[:discussion]
== ディスカッション ==
ディスカッションは[[Comments_on_OrgMode|Talk page]]へ移されました


== カテゴリ ==
CategoryOutline
CategoryPersonalInformationManager
CategoryCalendar
CategoryNeedsAttention
CategoryWriting
