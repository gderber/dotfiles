[[es:SQLite-el-es]]
sqlite.el is a simple SqliteInterface for connecting and retrieving information using the [[SQLite]] program through [[Elisp]] programming. It is not intended as a user interface, for that see SqlMode.

It has been created as a temporary solution because the JasonFruit's script is not available through the link given. As his script, this is based on the code founded at the third item in this page: http://mysite.verizon.net/mbcladwell/.

You can download it from Github: https://gitlab.com/cnngimenez/sqlite.el .

== Features ==

This interface has the following features:

* Can connect to various database files. 
* No output buffer shown. The output buffer is hidden when using the interface.
* SQLite errors match.
* Files doesn't need to be in absolute path. Is expanded using <code>expand-file-name</code> command.

== Problems ==
The library ''had'' some problems that it ''has been'' corrected: 

# <b>Corrected!</b> The first query gives you the sqlite welcome and version. This is the first text that sqlite program prompts when you connect. 
# <b>Corrected!</b> There is only one connection, you can't mannage more!
# The output buffer has not been erased, just hidden.
# Process buffers is created for each time you call <code>sqlite-init</code>.
# <b>Corrected!</b> Error manipulation is still under development.

== API Elements ==

The API works with three basic commands. We use a number called "descriptor" for uniquely referencing each connection. The commands <code>mysql-init</code> give you a unique descriptor.


You can find the following elements:

Variables:

You may find this variable important, but for working is unnecessary.

* `sqlite-process-alist' : This is an alist in which the key is the descriptor number, and the value is a list with two elements: the process buffer and the filename opened.

Functions:

* <code>(sqlite-init file-path)</code> : For starting the sqlite program with its file. It returns a new unique descriptor. `file-path' can be a relative or absolute path of the sqlite database file.
* <code>(sqlite-query descriptor query-string)</code> : For sending a query or a sqlite ".something" command. 
* <code>(sqlite-bye desriptor)</code> : For closing the sqlite program sending a <code>.quit</code> command.

== Usage ==

Just start the program using <code>sqlite-init</code>, and then query what you want calling <code>sqlite-query</code>. When you finish using your SQLite database, close the program with <code>sqlite-bye</code>

An example of usage:

    (require 'sqlite)
    
    (let ((descriptor (sqlite-init "~/mydb.sqlite")))
        (setq res (sqlite-query descriptor "SELECT * FROM persona"))
        (sqlite-bye descriptor)
        res
     )


This example will try to open mydb.sqlite in your home directory and send the SQL query. You can also send <code>(sqlite-query descriptor ".tables")</code> for listing the tables.

You can replace the `descriptor' temporal variable with the number when you are trying this in the scratch buffer.

----
[[SQLite]] CategorySql
