;;;
:EDB (single) ;;; -*- emacs-lisp -*-

:name "Password Database"
:record-separator "\n\n"

;; Define some enumerated types

;; "category"
(edb-define-enumtype 
 'category
 '("Banking"    ;banking
   "Business"   ;business
   "ISP"        ;isp
   "Navy"       ;navy
   "Personal"   ;personal
   "Shopping"   ;shopping
   "Storage"    ;storage
   "Travel"     ;travel
   "Web"        ;web
   "Work"       ;work
   "any"        ;any
   (nil "")))

;; "short-string": both a one-line-string and a string-or-nil.
(edb-define-displaytype 'short-string 'one-line-string
  :actual->display 'db-string-or-nil->string)

(edb-define-recordfieldtype 'short-string 'one-line-string
  :type           'short-string
  :order-fn       'db-string-or-nil-order-ci
  :sort-fn        'db-string-or-nil-lessp-ci
  :match-function 'db-string-or-nil-match-function)

(require 'edb-t-timedate1)

(edb-define-recordfieldtype 'suredate 'date
  ;; writing: YYYY-MM-DD
  :actual->stored 'edb-t-timedate1:format-date-iso
  ;; reading: either YYYY-MM-DD or MM/DD/YY
  :stored->actual 'edb-t-timedate1:parse-date-string)

;; Now define the database fields and overriding attributes

:tagged-setup
'(:fields
  (((name	  . short-string)    "NM" "Name of entity")
   ((location     . short-string)    "LC" "URL or other address")
   ((user         . short-string)    "US" "Username")
   ((password     . short-string)    "PW" "Password")
   ((email        . short-string)    "EM" "Emails address associated with this entry")
   ((category     . category)        "CT" "Category (web, navy, etc...)")
   ((update       . suredate)        "UD" "Date record last updated")
   ((notes        . string-or-nil)   "NT" "Notes, descriptions and such"))
 ;; overriding attributes
 :pre-tag-regexp      ""
 :tag-chars           "A-Z"
 :separator-regexp    ":[ \t]*"
 :separator-output    ":\t"
 :continuation-regexp "^[ \t]+"
 :continuation-output "\t")

:summary-format (mapconcat 
                 (lambda (pair)
                   (format "\\%s,width=%d" (car pair) (cdr pair)))
                 '((name     . 25)
                   (user     . 20)
                   (password . 15)
                   (location . 35))
                 " ")

:record-defaults
(lambda ()
  "Provide defaults for new records in the database."
  (let ((curdate (edb-t-timedate1:parse-date-string (current-time-string))))
    (list 'update  curdate)))

:first-change-function
(defun password-change-date (field old new)
  (let ((curdate (edb-t-timedate1:parse-date-string (current-time-string))))
    (dbf-this-record-set-field 'update  curdate)))

:display t
   ===Password Database===

         Name: \name
     Location: \location,indent
         User: \user
     Password: \password
        Email: \email
     Category: \category
  Last Update: \update,date-iso
        Notes: \notes,indent
:EOTB

:report (:name "allout format")
.. \name
. , Location: \location,indent
. , User:     \user
. , Password: \password
. , Email:    \email
. , Category: \category
. , Update:   \update,date-iso
. , Notes:    \notes,indent
:EOTB


(defun fix-allout ()
  "Clean up the allout report by indenting the notes fields and
inserting the local variables at the end of the file. This makes
the file compatible with the allout folding package"
  (interactive)
  (goto-char (point-min))
  ; indent the notes field 14 spaces
  (while (re-search-forward "^\\([A-Za-z0-9 -]\\)" nil t)
    (replace-match "              \\1" nil nil))
  ; add the local variables field for allout
  (goto-char (point-max))
  ; hack to avoid the local vrbls from being parsed incorrectly on loading this file
  (insert (concat "\n\n.. Local" " variables\n;;Local" " variables:\n;;allout-layout: (0 : 0)\n" ";;End:\n")))

(defun copy-field (fieldname)
  "In the currently displayed record, copy the contents of the specified field into the kill ring"
  (let ((pw (format "%s" (dbf-displayed-record-field fieldname))))
  (message (concat "copied: " pw))
  (kill-new pw)))

(defun copy-field-from-summary (fieldname)
  "Copy the field contents from a data/edit view while in the summary window
Assumes that the summary and data view are the only two windows being display"
  (other-window 1)
  (copy-field fieldname)
  (other-window 1))

(defun copy-password ()
  "Copy the password from a data/edit view while in the summary window
Assumes that the summary and data view are the only two windows being display"
  (interactive)
  (copy-field-from-summary 'password))

(defun copy-username ()
  "Copy the username from a data/edit view while in the summary window
Assumes that the summary and data view are the only two windows being display"
  (interactive)
  (copy-field-from-summary 'user))

(defun copy-location ()
  "Copy the location from a data/edit view while in the summary window
Assumes that the summary and data view are the only two windows being display"
  (interactive)
  (copy-field-from-summary 'location))

;;; passwords.edb ends here
