<i>"if fsbot suddenly takes over your computer... he's either
part of skynet or there's a security exploit"</i>, e1f on #emacs

== A note by the author ==

* *Language-related inconveniences* are not considered bugs by the author.  fsbot knows how to understand the lisp commands you give it. It also /tries/ to understand some plain English, but we simply cannot - and do not aim to - make it a general English parser.  

* *Overloading:* Besides, English has a lot of operator overloading: multiple English-requests often conflict with each other in syntax. In such cases, fsbot's behavior always leans towards being an infobot when trying to parse your English request.

* Most things you think of as bugs will get resolved if you simply use lisp instead. For example:

<pre>
, (set-term "why" "unecho why not?")
</pre>

^^ This is the way I've now set fsbot's infobot entry for "why". The following english-request does not do the equivalent because fsbot interprets it as a question: 
<pre>
, why is unecho why not?
</pre>

* *Huge*: Indeed, fsbot's English parser is already *huge* and takes care of a lot of special cases. Further fine-tuning any one behavior almost always breaks others. Also, this task is never-ending, and has been for 15 years :D. Best to simply talk to the bot in lisp for hairy cases.
  
* *The parse functionality*: Thus, to reiterate, most things you think of as bugs will get resolved if you simply use lisp instead of English. To aid the process, don't forget to use the ,parse "foo is bar" functionality to see lisp equivalents..

* *Defun:* Similarly, the preferred, foolproof way to make fsbot do something in response to a keyword foo is to use ,(defun foo), rather than try ,foo is lisp (blah bla.) If you did the latter, then when you type ,foo blah, and if there happens to be another term called foo-blah in its database, fsbot may instead return the entry for the latter. That /is/ expected behavior because of its infobot-related functionality.


* *Outdated:* Also, many/most of the bug reports on the rest of this page are outdated and/or fixed. For example, fsbot got immutable functions some time in 2005(?).
 
- Deego, May 2014


== Bugs or TODO's ==

<pre>

<alin> , '("hello" . "hello")
<fsbot> ERROR: Wrong type argument: listp, "hello"
</pre>

<pre>

<belito> fsbot: , t8 es en tienes videos de emacs
<fsbot> try:  ,,, ,memo-help ,paren hey, Iconifying,_Deiconifying,_and_Hiding_Frames locking,_non-strict_(RCS) pages, say, h\
ttp://es.tldp.org/Manuales-LuCAS/ENROOTADOR/v2.6/Guia_del_enROOTador/Guia_del_enROOTador-6.html
<indio> Oh! A bug!
<indio> fsbot: t8 es en tienes videos de emacs
<fsbot> you have emacs videos

</pre>

<pre>

<indio> ,t8 en es I don't know. I'm sorry.
<fsbot> Pongo t sé. I m apesadumbrado.
<indio> ,t8 en es "I don't know. I'm sorry."
<fsbot> No sé. Estoy apesadumbrado. [this is the good one]

</pre>

* fs-mapcar does not force a timeout check.  The workaround is to force a sit-for 0 in every single fs- function.

<pre>

<Odin-LAP> deego: I know how to get the bot irresponsive for a while,
	   actually. Delete something from a large entry. :)

</pre>

You can make fsbot more than unresponsive, if you mapcar a circular list, fsbot dies. :( 

<pre>
<deego> maybe fsbot shouldn't respond to double comma unless the double comma
	is "preceded" by \b
<deego> rather, whitespace or ^						
<xah_> deego: yeah, agree.

</pre>

* fsbot #emacs-es translation using libtranslate? 

<pre>
<ams> <make fsbot join ##hurd>
<deego> ams: in general, i thought fsbot's db would become too stretched to be
	useful in #emacs if we make the same bot instance know about a lot of
	different topics..						
<e1f> distributed bots each with a different knowledgebase
<e1f> so if one doesn't know it, it queries the others?
<johnsu01> we need to get back to work on the inter-bot protocol :
<ams> Your reasons make sense, I guess..
<ams> deego: Maybe it would make sense to have fsbot keep seperate databased
      for channels, and one general.					
<indio> Please no.							
<deego> (for example, if we query him for ,schism, we want him to just point
	us to the emacsvxemacs schism, not show us 4 choices, one for emacs,
	one for mysql, etc)
<ams> Oh, right, you can query fsbot...
<xah> there's a schism in mysql?
<deego> s/point us to/show us the answer for
<deego> xah: dunno
<bkhl> Well, it makes sense to me to allow a channel-specific definition.
<bkhl> But it should fall back to the "global" definition, I think.	[17:39]
<deego> how?
<ams> bkhl: The problem is when you query fsbot. :/
<ams> bkhl: I tihnk it makes sense if you ask for FOO in the channel, and in
      privmsg, you should get the same response.
<bkhl> ,in #emacs schism is see emacsvxemacs
<bkhl> Or something.
<bkhl> ams: that's a good point.					
<bkhl> Though it could do an /whois and see which channels the user is in.
<ams> bkhl: What if the user is in two channels that fsbot is already in?
<bkhl> ams: then show both, or whatever.
<bkhl> It could _say_
<ams> Would be a lot of data to send.					
<deego> hm, what if the user could just say ,foo is #emacs bar; foo is also
	#hurd baz; etc.
<bkhl> "in #emacs, schism is"
<deego> in that case, that is interpreted as a channel-local term..
<deego> ah
<deego> nicer syntax
<ams> I think that having one bot for all free software related projects would be nice.								
<bkhl> ams: of course, if you want that sort of scope, it almost makes more sense to build it into freenode...
<indio> Channel specific would be weird, for instance there is ##hurd and #hurd.
<ams> indio: You could make groups.
<indio> Why not just properly name the entry ?			
<bkhl> indio: that's too easy.
<indio> :)
<ams> indio: What if project FOO and project BAR have the same name for two different thingies?						
<bkhl> I guess you can then make a redirection in the entry.
<deego> but the problem remains even after namespacing.. you'd want.. in #emacs, schism is redirect emacsvsxemacsschism :)
<ams> Right.
<indio> ams: foo-thinguie bar-thingie ?
<twb> You make it overloadable.						
<twb> You can assign data to a top-level keyword, or to a channel-level keyword.
<indio> They will be exceptions...
<twb> e.g. in #emacs planner would talk about planner-el, but elsewhere
      planner would talk about GNOME's planner app
<ams> indio: foo-thingie -- frobs the bits in machine
<indio> And if you asked ,thingie fsbot would say see bar-thingie foo-thingie
<ams> indio: foo-thingie (for bar project) --frobs the bytes in your toes.
<deego> indio: that's the current behavior
<ams> Oh..								[17:48]
<indio> yup, i like the was it fsbot is now.
<deego> when it sees multiple possibilities, example ,,need
<fsbot> try:  HowSemanticFulfillsThoseNeeds NeedHelpWithIndentations..
	WeNeedToolsToOrganize WhatAreTheNeedsOfProgrammers
<ams> deego: (re: hurdie is ##hurd) Though, one could argue equally for hurdie, it is a spanish bot, so it might have spanish definitions.
<ams> Which brings up another interesting point....
<Riastradh> You could implement internationalization features for the bot so that it would respond based on the channel...
<ams> Riastradh: What if you are polylingual?
<indio> ,libtranslate
<fsbot> From memory, libtranslate is [0] a library for translating text and
	web pages between natural languages. Its modular infrastructure allows
	to implement new translation services separately from the core
	library. ..[Type ,more]
<deego> ooh
<Riastradh> ams, you mean, 'what if the channel is polylingual?'
<indio> fsbot could remember each preference, could he ?		[17:53]
<indio> Being at #emacs-es made me feel that if fsbot could translate
	   existing entries would help helpless newbies at #emacs-es.	[17:54]
<ams> deego: Actually, I think using something like ,CHANEL-WORD would be ok.
<deego> indeed, nice ideas, i will store this conversation.
<indio> And also have language slots, like Gentoo has for packages.
<ams> deego: Sometimes you actually want the emacs stuff in another channel,
      often people in #gnu ask some question, and it is more work asking them
      to join #emacs, than to simply say ,foo.				[17:55]
<deego> and #emacs-es looks much easier to implement without breaking
	anything.  something in its .emacs says that all msgs to #emacs-es
	should undergo a translate attempt: just like what google/ff extension
	does: if it is already english (spanish in this case)), it is left
	alone..								[17:56]
<indio> I wouldn't like to see fsbot discriminate in groups.
<deego> ams: i see your point
<indio> Let's be the lab rats at #emacs-es!
<ams> deego: Then for seperate languages you could have fsbot-lang or whatever.
									[17:57]
<ams> deego: Though, that might not make sense either, since packages are
      called the same in whatever language. :?				[17:58]
<indio> With the language slots, if there wouldn't be a term in Spanish,
	   fsbot could translate the one that existed.			[17:59]
<indio> till the slot gets filled
<indio> And that way here in #emacs there won't be any noticeable change.
									[18:00]
<deego> neat
</pre>
* bkhl: In the example below, fsbot should always [1] address the receipient. [2] address the message to ams, not bkhl. 
<pre>

<bkhl> ams: ,, erbot
<fsbot> bkhl, I heard erbot is ... http://www.emacswiki.org/cgi-bin/wik
</pre>

* ,sw "a.*b.*c.*d!" hangs the bot??   @ fs-search-basic 

* Modularize fsbot's parsing engine, so that adding sucgh stuff is very easy: 

* e1f: hardcode fsbot to answer "what is the airspeed
      velocity of an unladen swallow"?  Ans: African or European?  


* foo-bar-baz, if not present, should redirect to FooBarBaz, if present.. or atleas to foo.*bar.*baz ...

* <bojohan> newnick:  Look also at ,,foo 

should result in fsbot addressing newnick rather than bojohan.  bpalmer's idea. 

* Last seen functionality

* Readonly-controls: Implement a facility for controls -- whereby an
  erbot could generally call a (erbbdb-readonly-check) -- this
  function could call a custom user-defined check --- thus, operators
  may choose to bar modifications (or merely erasures) unless they are
  done in a channel, or are done by identified well-known users. The
  default for fsbot shall remain "no control" for now at least ..
  
** This is not so bad as it looks --- IF you are can't make private
    changes and don't want to spam #emacs, where do you make changes?
    Easy: #fsbot.   In any case, we are not turning this on for fsbot
    ATM. 

* Store Recent Changes: Every time an entry gets modified, the bot
  should store it in a Recent_Changes directory, that should, of
  course, be on its data page..  put it up on its data page, as well
  as broadcast summary of changes to a channel like #fsbot.


* forcer: (will help) Create an RSS feed of the recent changes
  directory..See also: http://www.kollektiv-hamburg.de/~forcer/erbot-notify.txt






* Kensanata's ideas: 

<pre>
<kensanata> deego: yeah, fsbot should listen to all messages saying ...\+\+ or
            ...\-\- on the channel...
</pre>


<pre>
kensanata> maybe fsbot should have a control channel.  there we could tell
            fsbot to say stuff on other channels.			[09:56]
kensanata> trick some newbies and all that.  :)
<Lukhas> kensanata: hmmm
<deego> :)
<Lukhas> i don't think that's a good idea :)
<Lukhas> flooding and so on
<kensanata> sure, we kick evil-doers from the control channel.
*** vpalle (~vpalle@park222.koll.au.dk) has quit: Client Quit		[09:58]
<deego> it will sure be fun, we can always disable it :) /me puts it on a todo
<kensanata> we could also have a semi-open system...  maybe an entry that
            holds the password, and then we can /msg fsbot #emacs foobar
            Hello, my padwan learner!					[09:59]
<Lukhas> keep in mind that newbies coming here to ask question won't all find
         this funny	

</pre>



* "is also" accepts empty entries: fsbot: tmpfoo is also , whereas "is" doesn't. 

* fs-internal-auto-query-regexp:  
** Make it an erbnoc
** provide a negative specification option, like hosts-deny/hosts.allow--example, we currently want this to be true for every channel, but latex.  Hm, or is making it buffer-local a better choice?  Or more generally, allow it to be a function..

* delysid: allow flet and labels

* (Lukhas):  Support for backquotes:  , `(a b ,(cons a b))

* functions like fs-forget should be immutable.  --- We plan to rename most functions fs-foo to fsi-foo (fsi=>fs internal). Then, an elisp script should (defalias) all 'fs-foo to 'fsi-foo.. so that the fsi-functions are "callable" by users, yet read-only.  These fsi-functions are what should be used in fsbot's code throughout... unless we specifically want to allow users to rewrite some code.. 

* try ,help: doesn't show the second entry of help!! 

* fs-defalias, fs-setq, fs-defun... all these macros should have a
  uniform way in which, after converting things to a final sexp, they
  not only return the sexp, but also pass the sexp to a function that
  saves them to a file.  Hm, Moreover, the sexp should not be
  evaluated but rather the file should be loaded after writing it, so
  that ff works. 

* if you say botito! to botito, it says "end of file during parsing".
  Same with fsbot

* Show the error upon description of a term? 

* Make the bot search google groups as well... see the 2 google.el's
  or nnweb.el that comes with gnus.

* When the first term starts with "lisp", the actual lisp expression
  should perhaps be gotten by concating all the lisp terms together. 

* Since there are a lot of variables (and functions), and since variables can be set even by users, stop responding to variable matches? 

* Allow: no, foo is bar...  viz: a comma after no...

* bpt: Like gabi, it could "beepbeep" a user when asked to..

* rps -- what was this again? 

* 
 kensanata: a sexp?  
should make it tell us what a sexp is..
 

* single +'s should not trigger karmas.

* If foo is redirected to bar which is redirected to baz, adding a term to foo adds it to bar  ATM, not to baz.


* make tool-bar actually look for tool-?bar, thanks resolve. 

* automatic length-channel-members when new members ?

* (lispify "why is why not" ) is strange

* erbc-defuns..

* local dictionary for fsbot?

* , foo is lisp "bar" doesn't work. 

* fsbot: wants to re-read file when chaned on disk... for
  find-function... and shows  a prompt.. what if this happens and the
  operator is not there? 

* kill query buffers after a while? 

* auto-gzip erbtrain backups.


* The ,, termination doesn't work when the initial ,, or , is at the
beginning of a sentence. 

* why does this happen? 

** <lg_> ignotus: read screenshot little description at ,, XWindowEmacsManager ..
									[08:43]
** <fsbot> Try: xwem XWindowEmacsManager
        http://www.emacswiki.org/cgi-bin/wiki.pl?RecentChanges



        

== Suggestions/wishlist ==

It would be cool if fsbot would output the number of the entry recently added so...

<indio>	,CanalEmacsEsNovedades is also Planner 3.41: http://download.gna.org/planner-el/
<fsbot>	Added entry to the term "CanalEmacsEsNovedades"

one can inmediately move the entry to a different position without having to query fsbot. Maybe also be able to insert an entry to a certain Nth place.

* fsbot should store a "created/entered" for each term... since bbdb
has it, shouldn't be that hard..


<pre>

<shapr> deego: maybe ,, active could say what users currently on the channel have spoken in the last twenty minutes?
.


<resolve> actually, something which might be nifty - when a person
joins who hasn't been here before, fsbot sends a message welcoming,
telling them to ask away, etc

</pre>


* Would be nice if ,yow ,, yow ,, yow ,, yow ! was parsed to be
  equivalent to (concat (describe "yow") (describe "yow")).

* nice if tell foo that bar baz be equivalent to: say foo: bar baz...

----
ErBot
