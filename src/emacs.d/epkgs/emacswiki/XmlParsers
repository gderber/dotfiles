Various XML parsers. See also XmlModes for XML editing environments.


== xml.el ==

This parser by EmmanuelBriot is part of Emacs since version 21, and is part of Gnus.

Docs: http://www.gnu.org/software/emacs/manual/html_node/elisp/Parsing-HTML_002fXML.html

Here's a link to the file in Emacs's sources:

* GIT:xml.el

See XmlParserExamples for some usage examples.


== xml-parse.el ==

This parser by JohnWiegley is available from his homepage.  It is
probably deprecated.  The data structure returned looks very much like
the one returned by xml.el, but element names are strings instead of
symbols.  On the other hand, it contains additional code to
pretty-print the xml data structures such that it can be used as an
XML indentation fix.

You can get the source from here:

* Lisp:xml-parse.el


== dom.el ==

The XML parsers create a lisp data structure for you and they
provide access methods to this data structure.
The following is a DOM implementation -- you feed it the result of xml.el and then you can use
the [http://www.w3.org/TR/DOM-Level-3-Core standard DOM interface].

You can get the source from here:

* [http://github.com/toroidal-code/dom.el dom.el]


== xpath.el ==

If you work with a DOM, a lot of the work you will be doing involves
finding nodes in the document tree.  Instead of looping through it
yourself, writing lots of awkward and brittle code, you could use
XPATH to do this for you.  XPATH allows you to use path-like strings
to specify nodes.

The following code, for example, reads an XML file, creates a DOM, and
uses an XPATH to find chapter titles.

    (let* ((data (car (xml-parse-file "sample.xml")))
           (doc (dom-make-document-from-xml data)))
      (xpath-resolve (dom-document-element doc)
                     "descendant::chapter/child::title"))

You can get the source from here:

* Lisp:xpath.el
* Lisp:xpath-parser.el

This requires partial (or full) installation of CEDET (see below), as well as:

* dom.el [http://github.com/toroidal-code/dom.el] (same as above)


To use xpath.el you need Wisent, a Bison-like parser generator in Elisp. Wisent is part of the Semantic package (see: SemanticBovinator), but as far as I can see it is not in the released version of Semantic. You can get it along with the entire [[CEDET]] beta tar-ball: http://sourceforge.net/project/showfiles.php?group_id=17886&release_id=192965

As far as I can see, you need only these three files:

* wisent.el [http://cvs.sourceforge.net/viewcvs.py/*checkout*/cedet/cedet/semantic/wisent/wisent.el?rev=1.28]
* wisent-comp.el [http://cvs.sourceforge.net/viewcvs.py/*checkout*/cedet/cedet/semantic/wisent/wisent-comp.el?rev=1.19]
* working.el [http://cvs.sourceforge.net/viewcvs.py/*checkout*/cedet/cedet/common/working.el?rev=1.1]
** NOTE: None of these three links are valid, as of Feb 24, 2009
** NOTE: the CVS version of CEDET as of Feb 24, 2009 did not have working.el

If your Emacs version already has CEDET pre-packaged with it (e.g., 23.3), xpath-parser.el may be edited to require the correct symbols to take advantage of the pre-packaged Wisent:
# Go to your Emacs Lisp directory (e.g., <Emacs installation directory>\lisp in Windows).
# Look for the Wisent package in the CEDET package (e.g., <Emacs installation directory>\lisp\cedet\semantic\wisent).
# Look for and open the file where wisent-parse is defined.
# Note that file's provide line (e.g., (provide 'semantic/wisent/wisent)).
# Look for and open the file where wisent-compile-grammar is defined.
# Note that file's provide line (e.g., (provide 'semantic/wisent/comp)).
# Edit xpath-parser.el so that the correct provided symbols are required (e.g., (require 'semantic/wisent/wisent) and (require 'semantic/wisent/comp) instead of 'wisent and 'wisent-comp)).

Note that most of the xpath-parser is generated by a BNF file:

* [[XPath BNF]]

The xpath-parser requires wisent, which is part of the
SemanticBovinator (CVS only, at the end of 2001).

: Uh, oh! I modified the s-expr grammar in xpath-parser.el without being aware of this ... :-/  -- OliverScholz

Related links:
* [http://www.w3.org/TR/xpath W3 XPATH standard]


== xslt.el ==

XSLT and XPATH together make an XSL engine. XEmacs comes with [http://cvs.xemacs.org/viewcvs.cgi/XEmacs/packages/xemacs-packages/xslide/ xslide] and [http://cvs.xemacs.org/viewcvs.cgi/XEmacs/packages/xemacs-packages/xslt-process/ xslt-process].

Related links:

* [http://www.w3.org/TR/xslt W3 XSLT standard]


----
CategoryCode
CategoryXML
CategoryExtensions
CategoryData
