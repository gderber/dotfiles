[[en:RegularExpressionHelp]]
== Las expresiones regulares de Emacs no son expresiones regulares de Perl ==

: Una simple pregunta de regexp: 
¿porqué una expresión regular como <code>(?:aaa|bbb)</code> no trabaja en `M-x search-forward-regexp'?

La respuesta es simple: Hay dos "estilos" de expresiones regulares.  Uno de ellos lo hicieron popular las viejas herramientas de Unix como sed y grep, y el otro lo hizo popular Perl.  En Perl, los caracteres <code>( | )</code> tienen un significado especial -- agrupar y alternativa.  En grep, los caracteres <code>( | )</code> tienen su significado ordinario -- they match themselves.  In either case, escaping them using a backslash will change the meaning of the character.

The above example in Emacs would read <code>\(?:aaa\|bbb\)</code>.

Try ReBuilder to interactively build regular expressions.

Or use the function [[rx]] inside Emacs (GIT:emacs-lisp/rx.el) or try [[SymbolicRegexp]]s.

== Regular Expressions In Emacs Lisp Are Strings Not Literals ==

: Why does the code <code>(re-search-forward "\(?:aaa\|bbb\)")</code> not work as expected?

The EmacsLisp code is read by the so-called /reader/ before the regular expression is compiled by the regular expression library.  The elisp reader uses the same escape character as the regular expression library within strings.  This has an unfortunate effect: Single backslashes will just "disappear"!

* The elisp string <code>"\(?:aaa\|bbb\)"</code> is read by the elisp reader and results in the regular expression
<code>(?:aaa|bbb)</code> which does not work
* The elisp string <code>"\\(?:aaa\\|bbb\\)"</code> is read by the elisp reader and results in the regular
expression <code>\(?:aaa\|bbb\)</code> which /does/ work.

== See What Regexp Subgroups Really Match ==

It can be helpful, when trying to figure out what a give regexp does or doesn't do, and why, to use '''Icicles''' regexp searching, '''`##C-`##'''' (`icicle-search'), '''`##C-'##''' (`icicle-occur'), and so
on -- [[Icicles - Search Commands, Overview]]. The search hits are highlighted so that you can even see what the subgroups match. For instance, here is how this regexp is highlighted:

: ##(##'''##\(##'''##[-a-z]*]+##'''##\)##'''## *##'''##\(##'''##(##'''##\(##'''##([-a-z]+ *##'''##\(##'''##[^)]*##'''##\)##'''##)##'''##\)##'''##)##'''##\)##'''##.*##

[[image:IciclesSearchContextLevelsScreenshot]]






----
CategoryRegexp
