Extensions (using the category name from `finder-by-keyword'), are utility libraries intended to be used by programmers writing Emacs Lisp.

**These extension libraries offer no (or little) user-facing functionality.**

== Comprehensive Utility Frameworks ==

* APortableEmacsLibrary (APEL)
* [[mon-utils.el]]

== Data Structures and Types ==

* ArrayExtension -- Support for arrays, and matrixes.
* [[AVLtrees]] -- AVL tree data structures (self-balancing binary trees)
* DictionaryTrees -- Advanced dictionary data structures
* [[Heaps]] -- Heap data structures (a.k.a. priority queues)
* [[Queues]] -- Queue data structures
* RecordType -- Definition of a new type: record. A record is a set of named fields with their associated type.
* TernarySearchTrees -- ternary search tree data structures (obsolete - use [[Tries]] instead)
* [[Tries]] -- General trie data structures (including ternary search trees)
* [http://github.com/nicferrier/emacs-kv kv.el] -- key/value data structure functions
* [http://github.com/VincentToups/emacs-utils/blob/master/ra-lists.el ra-lists.el] -- Random-Access Pairs and Lists

== Algorithms ==

* TaggedNFA -- Tagged non-deterministic finite state automata (generally used for regular expression matching algorithms)

== Strings ==

* StringUtils -- General string-manipulation utilities
* UcsUtils -- General utilities for Unicode characters, strings, and vectors
* [[ucs-cmds.el]] -- Create commands that insert Unicode chars
* [[strings.el]] -- Miscellaneous string functions

== Numbers and Mathematics ==

* [http://www.astro.princeton.edu/~rhl/skyserver/bigint.el bigint.el] -- A simple bigint package for emacs
* [[Infix]]    -- Writing infix math expressions

== Sequences ==

* ListUtils -- List-manipulation utility functions
* [http://www.splode.com/~friedman/software/emacs-lisp/src/list-fns.el list-fns.el] -- list-searching and manipulation functions
* [http://github.com/magnars/bang.el bang.el] -- a modern list api for Emacs. Does not require 'cl.
* VectorUtils -- Vector-manipulation utility functions
* [http://www.splode.com/~friedman/software/emacs-lisp/src/obarray-fns.el obarray-fns.el] -- obarray-manipulating routines

== Macros ==

* MacroUtilities -- Utilities for writing macros.

== New Language Constructs ==

* [http://www.mahalito.net/~harley/elisp/nlet.el nlet.el] -- Scheme's "named let"
* [http://github.com/skeeto/elisp-fakespace fakespace.el] -- fake namespaces with defpackage
* [http://github.com/skeeto/emacs-memoize memoize.el] -- memoize functions
* [[Anaphora]] -- anaphoric macros providing implicit temp variables
* [http://github.com/funkenblatt/combinators.el combinators.el]

== Looping ==

* [[Iterate]] -- an attempt at translating "iterate" Common Lisp library into Emacs Lisp

== Concurrency ==

* LaterDo -- Calling functions later, thus do some sort of fake threading
* AsyncEval -- allows forms to be evaluated in a different Emacs process
* CoRoutines -- Coroutines for Emacs Lisp
* [http://github.com/jwiegley/emacs-async async.el] -- a module for doing asynchronous processing
* See also ConcurrentEmacs

== Parsers and Lexers ==

* See CategoryData

== Text Processing ==

* [http://github.com/yuutayamada/stem stem.el] -- routines for stemming English words

== Buffer Text ==

* ThingAtPoint -- Functions to return various kinds of Emacs Lisp entity at or near point. For example, return the Lisp symbol name nearest point.

== User Interface ==

* IncrementalRead -- support building libraries that act incrementally on input.
* LuiMode -- A Linewise User Interface
* GIT:emacs-lisp/tabulated-list.el -- display and interact with tables
* ButtonLockMode -- Clickable text defined by regular expression
* [[Alert]] -- Alternatives to `message'
* NavFlash -- Briefly highlight the current line
* UnicodeEnbox -- Surround a string with box-drawing characters
* AutoOverlays -- Overlays defined by regexps, automatically created, updated and destroyed as buffer is modified.

== Key Bindings ==

* NaKeD -- Provide for naked key descriptions: no angle brackets.
* DoReMi -- Incremental change using arrow keys or mouse wheel.
* UseCustomizeForKeyBindings -- Widget and `defcustom' code to let users use Customize for key bindings.
* [[http://github.com/tarsius/keymap-utils keymap-utils]] -- keymap utilities

== Menus ==

* EasyMenu -- write menu definitions which work under both, Emacs and XEmacs (provided with Emacs)

== Windows ==

* WindowEndVisible --  Find the last visible point in a window
* [https://github.com/kiwanami/emacs-window-layout window-layout.el] -- window layout manager

== Frames ==

* Lisp:frame-fns.el -- Non-interactive frame and window functions
* FontUtils -- utility functions for working with fonts

== Buffers ==

* BufferUtils -- Buffer-manipulation utility functions

== Modes ==

* GIT:emacs-lisp/easy-mmode.el -- easy definition for major and minor modes (included with Emacs)
* ModeLocal -- Causing a variable or function to have a value/behavior based on major mode.

== Networking ==

* TcpClient -- Network interface to ease the creation of network related script
* [[Websocket]] -- Emacs <nowiki>WebSocket</nowiki> client and server
* [[Elnode]] -- simple emacs async HTTP server
* [ftp://ftp.newartisans.com/pub/emacs/httpd.el httpd.el] -- a web server in Emacs Lisp
* XmlRpc -- make asynchronous remote procedure calls over http
* CorbaImplementation -- CORBA Dynamic Invocation interface using the IIOP protocol
* SoapClient -- access to SOAP web-services from Emacs
* UrlPackage -- parse and handle URLs
* [http://github.com/leathekd/grapnel grapnel] -- HTTP request lib built on curl with flexible callback dispatch

== Web APIs ==

* [https://github.com/sigma/gh.el gh.el] -- <nowiki>GitHub</nowiki> Api library making use of Eieio
* [https://github.com/rsanders/github-api-v3.el github-api-v3.el] -- Emacs library for the v3 <nowiki>GitHub</nowiki> API

== Filesystem ==

* SubdirsToList -- Adding subdirectories to a list recursively

== Persistence ==

* See CategoryData

== Security ==

* PasswordGenerator -- generate password strings
* OAuthLibrary -- OAuth authentication
* HmacShaOne -- generate HMAC-SHA1 authentication signatures from strings

== Project Management ==

* ProjectBufferMode -- a generic mode to handle projects

== Testing ==

* See UnitTesting

== Miscellaneous ==

* [[uuid]] -- Globally unique identifiers

== See Also ==

* CategoryProgrammerUtils
* CategoryCode
