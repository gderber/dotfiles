;;; Apply xterm color scheme to Dired

(require 'ansi-color)

(setq xwl-dircolors-string
      (replace-regexp-in-string
       ":$" "" (cadr
                (split-string
                 (if (executable-find "dircolors")
                     (shell-command-to-string "TERM=xterm-color dircolors")
                   "'no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:';"
                   )
                 "'"))))

;; colored by file extensions
(setq xwl-dircolors-extensions
      (split-string
       (replace-regexp-in-string
        "=[0-9;]+\\|\\*\\." ""
        (replace-regexp-in-string "^[^*]*" "" xwl-dircolors-string))
       ":"))

(defun xwl-dircolors-get-escape-seq (regexp)
  "Get escape-seq by matching REGEXP against `xwl-dircolors-string'.
e.g., (xwl-dircolors-get-escape-seq \"*.gz\") => \"01;31\""
  (string-match (concat regexp "=\\([^:]+\\):") xwl-dircolors-string)
  (match-string 1 xwl-dircolors-string))

(setq dired-font-lock-keywords
      `(
        ;;
        ;; Directory headers.
        ,(list dired-subdir-regexp '(1 dired-header-face))
        ;;
        ;; Dired marks.
        ,(list dired-re-mark '(0 dired-mark-face))
        ;;
        ;; We make heavy use of MATCH-ANCHORED, since the regexps don't identify the
        ;; file name itself.  We search for Dired defined regexps, and then use the
        ;; Dired defined function `dired-move-to-filename' before searching for the
        ;; simple regexp ".+".  It is that regexp which matches the file name.
        ;;
        ;; Marked files.
        ,(list (concat "^[" (char-to-string dired-marker-char) "]")
               '(".+" (dired-move-to-filename) nil (0 dired-marked-face)))
        ;;
        ;; Flagged files.
        ,(list (concat "^[" (char-to-string dired-del-marker) "]")
               '(".+" (dired-move-to-filename) nil (0 dired-flagged-face)))
        ;; People who are paranoid about security would consider this more
        ;; important than other things such as whether it is a directory.
        ;; But we don't want to encourage paranoia, so our default
        ;; should be what's most useful for non-paranoids. -- rms.
;;;   ;;
;;;   ;; Files that are group or world writable.
;;;   (list (concat dired-re-maybe-mark dired-re-inode-size
;;;		 "\\([-d]\\(....w....\\|.......w.\\)\\)")
;;;	 '(1 dired-warning-face)
;;;	 '(".+" (dired-move-to-filename) nil (0 dired-warning-face)))
        ;; However, we don't need to highlight the file name, only the
        ;; permissions, to win generally.  -- fx.
        ;; Fixme: we could also put text properties on the permission
        ;; fields with keymaps to frob the permissions, somewhat a la XEmacs.
        ,(list (concat dired-re-maybe-mark dired-re-inode-size
                       "[-d]....\\(w\\)....") ; group writable
               '(1 dired-warning-face))
        ,(list (concat dired-re-maybe-mark dired-re-inode-size
                       "[-d].......\\(w\\).") ; world writable
               '(1 dired-warning-face))
        ;;
        ;; Subdirectories.
        ,(list dired-re-dir
               '(".+" (dired-move-to-filename) nil (0 dired-directory-face)))
        ;;
        ;; Symbolic links.
        ,(list dired-re-sym
               '(".+" (dired-move-to-filename) nil (0 dired-symlink-face)))

        ;; executables
        ,(list dired-re-exe
               `(".+"
                 (dired-move-to-filename)
                 nil
                 (0 (ansi-color-get-face ,(xwl-dircolors-get-escape-seq "ex")))))

        ;; colorful by extensions
        ,@(mapcar (lambda (ext)
                    `(,(format ".*\\.%s$" ext)
                      (".+"
                       (dired-move-to-filename)
                       nil
                       (0 (ansi-color-get-face ,(xwl-dircolors-get-escape-seq ext))))))
                  xwl-dircolors-extensions)

        ;;
        ;; Files suffixed with `completion-ignored-extensions'.
        (eval .
              ;; It is quicker to first find just an extension, then go back to the
              ;; start of that file name.  So we do this complex MATCH-ANCHORED form.
              (list (concat "\\(" (regexp-opt completion-ignored-extensions) "\\|#\\)$")
                    '(".+" (dired-move-to-filename) nil (0 dired-ignored-face))))
        ;;
        ;; Files suffixed with `completion-ignored-extensions'
        ;; plus a character put in by -F.
        (eval .
              (list (concat "\\(" (regexp-opt completion-ignored-extensions)
                            "\\|#\\)[*=|]$")
                    '(".+" (progn
                             (end-of-line)
                             ;; If the last character is not part of the filename,
                             ;; move back to the start of the filename
                             ;; so it can be fontified.
                             ;; Otherwise, leave point at the end of the line;
                             ;; that way, nothing is fontified.
                             (unless (get-text-property (1- (point)) 'mouse-face)
                               (dired-move-to-filename)))
                      nil (0 dired-ignored-face))))))
