The syntax and ideas behind Emacs lists trace back to its roots over 50 years ago. This often leaves Elisp newbies confused, especially if they are not familiar with memory pointers.  This article is a basic introduction to these concepts. These ideas are common to all Lisp dialects, and much of this information has been [http://en.wikipedia.org/wiki/Cons repeated on Wikipedia]. 

The basic data structure is called a cons cell, called that because is the basic unit of list ''cons''truction.  A cons cell is simply a pair of data items.  The first item is called the `car', meaning content of the address register, and the second item is called the `cdr', or content of the data register. (These names derive from the original implementations of Lisp in machine code, but do not correspond directly to memory structures anymore.) The car and the cdr can be any sort of data, like numbers or strings, but importantly they may hold pointers to other cons cells.

The Lisp notation for creating a cons cell is two items between parentheses separated by a period.  For example, (1 . 2) is a cons cell where the car is 1 and the cdr is 2.

You can build binary trees from cons cells:

    ((1 . 2) . (3 . 4))

This corresponds to the following tree:

        *
       / \
      *   *
     / \ / \
     1 2 3 4


A list in Lisp is represented as a linked list of cons cells, where the `car's contain the list elements, and the `cdr's points to the rest of the list.  There is a special list value () which represents an empty list.  This is called `nil' which means "empty," like "null" in c-like languages. An empty list is always the terminal element of a list.  So (1 . nil) is a one-element list, and (1 . (2 . nil)) is a two-element list, and (1 . (2 . (3 . nil))) is a three-element list.  The three-element list can be represented as a tree:

        *
       / \
      1   *
         / \
        2   *
           / \
          3   nil

In Lisp code, you would create such a list using one of the following
idioms.

Generate a list using the `list' function: 

    (list 1 2 3) => (1 2 3)

The following expression is equivalent:

    (cons 1 (cons 2 (cons 3 nil))) => (1 2 3)

A constant list using a quote:

    '(1 2 3) => (1 2 3)

Thus, you can add items to the front of the list using cons.  Here's an
equivalent expression:

    (cons 1 '(2 3)) => (1 2 3)

For ways to modify lists, see ListModification.

Original article by KaiGrossjohann. 
----
CategoryCode
