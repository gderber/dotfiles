The Parser Compiler for Emacs creates Recursive Descent parsers in pure elisp.

The goal of the project is to create a useful Parser Compiler that is both innovative and
practically useful. This is an original work created by Mike Mattie - codermattie@gmail.com

Parsers are compiled by a Macro that translates a parser definition DSL to pure elisp.
The syntax supports the PEG grammar class currently, CFG is planned.

This project is in the alpha stage. There is still a significant amount of work left,
the most important being packrat optimization as the infrastructure to support
Left Recursion. The hard parts of the code generator and DSL design however are 
complete so the pack-rat optimization should be a clean bolt-on at this point.

If you are interested in it's development, or eventual use feel free to contact me - [[codermattie]]

Required Sources
* Lisp:parser.el
* Lisp:parser-fn.el
* Lisp:closure.el

Examples
* Lisp:token-example.el

History:

Version is listed with specific files changed, and a list of significant
changes. 

0.0.4: parser.el, parser-fn.el 
* Add not PEG operator. 
* generated code fixes. 
* compile error message fix. 
* add missing define-error compat function in parser-fn.el 

0.0.5: parser.el
* Add not-skip operator
* fix collision with anonymous terms
* conform parser.el to wiki elisp header/footer standard

0.0.6: parser.el

* finalize token API.
* improve doc-strings

----
CategoryCode
CategoryExtensions
CategoryData
