In hide-ifdef-mode, code within #ifdef constructs that the C preprocessor
would eliminate may be hidden from view.

Activate it using `M-x hide-ifdef-mode'.

The hidden code is marked by ellipses (...).  Be
cautious when editing near ellipses, since the hidden text is
still in the buffer, and you can move the point into it and modify
text unawares.
You can make your buffer read-only while hide-ifdef-hiding by setting
`hide-ifdef-read-only' to a non-nil value.

Luke Lee note:

An extensively rewritten version is uploaded. Here I list some of the enhancements:
* Automatically find and add #define macros when hiding
* Complete C expression with operator precedence implemented
* Hex/octal/decimal number supported
* Bit shift operation supported
* Stringification / string concatenation / token concatenation supported
* Argumented macro expansion supported, even for complicated and rarely used token replacement syntax
{{{
#define TESTVAL1 0x123
#define TESTVAL2 291 // 0x123

#define CONCAT(x,y) x ## y

#if CONCAT( TESTVAL1=,=TESTVAL2 )
#error correct
#else
#error wrong
#endif

#if CONCAT( TESTVAL1!,=TESTVAL2 )
#error wrong
#else
#error correct
#endif
}}}
after hiding, it will become
{{{
#define TESTVAL1 0x123
#define TESTVAL2 291 // 0x123

#define CONCAT(x,y) x ## y

#if CONCAT( TESTVAL1=,=TESTVAL2 )
#error correct
#else...
#endif

#if CONCAT( TESTVAL1!,=TESTVAL2 )...
#else
#error correct
#endif
}}}
* GNU C compatibility, i.e. "..." in macro argument supported. 
Ex. #define macro(arg1, arg2...) arg1 + arg2
* Self-referencing macros detected, even indirectly. As GNU cpp does.
* hide/unhide a region
* Evaluate a macro, just mark the region you want to evalute and press `C-c @ e'.
* When hiding #if..#endif themselves, consecutive "..." "..." will be merged as a single "..."
* Prevent hiding *.h files from re-inclusion protection for their top-level #ifdefs. Originally if we hide a .h file with such kind of protection, for the first time it will extract all the #defines in the *.h file but when you tried the 2nd time it will hide everything leave only an
{{{
#ifdef __XXX_HEADER_INCLUDED__...
#endif
}}}
for the whole .h file. Now with customization option `hide-ifdef-expand-re-inclusion-protection' it will expand the top level if-part if this option is set to 't (default).

Tips:
* All C files share the same macro database (i.e. hide-ifdef-env). 
* Goto your "config.h" file and hide it, it will extract all #defines.
* Goto each of your .h file in the order that C compiler compiles your C file, hide each .h file one by one. (TODO: project support, auto search for .h files)
* To save your current macro database, you need to deploy [[EmacsSession]] package and add the following into your emacs InitFile:
{{{
(unless (assoc 'hide-ifdef-env session-globals-include)
  (push '(hide-ifdef-env 100000 t) session-globals-include))
}}}
* Support exclusion of some macro-name patterns (to reduce the size of macro database). 
For example, if you want to exclude all macros started with "DOC_", put the following into your emacs InitFile:
{{{
(setf hide-ifdef-exclude-define-regexp-pattern "DOC_.*")
}}}

Compatibility note:

The original "semantic" hack no longer work.

Lisp:hideif.el
----
CategoryHideStuff
