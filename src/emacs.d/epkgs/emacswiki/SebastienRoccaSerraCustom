;;;
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(abbrev-mode t)
 '(apropos-do-all t)
 '(apropos-documentation-sort-by-scores (quote verbose))
 '(apropos-sort-by-scores (quote verbose))
 '(auto-image-file-mode t)
 '(backup-by-copying t)
 '(backup-directory-alist (quote (("." . "~/Documents/Tmp/Emacs"))))
 '(blank-chars (quote tabs))
 '(blank-style (quote color))
 '(bookmark-default-file "~/.emacs.d/bookmarks")
 '(bs-default-sort-name "by name")
 '(c-default-style (quote ((java-mode . "java") (awk-mode . "awk") (other . "gnu"))))
 '(calendar-week-start-day 1)
 '(column-number-mode t)
 '(completion-show-help nil)
 '(cua-auto-tabify-rectangles nil)
 '(cua-enable-cua-keys nil)
 '(cua-highlight-region-shift-only t)
 '(cua-mode t nil (cua-base))
 '(cursor-in-non-selected-windows nil)
 '(dabbrev-case-replace nil)
 '(delete-old-versions t)
 '(delete-selection-mode t)
 '(desktop-buffers-not-to-save "\\(^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|.*_flymake.*\\)$")
 '(desktop-files-not-to-save "^/[^/:]*:\\|.*_flymake\\..*")
 '(desktop-minor-mode-table (quote ((auto-fill-function auto-fill-mode) (vc-mode nil) (vc-dired-mode nil) (flymake-mode nil))))
 '(desktop-path (quote ("~/.emacs.d")))
 '(display-time-24hr-format t)
 '(ecb-display-default-dir-after-start nil)
 '(ecb-key-map (quote ("C-c ." (t "fh" ecb-history-filter) (t "fs" ecb-sources-filter) (t "fm" ecb-methods-filter) (t "fr" ecb-methods-filter-regexp) (t "ft" ecb-methods-filter-tagclass) (t "fc" ecb-methods-filter-current-type) (t "fp" ecb-methods-filter-protection) (t "fn" ecb-methods-filter-nofilter) (t "fl" ecb-methods-filter-delete-last) (t "ff" ecb-methods-filter-function) (t "p" ecb-nav-goto-previous) (t "n" ecb-nav-goto-next) (t "lc" ecb-change-layout) (t "lr" ecb-redraw-layout) (t "lw" ecb-toggle-ecb-windows) (t "lt" ecb-toggle-layout) (t "s" ecb-window-sync) (t "r" ecb-rebuild-methods-buffer) (t "a" ecb-toggle-auto-expand-tag-tree) (t "x" ecb-expand-methods-nodes) (t "h" ecb-show-help) (nil "C-!" ecb-goto-window-edit-last) (t "g1" ecb-goto-window-edit1) (t "g2" ecb-goto-window-edit2) (t "gc" ecb-goto-window-compilation) (nil "C-," ecb-goto-window-directories) (nil "C-;" ecb-goto-window-sources) (nil "C-:" ecb-goto-window-methods) (t "gh" ecb-goto-window-history) (t "ga" ecb-goto-window-analyse) (t "gb" ecb-goto-window-speedbar) (t "md" ecb-maximize-window-directories) (t "ms" ecb-maximize-window-sources) (t "mm" ecb-maximize-window-methods) (t "mh" ecb-maximize-window-history) (t "ma" ecb-maximize-window-analyse) (t "mb" ecb-maximize-window-speedbar) (t "e" eshell) (t "o" ecb-toggle-scroll-other-window-scrolls-compile) (t "\\" ecb-toggle-compile-window) (t "/" ecb-toggle-compile-window-height) (t "," ecb-cycle-maximized-ecb-buffers) (t "." ecb-cycle-through-compilation-buffers))))
 '(ecb-layout-name "left9")
 '(ecb-methods-menu-sorter (lambda (entries) (let ((sorted (copy-list entries))) (sort sorted (quote string-lessp)))))
 '(ecb-options-version "2.32")
 '(ecb-show-tags (quote ((default (include expanded name) (parent expanded name) (type expanded name) (variable expanded name) (function expanded name) (label expanded name) (t expanded name)) (c++-mode (include collapsed nil) (parent collapsed nil) (type flattened nil) (variable collapsed access) (function flattened access) (function collapsed access) (label hidden nil) (t collapsed nil)) (c-mode (include collapsed nil) (parent collapsed nil) (type flattened nil) (variable collapsed access) (function flattened access) (function collapsed access) (label hidden nil) (t collapsed nil)) (bovine-grammar-mode (keyword collapsed name) (token collapsed name) (nonterminal flattened name) (rule flattened name) (t collapsed nil)) (wisent-grammar-mode (keyword collapsed name) (token collapsed name) (nonterminal flattened name) (rule flattened name) (t collapsed nil)) (texinfo-mode (section flattened nil) (def collapsed name) (t collapsed nil)) (lua-mode (t expanded name) (function collapsed name)))))
 '(ecb-tip-of-the-day nil)
 '(ediff-split-window-function (quote split-window-horizontally))
 '(ediff-window-setup-function (quote ediff-setup-windows-plain))
 '(eshell-save-history-on-exit t)
 '(european-calendar-style t)
 '(ex-cycle-other-window nil)
 '(ffap-file-finder (quote ido-find-file))
 '(flymake-allowed-file-name-masks (quote (("\\.c\\'" flymake-simple-make-init) ("\\.cpp\\'" flymake-simple-make-init) ("\\.xml\\'" flymake-xml-init) ("\\.html?\\'" flymake-xml-init) ("\\.cs\\'" flymake-simple-make-init) ("\\.pl\\'" flymake-perl-init) ("\\.h\\'" flymake-master-make-header-init flymake-master-cleanup) ("\\.java\\'" flymake-simple-make-java-init flymake-simple-java-cleanup) ("[0-9]+\\.tex\\'" flymake-master-tex-init flymake-master-cleanup) ("\\.tex\\'" flymake-simple-tex-init) ("\\.idl\\'" flymake-simple-make-init) ("\\.lua\\'" flymake-lua-init))))
 '(flymake-no-changes-timeout 1)
 '(global-auto-mark-mode nil)
 '(global-auto-revert-mode t)
 '(global-font-lock-mode t)
 '(global-hl-line-mode t)
 '(global-visible-mark-mode t)
 '(gnus-use-full-window nil)
 '(grep-files-aliases (quote (("el" . "*.el") ("ch" . "*.[ch] *.cpp *.hxx *.cxx *.hpp") ("c" . "*.c *.cpp *.cxx") ("h" . "*.h *.hpp *.hxx") ("asm" . "*.[sS]") ("m" . "[Mm]akefile*") ("cl" . "[Cc]hange[Ll]og*") ("tex" . "*.tex") ("texi" . "*.texi") ("d" . "*.lua *.ui *.xml *.cfg *.def *.lvl *.trk *.xslt *.qrc *.c *.cpp *.cxx *.h *.hpp *.hxx") ("u" . "*.ui *.xml *.qrc *.xslt") ("g" . "*.def *.xml *.lvl *.trk *.xslt") ("l" . "*.lua"))))
 '(grep-find-use-grep-r nil)
 '(grep-highlight-matches t)
 '(grep-scroll-output t)
 '(highline-face (quote fringe))
 '(hippie-expand-try-functions-list nil)
 '(icicle-reminder-prompt-flag 6)
 '(icomplete-mode t)
 '(ido-enable-regexp t)
 '(ido-everywhere t)
 '(ido-save-directory-list-file "~/.emacs.d/.ido.last" t)
 '(ido-use-filename-at-point (quote guess))
 '(ido-use-url-at-point t)
 '(indent-tabs-mode nil)
 '(inhibit-fit-frame-flag t)
 '(inhibit-startup-buffer-menu t)
 '(inhibit-startup-echo-area-message "sra")
 '(inhibit-startup-screen t)
 '(isearch-allow-scroll t)
 '(keyboard-coding-system (quote iso-latin-1))
 '(longlines-wrap-follows-window-size t)
 '(mail-from-style (quote angles))
 '(mail-self-blind t)
 '(mark-diary-entries-in-calendar t)
 '(menu-bar-mode nil)
 '(mouse-yank-at-point t)
 '(nxml-child-indent 4)
 '(nxml-heading-element-name-regexp ".+")
 '(nxml-outline-child-indent 4)
 '(nxml-section-element-name-regexp ".+")
 '(org-agenda-files (quote ("c:/Documents and Settings/sra/org/JBB.org")))
 '(org-default-notes-file "~/org/.notes")
 '(org-log-done t)
 '(org-return-follows-link t)
 '(org-startup-folded nil)
 '(org-todo-keywords (quote ((sequence "TODO" "DONE"))))
 '(pc-selection-mode nil nil (pc-select))
 '(recentf-max-saved-items 256)
 '(recentf-mode t)
 '(recentf-save-file "~/.emacs.d/recentf")
 '(require-final-newline t)
 '(ruby-indent-level 4)
 '(safe-local-variable-values (quote ((folded-file . t))))
 '(save-abbrevs nil)
 '(savehist-mode t nil (savehist))
 '(scheme-program-name "guile")
 '(scroll-bar-mode (quote right))
 '(semanticdb-default-save-directory "~/.emacs.d/semanticdb" t)
 '(send-mail-function (quote smtpmail-send-it))
 '(sentence-end-double-space nil)
 '(sgml-basic-offset 4)
 '(show-paren-delay 0)
 '(show-paren-mode t)
 '(show-paren-style (quote parenthesis))
 '(show-trailing-whitespace t)
 '(smtpmail-debug-info t)
 '(smtpmail-smtp-service "smtp")
 '(temp-buffer-resize-mode t)
 '(tool-bar-mode nil)
 '(tramp-default-method "ftp")
 '(transient-mark-mode t)
 '(twit-mode t)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify))
 '(user-full-name "SÃ©bastien Rocca-Serra")
 '(view-exits-all-viewing-windows t)
 '(viper-ESC-moves-cursor-back t)
 '(viper-auto-indent nil)
 '(viper-emacs-state-mode-list (quote (dired-mode efs-mode tar-mode browse-kill-ring-mode recentf-mode recentf-dialog-mode occur-mode mh-folder-mode gnus-group-mode gnus-summary-mode completion-list-mode Buffer-menu-mode compilation-mode rcirc-mode jde-javadoc-checker-report-mode view-mode vm-mode vm-summary-mode)))
 '(viper-ex-style-editing nil)
 '(viper-ex-style-motion nil)
 '(viper-insert-state-cursor-color "nil")
 '(viper-insert-state-mode-list (quote (internal-ange-ftp-mode comint-mode inferior-emacs-lisp-mode erc-mode eshell-mode shell-mode log-view-mode grep-mode custom-mode Info-mode help-mode mail-mode)))
 '(viper-shift-width 4)
 '(viper-vi-state-mode-list (quote (fundamental-mode makefile-mode awk-mode m4-mode xrdb-mode winmgr-mode autoconf-mode cvs-edit-mode html-mode html-helper-mode emacs-lisp-mode lisp-mode lisp-interaction-mode jde-mode java-mode cc-mode c-mode c++-mode objc-mode fortran-mode f90-mode basic-mode bat-mode asm-mode prolog-mode flora-mode sql-mode text-mode indented-text-mode tex-mode latex-mode bibtex-mode ps-mode diff-mode idl-mode perl-mode cperl-mode javascript-mode tcl-mode python-mode sh-mode ksh-mode csh-mode gnus-article-mode mh-show-mode)))
 '(viper-vi-style-in-minibuffer nil)
 '(windmove-wrap-around t)
 '(winner-mode t nil (winner)))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(anything-header ((t (:inherit header-line))) t)
 '(cperl-array-face ((((class color) (background dark)) (:foreground "yellow" :weight bold))))
 '(cperl-hash-face ((((class color) (background dark)) (:foreground "Red" :slant italic :weight bold))))
 '(flymake-errline ((((class color)) (:inherit compilation-error))))
 '(hl-line ((t (:inherit fringe))))
 '(tooltip ((t (:inherit variable-pitch :background "systeminfowindow" :foreground "systeminfotext"))))
 '(viper-minibuffer-emacs ((((class color)) nil)))
 '(visible-mark-face ((((class color) (background dark)) (:background "gray" :foreground "black")))))
