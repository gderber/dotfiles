Library <tt>[[info+.el]]</tt> extends the standard Emacs library ##info.el## in several ways.  '''[::Info+]''' provides:




[:bookmarking-enhancements]
* Association of additional information (metadata) with Info
nodes.  You do this by ''[[bookmark|bookmarking]]'' the nodes.  Library '''[[Bookmark+]]'''
gives you the following features in combination with <tt>[[info+.el]]</tt>.
In many ways an Info node and its default bookmark can be
thought of as the same animal.

** Rich node metadata.  In particular, you can tag nodes with any
number of arbitrary '''[[BookmarkPlus#BookmarkTags|tags]]''', to classify them in different and
overlapping ways.  You can also annotate them (in [[Org]] mode, by
default).

** You can use '''`C-h C-b'''' to ''show the metadata'' for a
(bookmarked) node.  This is all of the associated bookmark
information, including the annotation and tags for that node
and the number of times you have visited it.  If invoked with
point on a link, the targeted node is described; otherwise,
you are prompted for the node name.

** Links for bookmarked nodes can have a different face, to let
you know that those nodes have associated metadata.  [[option|Option]]
'''`Info-fontify-bookmarked-xrefs-flag'''' controls whether this is done.

** The [[face]] for this is '''`info-xref-bookmarked'''' by default, but
you can set the face to use ''for a given Info bookmark'' using
'''`C-x f'''' (command `Info-set-face-for-bookmarked-xref').  This
gives you an easy way to classify nodes and ''show the class of
a node by its links''.  Uses faces to make clear which nodes are
most important to you, or which are related to this or that
general topic.

** If [[option]] '''`Info-node-access-invokes-bookmark-flag'''' is non-`nil'
then going to a bookmarked Info node invokes its bookmark, so
that the node metadata (such as number of visits) gets updated.
Command '''`Info-toggle-node-access-invokes-bookmark'''' toggles the
option value.

** You can ''automatically bookmark'' nodes you visit, by
enabling mode '''`bmkp-info-auto-bookmark-mode''''.  Toggle the mode off anytime you do not want to record Info visits.

** In the bookmark-list display (from `C-x r l') you can ''sort''
bookmarks by the time of last visit (`s d') or by the number
of visits (`s v').  This gives you an easy way to see which
parts of which Info manuals you have visited most recently and how
much you have visited them.








[:editable-outline-TOCs]
* ''Editable, outline-enabled tables of contents'' (TOCs).  Command
'''`Info-toc-outline'''' (bound to '''`O'''') opens a separate Info buffer
showing the table of contents (TOC).  This is similar to the
standard command `Info-toc' (bound to `T'), but the buffer is
''cloned'' from the manual and is in '''`outline-minor-mode''''.  Also,
there is no redundancy, by default: each TOC entry is listed
only once, not multiple times.  (This is controlled by option
'''`Info-toc-outline-no-redundancy-flag''''.)

:: You can have any number of such TOCs, for the same manual or for
different manuals.

:: Outline minor mode lets you hide and show, and promote and demote, various parts of the
TOC tree for a manual.  And since the TOC is editable you can
make other changes to it: ''sort'' parts of it, ''delete'' parts of it, ''duplicate'' parts of it, move parts around in an ad hoc way, 
and so on.  '''Info+''' makes the outlining commands behave, so that
hidden Info text (e.g. markup text such as '''`*note'''' ... '''`::''''
surrounding links) is kept hidden.

:: Especially when combined with '''`<tt>[[#Info-persist-history-mode]]</tt>'''',
command '''`<tt>[[#Info-change-visited-status]]</tt>'''' ('''`C-x DEL''''), and
the '''Info+''' [[#bookmarking-enhancements|bookmarking enhancements]] (e.g., special link highlighting and
persistently tracking the number of visits per node),
`Info-toc-outline' gives you a way to organize access and
visibility of a manual's nodes, to reflect how you use it.











* Additional, finer-grained Info highlighting.  This can make a big difference in readability.
** Quoted names, like this: ##‘name-stands-out’## or ##`name-stands-out'##, and strings, like this: ##"string-stands-out"## are highlighted if '''`Info-fontify-quotations-flag'''' is non-`nil'.
** Angle-bracketed names, like this: ##<tab>##, are highlighted if '''`Info-fontify-angle-bracketed-flag'''' and `Info-fontify-quotations-flag' are non-`nil'.
** Isolated single quotes, like this: ##'foobar##, are highlighted if '''`Info-fontify-single-quote-flag'''' and `Info-fontify-quotations-flag' are non-`nil'.
** Emphasized text, that is, text enclosed in underscore characters, like this: ##_this is emphasized text_## ,is
highlighted if `Info-fontify-emphasis-flag' is non-`nil'.
(But if internal variable `info-fontify-emphasis' is `nil'
then there is no such highlighting, and that option has no
effect.)
** In the Emacs Lisp manual, reference items are highlighted, so they stand out.  This means: constants, [[command]]s, functions, [[macro]]s, special forms, syntax classes, [[user option]]s, and other [[variable]]s.

:: Be aware that such highlighting is not 100% foolproof.
Especially for a manual such as Emacs or Elisp, where arbitrary
keys and characters can be present anywhere, the highlighting
can be thrown off.


:: You can toggle each of the `Info-fontify-*-flag' options from the `Info' menu or using an `Info-toggle-fontify-*' command.
For example, command `Info-toggle-fontify-emphasis' toggles
option `Info-fontify-emphasis-flag'.

:: Here is a screenshot of the <code>*Info*</code> buffer, showing some of the highlighting:

:: [[image:DrewsEmacsInfoImage]]






* You can show breadcrumbs in the [[mode line]] or the [[header line]], or both.  See where you are in the Info hierarchy, and access higher nodes directly. 

** In the mode line. Turned ''on'' by default. See `##Toggle Breadcrumbs##' in `mouse-3' mode-line menu and `##Toggle Breadcrumbs in Mode Line##' in `Info' menu (e.g. in the minor-mode indicator). You can customize [[option]] '''`Info-breadcrumbs-in-mode-line-mode'''' if you want to turn it off by default. (Available for Emacs 23+ only.)

** In the header (just below the header line).  I added this to vanilla Emacs 23. Turned ''off'' by default in '''Info+'''.  See `##Toggle Breadcrumbs in Header Line##' in `Info' menu.  Be aware that unlike breadcrumbs in the mode line, this can occasionally throw off the destination accuracy of cross references and searches slightly. Here is a screenshot showing breadcrumbs in the header line (only):

:: [[image:DrewsEmacsInfoCrumbsInHeaderImage]]





* New key bindings, commands, and menus.
* Improved standard commands.  For example:
** `info-display-manual': Completion for manual name.
** `Info-goto-emacs-key-command-node': If the key's [[command]] is not found, then it searches for the [[key sequence]] in the text.

* Syntax table that respects EmacsLisp: apostrophe ('''##'##''') and non-breaking space have ''punctuation'' syntax, not ''word'' syntax.  So for example, you can easily use `C-s C-w' to select text between ##`##...##'## without also grabbing the ##'## at the end. (I reported this as Emacs bug [[http://emacsbugs.donarmstrong.com/cgi-bin/bugreport.cgi?bug=3312|#3312]], which was fixed a couple years later in Emacs 24.)

* Redefinitions of some standard Emacs functions
** An Info [[frame]] is dynamically shrink-wrapped to fit each node individually (if `Info-fit-frame-flag' is non-`nil').
** Searching highlights the found regexp (if `search-highlight' is non-`nil').
** Better default values for input.
** More informative messages -- e.g. how many additional matches found.
* `*info*' has been removed from `same-window-buffer-names', so that a separate window can be used if you so choose.










* Some of the commands defined in Info+:

[:Info-virtual-book]
** '''`Info-virtual-book'''' (bound to '''`v'''') -- Open a virtual Info manual of saved nodes from any number of manuals.  The nodes are those saved in [[option]] '''`Info-virtual-book''''.  With `C-u', [[bookmark]]ed Info nodes are also included.  See also `<tt>[[Icicles - Info Enhancements#VirtualInfoBooks|icicle-Info-virtual-book]]</tt>'.




[:Info-persist-history-mode]
[:Info-saved-history-file]
** '''`Info-persist-history-mode'''' -- Enabling this [[minor mode]] saves the list of your visited Info nodes between Emacs sessions.
Together with command `Info-history' (bound to '''`L'''' by
default), this gives you a persistent virtual manual of the nodes you
have visited in the past.  If the mode is enabled then the list of
visited nodes is saved to the file named by option
'''`Info-saved-history-file'''' when you quit Emacs (not Info) or
when you kill an Info [[buffer]].
(If you also use library '''[[Bookmark+]]''' then you can also bookmark Info nodes, including [[BookmarkPlus#AutomaticInfoBookmarking|automatically]].  This records how many times you have visited each node and when you last did so.)


[:Info-change-visited-status]
** '''`Info-change-visited-status'''' (bound to '''`C-x DEL'''') -- Toggle or set the visited status of the node at [[point]] or the nodes in the active [[region]].  Useful if you use
'''`Info-fontify-visited-nodes'''' to show you which nodes you have visited.  No prefix arg: toggle.  Non-negative prefix arg: set to visited.  Negative prefix arg: set to unvisited.



[:Info-save-current-node]
** '''`Info-save-current-node'''' (bound to '''`##.##'''') -- Save name of current node to list `Info-saved-nodes', for use by `v' (`Info-virtual-book').


[:Info-merge-subnodes]
** '''`Info-merge-subnodes'''' -- Integrate the current Info node with its subnodes (the nodes in its Menu), perhaps recursively. 

:: Use `Info-merge-subnodes' to extract a self-contained report (possibly the whole manual) from an Info manual. The report is itself an Info buffer, with hyperlinks and normal Info behavior.

:: There are various prefix-argument options that govern just how subnodes are treated (recursively or not, for instance). There are a few user variables that let you customize the report appearance.

:: Here is a screenshot of a report. I removed most of the text in each node (replacing it by a narrow band of white with "'''. . .'''") so that I could show more than one node in the screenshot; the real report is a buffer 322 lines long.

:: [[image:DrewsEmacsInfoMerged]]

:: You can convert such a report to HTML using menu Tools > HTMLize Buffer (`mkhtml-any-buffer') from library Lisp:mkhtml.el. For more information, see SaveAsHtml.  (That code is quite old, however.)


'''See Also:''' [[Icicles - Info Enhancements]].



== Discussion and Issues ==

[new]
Your recognition of info-quoted-name seems like is not right, e.g.
<code>
 `(a list of (+ 2 3) elements)
</code>
info-quoted-name highlight it. -- [[ahei]]


[new:DrewAdams:2009-11-06 18:40 UTC]
Only if it is followed (somewhere) by a normal single-quote: ##'##. But yes, otherwise, you are correct.

Highlighting ##‘...’## or ##`...'##, and ##"..."## strings is problematic. In general, the results are good, but there are several things that can throw it off. Fortunately, these things do not occur that commonly in manuals -- but they do occur. The more typical problem is an isolated ##"## character referred to as such in the manual (e.g. ##?"##). You'll just have to live with it or, if you think it's not worth it, customize `Info-fontify-quotations-flag' to nil. -- DrewAdams

[new]
OK, I see -- [[ahei]]


----
[new]
Hi!
A quick question: how to prevent info+ to split my window. I want the original info behavior, if i type M-x info, i want a full window to read.
Thanks!  --[[PasJa]]

[new:DrewAdams:2011-08-23 17:48 UTC]
Should be OK now.  I had some hard-coded cruft leftover from 1999.  Thx -- DrewAdams

----
[new]
Hi!
Version info in current update is inconsistent with previous one. We had Version 21.1 Update #: 4855 while currently Version is 0 with Update #: 4857
Could you correct this? Thanks!  --[[Marcin]]

[new:DrewAdams:2013-08-14 14:30 UTC]
Hi [[Marcin]].  It is correct as is.  I don't use version information for <tt>[[info+.el]]</tt> (or for most of my other libraries either).  ##package.el## needs header field `Package-Requires' to include a version number, however.  (Pseudo) version `0' allows any package requiring the given package to use any version of the required one.  

Each of my library files has a `Last-Updated' field that has the date and last `##Update ###' (which is incremented each time I save the file).  This is the best info to use for reporting/communicating (e.g. about bugs).  Users can ignore the `Version' field for most of my libraries.

Thx -- DrewAdams


----
Lisp:info+.el

CategoryDocumentation CategoryHelp CategoryHypermedia CategoryModes
