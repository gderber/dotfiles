simple-secrets is a small set of functions which turns Emacs into an easy-to-use password manager on any system. The main advantages are
* Trivial set up and use. No strange integration with your login
  manager or dependency on your browser.
* Blazing fast lookup of any piece of secret information, put directly
  into the clipboard so you can paste it to where it's needed, without
  ever looking at it.
* Flexible: store any string under any lookup-name, not just passwords
  for specific sites.
* Easy auto-generation of new secure passwords for immediate store and use.
* Passwords are securely stored in an encrypted file using the KISS
  principle: the passwords are simply stored line-by-line.
* Passwords are NOT stored in Emacs memory but are decrypted and
  looked-up in the password file whenever they are needed. This
  minimises casual attacks.

There are also disadvantages compared to larger password management systems:
* No automagic integration with SSH, browser or other usual suspects
  for password use. When you need a password, you go to Emacs, fetch
  it into the clipboard and paste it where you need it.
* No a priori system of synchronization across multiple computers and
  systems.
* Emacs is a malleable system, so in theory, an attacker with
  user-access to the system could tracelessly alter the Lisp functions
  such that passwords were delivered to him on lookup. This holds
  unavoidably for anything where Emacs is used in a security-critical
  setting. It also holds for most other systems one could care to use
  but is perhaps slightly more difficult.

simple-secrets require Emacs >= 23 since it depends on EasyPG.
simple-secrets, as it is currently written, also requires [[InteractivelyDoThings]].

== Principle ==

Passwords are stored as Key--Password bindings, where Key is a public
string used for looking up the secret. Password is any string (without
new-line).

The usage pattern is that one wants to store passwords, secrets, other
numbers to remember, while allowing one to quickly and conveniently
looking them up. By "looking up", we actually usually just want to put
them into the clipboard such that the passwords can be directly pasted
into whatever place they are needed.

simple-secrets will remember the list of Keys, and when one wants to look up a password, it uses Ido-completion to facilitate this process through the known keys. The found password is then returned or copied into the clipboard.

By "clipboard", we mean the kill ring. To be able to paste this string outside of Emacs, one needs to tell Emacs to overwrite the system clipboard when something is added to the kill ring. This is default in Emacs >= 24.

== Setup ==

# [[https://bitbucket.org/jsrn/.emacs Download simple-secrets.el]].
# Create a password file, e.g. `~/.secrets.gpg'. Open it with Emacs
  and setup encryption/decryption of this file. This requires setting
  up a working EasyPG and a GPG private key on the system.
# Add the following to your `.emacs' (possibly add the optional `FILENAME' path to require):
{{{
  (require 'simple-secrets)
  (setq secret-password-file "path-to-secrets.gpg")
  (secret-load-keys)
}}}
  

== Usage ==

Once `require'd, simple-secrets supplies the following set of
functions. The first two are used frequently enough to warrant a key
binding.

* `secret-lookup-clipboard': Look up a password (interactively) and
  copy it to the clipboard.
* `secret-new': Create a new Key--Password binding. If a blank
  password is supplied, then one is auto-generated.
* `secret-lookup': Look up a password (interactively) and return it.
* `secret-update-password': Change the Password for a given Key .

Auto-generating passwords is carried out using the shell command
`secret-generate-password-command'. By default it uses `pwgen' which
should therefore be on the system. By default it generates passwords
of length 12 containing both capitals, numbers and at least one
symbol.

----
CategoryCryptography
