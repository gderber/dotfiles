: [[image:iciclesimage]]

|| *Previous:*  [[Icicles - Key Bindings]] || '''[[Icicles]]''' || IciclesIndex || *Next:* [[Icicles - Standard Functions Redefined]] ||

----

== Customizing Key Bindings ==

See [[Icicles - Key Bindings]] for a description of the default [[key binding]]s
defined by '''Icicles'''.  The [[user option]]s mentioned here are also presented
there, in context.  You can [[Customize|customize]] all of the key-binding user options (there are over 50 of them!) using this command:

  M-x customize-group RET Icicles-Key-Bindings

Key bindings are very personal choices, and reflect preferences
and habits, as well as keyboard and other configurations.  You
might want to change some of the bindings that '''Icicles''' creates.
This page tells you how to do that.

However, before doing so, unless the default bindings present a
hardware or OS configuration problem for you, please try using the
default '''Icicles''' bindings for a while, before deciding that you want to
change them.  Habit is a powerful persuader, but its advice is not
always the best ;-).

These are the main kinds of '''Icicles''' key bindings.  They are described in the sections below.

* Global bindings
** Additions to [[menu bar]] menus
** Key completion keys (`S-TAB' by default)
* ''Icicle'' mode bindings
* Minibuffer bindings
* `*Completions*' buffer bindings

The '''Icicles''' [[user option]]s for binding keys take two forms.  In most
cases, the option name ends with `-keys', and the option value is
simply a list of keys that act the same.

In the following cases, however, the option name ends with
'''`-key-bindings'''' and the option value is a list of possibly
conditional key bindings.

* '''`<tt>[[Icicles - Customization and General Tips#icicle-top-level-key-bindings|icicle-top-level-key-bindings]]</tt>'''' -- ''top-level'' key bindings.

* '''`<tt>[[Icicles - Customization and General Tips#icicle-minibuffer-key-bindings|icicle-minibuffer-key-bindings]]</tt>'''' -- [[minibuffer]] key bindings
defined regardless of whether completion is available.  This
does not include keys concerned with completion, cycling, and
help, which are covered by other options (below).

* '''`<tt>[[Icicles - Customization and General Tips#icicle-completion-key-bindings|icicle-completion-key-bindings]]</tt>'''' -- minibuffer key bindings
available during [[completion]].

* '''`<tt>[[Icicles - Customization and General Tips#icicle-completion-list-key-bindings|icicle-completion-list-key-bindings]]</tt>'''' -- key bindings for buffer `*Completions*'.

Each of these `*-key-bindings' options has the same form, a list
of elements which each have the form ##(KEY COMMAND CONDITION)##.  ##KEY##
is either a key sequence (string or vector) to bind ##COMMAND## to or
a command to remap to ##COMMAND##.  ##COMMAND## is bound according to the
value of ##KEY##, unless the result of evaluating ##CONDITION## is `nil'.

The following options, with names ending in '''`-keys'''', cover keys
available during completion and which provide [[completion]], [[Icicles - Cycling Completions|cycling]],
or help.




[:icicle-modal-cycle-down-keys]
[:icicle-modal-cycle-up-keys]
[:icicle-apropos-cycle-next-keys]
[:icicle-apropos-cycle-previous-keys]
[:icicle-prefix-cycle-next-keys]
[:icicle-prefix-cycle-previous-keys]

[:icicle-candidate-action-keys]
[:icicle-modal-cycle-down-action-keys]
[:icicle-modal-cycle-up-action-keys]
[:icicle-apropos-cycle-next-action-keys]
[:icicle-apropos-cycle-previous-action-keys]
[:icicle-prefix-cycle-next-action-keys]
[:icicle-prefix-cycle-previous-action-keys]

[:icicle-modal-cycle-down-alt-action-keys]
[:icicle-modal-cycle-up-alt-action-keys]
[:icicle-apropos-cycle-next-alt-action-keys]
[:icicle-apropos-cycle-previous-alt-action-keys]
[:icicle-prefix-cycle-next-alt-action-keys]
[:icicle-prefix-cycle-previous-alt-action-keys]

[:icicle-candidate-help-keys]
[:icicle-modal-cycle-down-help-keys]
[:icicle-modal-cycle-up-help-keys]
[:icicle-apropos-cycle-next-help-keys]
[:icicle-apropos-cycle-previous-help-keys]
[:icicle-prefix-cycle-next-help-keys]
[:icicle-prefix-cycle-previous-help-keys]

[:icicle-prefix-complete-keys]
[:icicle-apropos-complete-keys]
[:icicle-prefix-complete-no-display-keys]
[:icicle-apropos-complete-no-display-keys]
[:icicle-word-completion-keys]
* '''`<tt>[[Icicles - Customization and General Tips#icicle-modal-cycle-down-keys|icicle-modal-cycle-down-keys]]</tt>'''' ('''`down'''', `wheel-down').
 [[Icicles - Cycling Completions|Cycle]] to the next candidate (modal).
* '''`<tt>[[Icicles - Customization and General Tips#icicle-modal-cycle-up-keys|icicle-modal-cycle-up-keys]]</tt>'''' ('''`up'''', `wheel-up').
 Cycle to the previous candidate (modal).
* '''`<tt>[[Icicles - Customization and General Tips#icicle-apropos-cycle-next-keys|icicle-apropos-cycle-next-keys]]</tt>'''' ('''`next'''').
 Cycle to the next apropos-completion candidate.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-apropos-cycle-previous-keys|icicle-apropos-cycle-previous-keys]]</tt>'''' ('''`prior'''').
 Cycle to the previous [[apropos completion]] candidate.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-prefix-cycle-next-keys|icicle-prefix-cycle-next-keys]]</tt>'''' ('''`end'''')
 Cycle to the next prefix-completion candidate.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-prefix-cycle-previous-keys|icicle-prefix-cycle-previous-keys]]</tt>'''' ('''`home'''').
 Cycle to the previous [[prefix completion]] candidate.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-candidate-action-keys|icicle-candidate-action-keys]]</tt>'''' ('''`C-RET'''').
 Act on the current completion candidate.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-modal-cycle-down-action-keys|icicle-modal-cycle-down-action-keys]]</tt>'''' ('''`C-down'''', '''`C-wheel-down'''').
 Cycle to the next candidate and act on it (modal).
* '''`<tt>[[Icicles - Customization and General Tips#icicle-modal-cycle-up-action-keys|icicle-modal-cycle-up-action-keys]]</tt>'''' ('''`C-up'''', '''`C-wheel-up'''').
 Cycle to the previous candidate and act on it (modal).
* '''`<tt>[[Icicles - Customization and General Tips#icicle-apropos-cycle-next-action-keys|icicle-apropos-cycle-next-action-keys]]</tt>'''' ('''`C-next'''').
 Cycle to the next apropos-completion candidate and act on it.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-apropos-cycle-previous-action-keys|icicle-apropos-cycle-previous-action-keys]]</tt>'''' ('''`C-prior'''').
 Cycle to the previous apropos completion candidate and act on it.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-prefix-cycle-next-action-keys|icicle-prefix-cycle-next-action-keys]]</tt>'''' ('''`C-end'''').
 Cycle to the next prefix-completion candidate and act on it.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-prefix-cycle-previous-action-keys|icicle-prefix-cycle-previous-action-keys]]</tt>'''' ('''`C-home'''').
 Cycle to the previous prefix completion candidate and act on it.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-modal-cycle-down-alt-action-keys|icicle-modal-cycle-down-alt-action-keys]]</tt>'''' ('''`C-S-down'''', '''`C-S-wheel-down'''').
 Cycle to the next candidate and alternative-act on it (modal).
* '''`<tt>[[Icicles - Customization and General Tips#icicle-modal-cycle-up-alt-action-keys|icicle-modal-cycle-up-alt-action-keys]]</tt>'''' ('''`C-S-up'''', '''`C-S-wheel-down'''').
 Cycle to the previous candidate and alternative-act on it (modal).
* '''`<tt>[[Icicles - Customization and General Tips#icicle-apropos-cycle-next-alt-action-keys|icicle-apropos-cycle-next-alt-action-keys]]</tt>'''' ('''`C-S-next'''').
 Cycle to the next apropos-completion candidate and alternative-act on it.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-apropos-cycle-previous-alt-action-keys|icicle-apropos-cycle-previous-alt-action-keys]]</tt>'''' ('''`C-S-prior'''').
 Cycle to the previous apropos completion candidate and alternative-act on it.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-prefix-cycle-next-alt-action-keys|icicle-prefix-cycle-next-alt-action-keys]]</tt>'''' ('''`C-S-end'''').
 Cycle to the next prefix-completion candidate and alternative-act on it.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-prefix-cycle-previous-alt-action-keys|icicle-prefix-cycle-previous-alt-action-keys]]</tt>'''' ('''`C-S-home'''').
 Cycle to the previous prefix completion candidate and alternative-act on it.

* '''`<tt>[[Icicles - Customization and General Tips#icicle-candidate-help-keys|icicle-candidate-help-keys]]</tt>'''' ('''`C-M-RET'''' etc.).
 Display help for the current completion candidate.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-modal-cycle-down-help-keys|icicle-modal-cycle-down-help-keys]]</tt>'''' ('''`C-M-down'''', '''`C-M-wheel-down'''').
 Cycle to the next candidate and show help for it (modal).
* '''`<tt>[[Icicles - Customization and General Tips#icicle-modal-cycle-up-help-keys|icicle-modal-cycle-up-help-keys]]</tt>'''' ('''`C-M-up'''', '''`C-M-wheel-up'''').
 Cycle to the previous candidate and show help for it (modal).
* '''`<tt>[[Icicles - Customization and General Tips#icicle-apropos-cycle-next-help-keys|icicle-apropos-cycle-next-help-keys]]</tt>'''' ('''`C-M-next'''').
 Cycle to the next apropos-completion candidate and show help for it.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-apropos-cycle-previous-help-keys|icicle-apropos-cycle-previous-help-keys]]</tt>'''' ('''`C-M-prior'''').
 Cycle to the previous apropos completion candidate and show help for it.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-prefix-cycle-next-help-keys|icicle-prefix-cycle-next-help-keys]]</tt>'''' ('''`C-M-end'''').
 Cycle to the next prefix-completion candidate and show help for it.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-prefix-cycle-previous-help-keys|icicle-prefix-cycle-previous-help-keys]]</tt>'''' ('''`C-M-home'''').
 Cycle to the previous prefix completion candidate and show help for it.




* '''`<tt>[[Icicles - Customization and General Tips#icicle-prefix-complete-keys|icicle-prefix-complete-keys]]</tt>'''' ('''`TAB'''')
 Prefix-complete your input.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-apropos-complete-keys|icicle-apropos-complete-keys]]</tt>'''' ('''`S-TAB'''')
Apropos-complete your input.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-prefix-complete-no-display-keys|icicle-prefix-complete-no-display-keys]]</tt>'''' ('''`C-M-TAB'''')
 Prefix-complete without showing `*Completions*'.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-apropos-complete-no-display-keys|icicle-apropos-complete-no-display-keys]]</tt>'''' ('''`C-M-S-TAB'''')
 Apropos-complete without showing `*Completions*'.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-word-completion-keys|icicle-word-completion-keys]]</tt>'''' ('''`M-SPC'''')
 Prefix-complete your input a word at a time.




[:icicle-toggle-completion-mode-keys]
Options `icicle-apropos-complete-keys' and `icicle-apropos-complete-no-display-keys' go together, as do
options `icicle-prefix-complete-keys' and 
`icicle-prefix-complete-no-display-keys'.  The first perform
apropos completion; the second perform prefix completion.

By default, '''Icicles''' reflects vanilla Emacs by associating `TAB'
with prefix completion.  But you might prefer to associate it with
apropos completion.  Or you might want to switch back and forth.

Besides customizing those completion-mode key options
individually, you can easily swap the keys that for apropos
completion with those for prefix completion, at any time.  For
that, use command '''`icicle-toggle-completion-mode-keys'''', which is
bound to '''`C-S-TAB'''' during completion.  When it switches away from
whatever persistent values you have for these options, it asks you
whether you want to save the new values.  This command also
toggles the value of option '''`<tt>[[Icicles - Customization and General Tips#icicle-default-cycling-mode|icicle-default-cycling-mode]]</tt>''''.






[:icicle-key-complete-keys]
[:icicle-key-complete-keys-for-minibuffer]
[:icicle-completing-read+insert-keys]
[:icicle-read+insert-file-name-keys]
[:icicle-search-from-isearch-keys]
[:icicle-isearch-complete-keys]
The following options, with names ending in '''`-keys'''', cover
miscellaneous actions that make use of the minibuffer in some way.

* '''`<tt>[[Icicles - Customization and General Tips#icicle-key-complete-keys|icicle-key-complete-keys]]</tt>'''' ('''`S-TAB'''') [[Icicles - Key Completion|Complete key sequences]].
* '''`<tt>[[Icicles - Customization and General Tips#icicle-key-complete-keys-for-minibuffer|icicle-key-complete-keys-for-minibuffer]]</tt>'''' ('''`M-S-TAB'''') [[Icicles - Key Completion|Complete key sequences]] in the [[minibuffer]].
* '''`<tt>[[Icicles - Customization and General Tips#icicle-completing-read-insert-keys|icicle-completing-read+insert-keys]]</tt>'''' ('''`C-M-S-c'''')  Completion on demand.
* '''`<tt>[[Icicles - Customization and General Tips#icicle-read-insert-file-name-keys|icicle-read+insert-file-name-keys]]</tt>'''' ('''`C-M-S-f'''')  Completion on demand for file names.

* '''`<tt>[[Icicles - Customization and General Tips#icicle-search-from-isearch-keys|icicle-search-from-isearch-keys]]</tt>'''' ('''`S-TAB'''')
 Start `icicle-search' from [[Isearch]].
* '''`<tt>[[Icicles - Customization and General Tips#icicle-isearch-complete-keys|icicle-isearch-complete-keys]]</tt>'''' ('''`M-TAB'''', '''`C-M-TAB'''')
 Complete Isearch string using [[search ring]].
* '''`<tt>[[Icicles - Customization and General Tips#icicle-isearch-history-insert-keys|icicle-isearch-history-insert-keys]]</tt>'''' ('''`M-o'''')
Append past Isearch strings, using completion with the search ring.



[:icicle-kbd]
Whenever you customize an '''Icicles''' key binding, whether via a user
option value or using `define-key' or `global-set-key', you can
use function '''`icicle-kbd'''' to express the key sequence in a
user-friendly way.  It is the same as vanilla Emacs `kbd', except that (by
default) it does not require you to use angle brackets ('''`##<##'''', '''`##>##'''')
around function keys (and it does not expect you to).

So you can write, e.g., '''##(icicle-kbd "C-delete")##''' instead of one of
these: ##(kbd "C-<delete>")##, ##[C-delete]##, or ##[(control delete)]##.
There are plenty of examples of the use of `icicle-kbd' in the
'''Icicles''' source files.



[:icicle-TAB-S-TAB-only-completes-flag]

In addition to the options listed above, whose values are keys or lists of keys, option '''`icicle-TAB/S-TAB-only-completes-flag'''' controls whether repeating `TAB' or `S-TAB' causes (modal) candidate [[Icicles - Cycling Completions|cycling]].  The default value of `nil' means that it does.
If you prefer that these keys (actually the keys that are the
values of options `[[#icicle-prefix-complete-keys]]' and
`[[#icicle-apropos-complete-keys]]') perform only [[completion]] and you
use other keys for cycling, then set the value to non-`nil'.











[:GlobalBindings]
[:MenuBarMenus]
=== Customizing Global Bindings ===

'''Icicles''' normally adds items to appropriate existing menu-bar
menus, such as '''File''' and '''Options''', as well as to menu-bar menus
'''Minibuf''' and '''Icicles'''.  These items are placed in an '''Icicles'''
submenu (e.g. '''Files''' > '''Icicles''').  If
you do not want to add an '''Icicles''' submenu,
then set [[option]] '''`<tt>[[Icicles - Customization and General Tips#icicle-touche-pas-aux-menus|icicle-touche-pas-aux-menus]]</tt>'''' to non-`nil' before loading '''Icicles'''.
The menu items are then added to the '''Icicles''' menu instead.

Icicles binds key completion (`icicle-complete-keys') to the keys
defined in option '''`<tt>[[Icicles - Customization and General Tips#icicle-key-complete-keys|icicle-key-complete-keys]]</tt>''''.  See
[[Icicles - Key Bindings]] for more information about this.











[:IcicleModeBindings]
=== Customizing Icicle Mode Bindings ===

In the ''Icicle'' mode keymap, several top-level commands are bound by
default.  You can use option '''`<tt>[[Icicles - Customization and General Tips#icicle-top-level-key-bindings|icicle-top-level-key-bindings]]</tt>'''' to
customize the keys that are used for these commands, or to remove
any such bindings.










[:MinibufferBindings]
=== Customizing Minibuffer Bindings ===

There are user options for most '''Icicles''' minibuffer bindings that
you might want to change -- see above for the list.  This section tells
you how to change additional bindings.

To understand how you can modify '''Icicles''' minibuffer bindings, it
helps to know how '''Icicles''' creates the default bindings.  For that,
the best advice is to consult the EmacsLisp code in library
'''<tt>[[icicles-mode.el]]</tt>'''. Even if you are not very familiar with Emacs-Lisp, however, you
should be able to do what you want by adapting the example shown here.

Suppose that you want to bind `f8' and `f9' to traverse the input history up and down whenever you are in ''Icicle'' mode.  There are no user options for this, but you can do it by inserting this code into your
init file (##~/.emacs##), before the code that requires (loads)
library '''<tt>[[icicles.el]]</tt>''':

    (add-hook 'icicle-mode-hook 'bind-my-icicles-keys)
    (defun bind-my-icicles-keys ()
      "Replace some default Icicles minibuffer bindings with others."
      (dolist (map (append (list minibuffer-local-completion-map
                                 minibuffer-local-must-match-map)
                           (and (fboundp 'minibuffer-local-filename-completion-map)
                                (list minibuffer-local-filename-completion-map))))
        (when icicle-mode
          (define-key map (icicle-kbd "f8") 'previous-history-element)
          (define-key map (icicle-kbd "f9") 'next-history-element))))



'''Icicles''' does not change the standard Emacs
minibuffer bindings for `M-p' and `M-n', so they are still
`previous-history-element' and `next-history-element'.  You can
just use `define-key' to change the bindings of `M-p' and `M-n'.

'''See also:'''

* [[Icicles - Key Bindings]]
* [[Icicles - Customization and General Tips]] for information on other customizations, besides key bindings.
* [[Icicles - Key Binding Discussion]] for some discussion about customizing '''Icicles''' key bindings.
* [[RubikitchIciclesConfiguration]] for configuration example. -- [[rubikitch]]

----


|| *Previous:*  [[Icicles - Key Bindings]] || '''[[Icicles]]''' || IciclesIndex || *Next:* [[Icicles - Standard Functions Redefined]] ||



DrewsElispLibraries referenced here: Lisp:icicles.el, Lisp:icicles-fn.el


CategoryKeys
CategoryMenus
CategoryCommands 
CategoryCompletion
CategoryModes
CategoryCode




