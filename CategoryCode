: "sometimes i feel like we're making emacs better and better because we don't know what to do with emacs once it is finished." -- AlexSchroeder on InternetRelayChat

Click the heading to search for all pages belonging to the writing
of Lisp code.  These pages contain information for would-be authors of
new major and minor modes: EmacsLisp style, coding conventions,
pointers and documentation to existing features.  What follows are
some suggestions; find more other pages by searching for
backlinks via the heading.

Before you get starting diving into Emacs Lisp, it's a good idea to be
aware of some EmacsLispLimitations.  Once upon a time I thought I
wanted to use Emacs Lisp for all of my coding needs, but then
rediscovered the old truism: some languages are better suited for some
tasks. -- JohnWiegley

== Learning Emacs Lisp ==

Ordered for pedagogy:

* InstallingPackages -- How to load an EmacsLisp library that didn't come with Emacs.
* EmacsLispReference -- Free manual for the EmacsLisp programming language.
* EmacsLispIntro -- Free tutorial to EmacsLisp.
* OnlineResources -- Some external sites have Emacs Lisp learning materials.
* ElispCookbook -- A collection of various code snippets for getting things done.
* EmacsSymbolNotation -- A quick reference for various symbols like `'a'  `?b' `:c'. 
** BackquoteSyntax -- Using backquotes.
* EvaluatingExpressions -- basic stuff you need to check variables. 
* EmacsLispMode -- The major mode for writing Emacs Lisp in Emacs. 
* InteractiveFunction -- How to write a function that you can call via M-x or bind to keys.
** UniversalArgument -- How to write a function that knows whether the C-u prefix was provided.
** RegionArgument -- How to interact with the the region. 
* LambdaExpression -- Anonymous functions. Not just for computer science theorists anymore! 
* VariableDefinition, BufferLocalVariable -- How to define variables.
** [[DynamicBindingVsLexicalBinding| Dynamic and Lexical Binding]]: Differences and using both simultaneously. 
* ComparisonFunctions -- Testing predicates like: does this variable contain that string? Are these numbers equal?
** NotANumber -- Not-a-number is a number! How to test for this case.
* ListStructure -- Basic ideas introduction to lists in Lisp. 
** AlistVsPlist -- Difference between association lists and property lists.
** CircularLists -- Endless loops in lisp structures.
* ListModification -- For Lisp newbies: nconc, append, cons, and friends.
** DestructiveOperations -- For Lisp newbies: some examples using sort and explaining the use of copy-sequence.
** ListModificationCl -- Using functions from the broader Common Lisp library to modify lists.
** ListModificationLibrary -- More functions to modify lists.
** IntList -- Basic examples showing how to recursively create lists of integers.
* Data Types:
** StringModification -- You cannot modify an Emacs string; you return a modified copy instead.
** HashMap -- Hash maps.
** VectorUsage -- Searching vectors.
* MacroBasics -- Write code that generates more code. Save yourself some typing. 
* EmacsLispIntrospection -- Learning more about functions programatically.
* [[ConcurrentEmacs|Concurrency]] through asynchronous processes. 




== Writing a Major Mode ==

Tips and tricks for writing a MajorMode.

* GenericMode -- For very simple modes including font-locking and comments.
* DerivedMode -- For new modes very similar to existing modes.
* SampleMode -- Complete Emacs Lisp example for a real major mode.
* ModeTutorial -- A tutorial for mode writers.
* ImenuMode -- Provide an index menu to the interesting parts in the buffer.
* Font-lock programming:
** AddKeywords -- Just add new keywords and highlighting to an existing mode.
** EasyFontLock -- How to color only one line at once .
** MultilineFontLock -- How more lines get their color.
* Other tools and solutions:
** AddToListWidget -- Code to use if a user is supposed to add items to a list which you provide (see CustomDiffList for the result)
** AdvisingFunctions -- Tweak an existing function without rewriting it.
** BitConversion -- Numbers to bits and back.
** CoRoutines -- Defining functions which can pick up where they left off.
** CyclingOfValues -- How to choose the next symbol from a list.
** DebuggerMode -- How to debug your lisp.
** LocalFunctions -- Evil hackery when implementing local functions.
** MultiLineWidget
** ProgrammableCompletion
** ReplaceInString -- For Emacs 20 and its ilk.
** StateMachine -- Example source making heavy use of macros.
** StringPermutations -- Code example that shows how to write permutations.
** SymbolicRegexp -- Writing readable regular expressions in your code.
** UniqueSubstrings -- Generating abbreviations.
** UnsafeP -- Detecting unsafe Lisp expressions.
** UseIswitchBuffer -- ...in ways it was not intended to be used.
** MajorComint -- Associates a particular major mode with a comint subprocess.

== Style and suggestions ==

* AdviceVsHooks -- Sometimes a package cannot be customized using variables and hooks; in these situations defadvice must be used.
* CodingStyle -- Write well formatted code.
* CheckDoc -- A tool to check your documentation strings.
* ElispPackageChecklist -- A document with suggestions for package authors.
* InitFileByPurpose -- Take back control of your InitFile, don't let it take control of you. 
* MeaningfulNames -- Choosing identifiers (symbols) for code.
* NonLocalExit -- Examples of error handling and `throw'...`catch'.
* NonNilValues -- Which non-`nil' value should I use? `t'? `42'? Does it matter?
* QuotedLambda -- There is no need to quote lambda expressions.
* UnitTesting -- How to write unit-test code.
* WhenToUseIf -- When to use which conditional control structure (`cond', `if', `when', `unless', `and', `or', `case').
* InvisibleText -- Using TextProperties and EmacsOverlays
* CommonlyUsedKeybindings -- Try to use keys that correlate with other packages.

== Emacs Lisp Tools and Tricks ==

* FindFunc -- Find functions or variables.
* AutomaticFileHeaders -- File headers that are automatically inserted and updated.
* AutoRecompile - re-byte-compile Emacs lisp files.
* BatchMode -- EmacsLisp as a scripting language
* CommonLispForEmacs -- How to use CommonLisp to program Emacs.
* ElispFormat -- Format elisp code automatically.
* ElispDepend -- Generate depend information of elisp code.
* EmacsLispObjects -- An implementation of Common Lisp Object System for Emacs
* EmacsLispProfiler -- Elp.el comes with Emacs.
* EmacsLispBenchmark -- Programmatic profiling with benchmark.el
* EmacsScripts -- Run scripts from the shell that use Emacs
* HttpServer -- Emacs as a web-server
* LibraryDependencies -- Keep track automatically of Emacs Lisp libraries `require'd by another library
* LiterateEmacsLisp -- Documenting and writing lisp, simultaneously.
* [http://user42.tuxfamily.org/elisp-docstring-preview/index.html elisp-docstring-preview.el] -- Preview <code>defun</code> etc docstrings
* Lisp:simple-call-tree+.el -- Explore call tree of code and perform query-replace on individual functions

[:Installers]
== Emacs Lisp Installers ==

* [[el-get]] - apt-get user experience for Emacs Lisp, with full support for emacswiki
* InstallElisp - Retrieve and install elisp from Internet
* [[elinstall]] - An installer for elisp code. It sets up autoloads, load-path, etc. by Tom Breton (Tehom)
* [[ELPA]] - Emacs Lisp Package Archive by TomTromey
* [[Pases]] -- Packaging system for Emacsen
* AutoInstall - Asynchronous retrieve and install elisp file from Internet. 
* [http://gmarceau.qc.ca/plugin.el plugin.el] -- Automatic fetching, installing and loading of Emacs modules
* [http://www.cb1.com/~john/computing/emacs/lisp/basics/use-package.el use-package.el] -- Arrange use of an elisp package
* UsePackage - Describe how to get and configure a package, then install on demand with an autoload-like mechanism

== Emacs Lisp Libraries ==

* ArrayExtension -- Support for arrays, and matrixes.
* AutoOverlays -- Overlays defined by regexps, automatically created, updated and destroyed as buffer is modified.
* [[AVLtrees]] -- AVL tree data structures (self-balancing binary trees)
* CompletionUI -- Completion user interface, providing various highly customizable completion mechanisms (dynamic, hotkeys, cycling, tab-completion, help-echo, tooltip, menu...)
* DoReMi -- Macro `define-doremi' and command `doremi'.  Use them to define commands that let you use the arrow keys and/or mouse wheel to ''make incremental changes'' to things or ''cycle through a ring'' of things.
* DictionaryTrees -- Advanced dictionary data structures
* ElispParser -- A small parser tool written in EmacsLisp.
* EmacsDataBase is a flexible system for defining, accessing, modifying, summarizing, and generally playing with, a set of records.  You can view each record individually or summarized (with other records) in separate buffer. Record format (field names and their types) can be arbitrarily complex.
* TinyDb -- A mini-database, smaller than EmacsDataBase
* ParserCompiler -- A macro that compiles Recursive Descent parsers in elisp.
* [[Heaps]] -- Heap data structures (a.k.a. priority queues)
* [[Icicles]] -- New possibilities for using completion and cycling of completion candidates.
* IncrementalRead -- Support building libraries that act incrementally on input.
* [[Iterate]] -- A macro for iterating in different fashions over various data structures, similar in spirit to Common Lisp iterate library
* LaterDo -- Calling functions later, thus do some sort of fake threading
* LuiMode -- A Linewise User Interface
* MacroUtilities -- Utilities for writing macros.
* ModeLocal -- Causing a variable or function to have a value/behavior based on major mode.
* NotAndOr -- Commands to transform Boolean EmacsLisp [[sexp]]s.
* PasswordGenerator
* PatternMatching -- Matching Lisp expressions based on pattern expressions.
* [[Queues]] -- Queue data structures
* RecordType -- Definition of a new type: record. A record is a set of named fields with their associated type.
* SemanticBovinator -- A flex/bison lexer and parser generator written in EmacsLisp.
* SubdirsToList -- Adding subdirectories to a list recursively
* TaggedNFA -- Tagged non-deterministic finite state automata (generally used for regular expression matching algorithms)
* TcpClient -- Network interface to ease the creation of network related script
* TernarySearchTrees -- Ternary search tree data structures (obsolete - use [[Tries]] instead)
* ThingAtPoint -- Functions to return various kinds of Emacs Lisp entity at or near point. For example, return the Lisp symbol name nearest point.
* [[Tries]] -- General trie data structures (including ternary search trees)
* UseCustomizeForKeyBindings -- Widget and `defcustom' code to let users use Customize for key bindings.
* VectorModificationLibrary -- Functions to modify vectors
* XmlParser -- Writing code which reads and manipulates XML.  Pointers to DOM, XPath, etc.
* [[Infix]]    -- Writing infix math expressions

== Proof of Concept ==

* DefiningErrors -- How to easily define errors types.
* [http://user42.tuxfamily.org/bytecomp-simplify/index.html bytecomp-simplify.el] -- Warnings for possible code simplifications
* ThreadMacroFromClojure -- Threading expressions and how to do this in EmacsLisp

== Discussion About Emacs Lisp ==

* CategoryExtensionLanguage -- Other Emacs extension languages currently supported, and future implementations of Emacs in other languages.
* DynamicBindingVsLexicalBinding -- Benefits and pitfalls of dynamic binding and a way to simulate lexical binding.
* EmacsLispLimitations -- Limitations of EmacsLisp and reasons not to use it for everything.
* LangPollResults -- Preliminary results of the language poll on the #emacs channel.
* WhyDoesElispSuck -- Why people say that EmacsLisp is a bad language, deprecated, not the ideal choice for the future, or <your remark here>...
* RationalElispPackaging -- Design of a packaging system for Emacs Lisp software.
* Emacs Internals -- I've been reading the source for a while. Trying to start annotate how to read the source for others. Here's a [http://members.cox.net/nish4111/modules.gif diagram] of how I see it presently. (Not sure if this is correct place to put this?)
* [[Namespaces]] -- Various implementations and thoughts regarding namespaces

== Xemacs ==

Xemacs is not used very much these days.  This section is kept for legacy.
* ComparativeEmacsology - Writing code that works on different versions of Emacs and XEmacs. 
** LineInformation -- Eolp vs. line-end-position
** MouseEvent -- Where was the mouse clicked
** WindowHeight -- How big is a window
** XEmacsExtents -- InvisibleText in XEmacs. 
* EasyMenu -- Write Emacs/XEmacs compatible menu definitions
* ElispCompatibility -- General recommendations for writing compatible code.
* [http://www.xemacs.org/Documentation/packageGuide.html XEmacs package manager] -- (Any XEmacs users want to describe their experience with this?)


== Curiosities ==

This list is mostly for pages that are no longer relevant because Emacs comes with features making them obsolete.

* FakeClosures -- How to fake a closure in Emacs Lisp (Emacs introduced LexicalBinding with version 24)

