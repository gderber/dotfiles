[[en:AppointmentMode]]

ダイアリモードは(アニバーサリーとかそのようなもの)日常業務を維持するためには向いています. 
appt.elの追加でそれは同じく時間指定のアポイントメントのために便利になるだろう.
ここに私が持っている設定があります:

<pre>
(if (not (featurep 'appt))(require 'appt))
(appt-initialize)                                             ; XEmacs; use (appt-activate 1) for GNU Emacs
(setq appt-msg-countdown-list '(10 5 1)                       ; XEmacs
      appt-audible (cons 3 .5)
      appt-check-time-syntax nil                              ; XEmacs
      appt-announce-method 'appt-persistent-message-announce  ; XEmacs
      appt-display-duration 59)                               
(defun diary-save-hook ()
"ダイアリファイルをセーブする時にするもの."
  (appt-initialize))
(defun add-diary-save-hook ()
  "find-file-hooks は diary-save-hook を適切なときに追加するためにフックする"
  (if (string-match "diary" (buffer-name))
      (add-hook 'after-save-hook 'diary-save-hook)))
(add-hook 'find-file-hooks 'add-diary-save-hook)
</pre>

appt-initialize 関数は全ての汚れ仕事をやります.
それはアポイントメントのためにdiaryファイルを実際にスキャンしそれらをリマインダーのリストへ追加します.
もしあなたが　あなたのダイアリへアポイントメントを追加し appt-initialize を走らせないならば, あなたはリマインドされないでしょう.
そのため私がappt-initializeを呼ぶためにダイアリバッファーにafter-save-hookをセットする.
なぜならば after-save-hook は常にバッファーローカルです, バッファーが作られた後あなたはそれをセットする必要があります.
そのため私がfind-file-hooksへその他のフックを追加する必要があった.

それらが何をすべきかを見るために各変数について様々な文書を調べろ(C-h v).
文書は自明である.
楽しめ! 提案と改善によってアップデートする.
-- DougAlcorn 15 Aug 2002

----

あなたが実際に現れたそれに気が付くためにモードラインの明るいフェースでアポイントメントをハイライトするためのナイスな方法がここにある!
(GNU Emacs CVSは残念なことに私には動かない -- ColinMarquardt)

<pre>
;; ---Jeff Millerからモードラインに赤でアポイントメントをハイライトするためのすごいちょっとしたコード---

(defface appt-face
  '((t (:foreground "red" :background "white")))
  "現在のアポイントメントを示すフェース."
  :group 'appt)

(defadvice appt-disp-window (before appt-hilite-more activate)
  (when appt-mode-string
    (put-text-property 1 (- (length appt-mode-string) 1)
		       'face 'appt-face appt-mode-string)))

(defadvice appt-check (after appt-hilite activate)
  (when appt-mode-string
    (put-text-property 1 (- (length appt-mode-string) 1)
		       'face 'appt-face appt-mode-string)
    (force-mode-line-update)))

;; ---------------------------------
</pre>

私の進行中の仕事はここにある.
このコードは(より機能的である) XEmacs appt.el に少なくとも GNU Emacs 21.2 で働かさせるべきである
save hook はこの時バッファをローカルにさせられる. ウィンドウアナウンスメソッドは壊れているように見えるから注意してほしい.

<pre>
;; ステータスバーに時間を表示する.
;; 私はロードアベレージを表示しないためにカスタマイズされたフォームを持っている, 私がそれを探す時気が散る

(display-time)

;; 互換性 - 私達はとにかくapptが定義するエイリアスを本当に見逃さない.
;; XEmacsもしくはEmacs 21.3以上でこれは必要はない

(when (not (fboundp 'defvaralias))
  (defun defvaralias (&rest args)))

(when (require 'appt nil t)
  (setq appt-msg-countdown-list '(10 5 1 0)
        appt-audible (cons 3 .5)
        appt-check-time-syntax nil
        appt-announce-method 'appt-persistant-message-announce
        appt-display-duration 360)

  ;; dingはGNU Emacsで異なる引数の数を取る - 最終的に私はとにかく私のサウンドカード使うためにこれを再定義するだろう

  (when (not (featurep 'xemacs))
    (defun appt-beep (&rest args)))

  (defun diary-save-hook ()
    "ダイアリファイルをセーブする時にするもの."
    (appt-activate 1))

  (defun add-diary-save-hook ()
    "find-file-hooks は diary-save-hook を適切なときに追加するためにフックする"
    (let* ((diary-file-components (split-string diary-file "/"))
           (diary-buffer-name
            (nth (1- (length diary-file-components)) diary-file-components)))
      (if (string= (buffer-name) diary-buffer-name)
          (add-hook (make-variable-buffer-local 'after-save-hook)
          'diary-save-hook))))

  (add-hook 'find-file-hooks 'add-diary-save-hook)
  (appt-activate 1))
</pre>

-- DamienElmes

EmacsCvsでそのものが全て動くことを想定していますか?
どうやら, 私はここに appt-initialize で void-function エラーを持っている --zeDek

----
それは迅速な対応でした!
私はappt-initializeについて解明を試した そして 私の.emacsの全ての (appt-initialize) を (appt-activate 1) で置換したが,
しかし今私は基本的には同じメッセージを得た: "Symbol's function definition is void: appt-activate".
もしかして私は間違った順序でことをしている? -- WebMayfield

----
~/.emacsへ追加されるための次のコードを21.1.3のアポイントメントのInfo文書は持っている:

     (display-time)
     (add-hook 'diary-hook 'appt-make-list)
     (diary 0)

これはあなたが`M-x diary'を呼ぶ時ならいつでも`appt-add'によって追加されるアポイントメントは削除されるという残念な効果を持つ
なぜなら `appt-make-list' がする最初のうちの一つのことは`appt-time-msg-list'を`nil'にセットするからである.
私は私の ~/.emacs ファイルで次のコードでこれを修正した:

    (require 'appt)
    (defun my/refresh-appt-list ()
      "現在設定されているアポイントメントを保持する."
      (let ((my/appt-list (copy-sequence appt-time-msg-list)))
        (appt-make-list)
        (setq appt-time-msg-list 
              (appt-sort-list
               (nconc appt-time-msg-list my/appt-list)))))
    (add-hook 'diary-hook 'my/refresh-appt-list)

-----

[[カテゴリ・カレンダー]]
[[ダイアリモード]]
[[カレンダーモード]]
